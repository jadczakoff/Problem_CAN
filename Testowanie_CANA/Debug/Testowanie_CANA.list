
Testowanie_CANA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08007de8  08007de8  00017de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008210  08008210  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08008210  08008210  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008210  08008210  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008210  08008210  00018210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008214  08008214  00018214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001fc  08008414  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  08008414  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be62  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002497  00000000  00000000  0002c087  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002e520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002ee88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018555  00000000  00000000  0002f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7b7  00000000  00000000  00047c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008526a  00000000  00000000  000523c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d762e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030dc  00000000  00000000  000d76ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007dcc 	.word	0x08007dcc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	08007dcc 	.word	0x08007dcc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <MemTable_Init>:
 */
#include "Addresses.h"



void MemTable_Init(AddressLIST *AL){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
//Wartości domyślne -----------
AL->MEM[MEM_ID] = 1;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
AL->MEM[ MEM_HARD_VER ] = 10;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	220a      	movs	r2, #10
 8000b8e:	705a      	strb	r2, [r3, #1]
AL->MEM[ MEM_SOFT_VER ] = 10;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	220a      	movs	r2, #10
 8000b94:	709a      	strb	r2, [r3, #2]
AL->MEM[ MEM_LOCK ] = 0;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2200      	movs	r2, #0
 8000b9a:	70da      	strb	r2, [r3, #3]
AL->MEM[ MEM_ANS_MODE ] = 0b00000001;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	711a      	strb	r2, [r3, #4]
AL->MEM[ MEM_ANS ] = 0b00000001;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	715a      	strb	r2, [r3, #5]
AL->MEM[ MEM_UC_TEMP ] = 0;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	719a      	strb	r2, [r3, #6]
AL->MEM[ MEM_UC_MAX_TEMP ] = 50;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2232      	movs	r2, #50	; 0x32
 8000bb2:	71da      	strb	r2, [r3, #7]

}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <MemWriteTable>:

void MemWriteTable(AddressLIST *AL, uint8_t Address ,uint8_t Lenght,  uint8_t *Value){
 8000bbe:	b480      	push	{r7}
 8000bc0:	b087      	sub	sp, #28
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	72fb      	strb	r3, [r7, #11]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	72bb      	strb	r3, [r7, #10]
    uint8_t *TmpPointer;
    TmpPointer = (uint8_t *)Value;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	617b      	str	r3, [r7, #20]
    for(uint8_t cnt = 0; cnt < Lenght; cnt++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	74fb      	strb	r3, [r7, #19]
 8000bd8:	e00d      	b.n	8000bf6 <MemWriteTable+0x38>

    AL->MEM[Address++] = *TmpPointer;
 8000bda:	7afb      	ldrb	r3, [r7, #11]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	72fa      	strb	r2, [r7, #11]
 8000be0:	461a      	mov	r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	7819      	ldrb	r1, [r3, #0]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	5499      	strb	r1, [r3, r2]

    TmpPointer++;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
    for(uint8_t cnt = 0; cnt < Lenght; cnt++){
 8000bf0:	7cfb      	ldrb	r3, [r7, #19]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	74fb      	strb	r3, [r7, #19]
 8000bf6:	7cfa      	ldrb	r2, [r7, #19]
 8000bf8:	7abb      	ldrb	r3, [r7, #10]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d3ed      	bcc.n	8000bda <MemWriteTable+0x1c>
    }


}
 8000bfe:	bf00      	nop
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <MemReadTable>:

void MemReadTable(AddressLIST *AL, uint8_t Address, uint8_t Lenght, const uint8_t *OutBuffer){
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	72fb      	strb	r3, [r7, #11]
 8000c16:	4613      	mov	r3, r2
 8000c18:	72bb      	strb	r3, [r7, #10]

    uint8_t *TmpPointer;

    TmpPointer = (uint8_t *)OutBuffer;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	617b      	str	r3, [r7, #20]

    for(uint8_t cnt = 0; cnt <= Lenght; cnt++){
 8000c1e:	2300      	movs	r3, #0
 8000c20:	74fb      	strb	r3, [r7, #19]
 8000c22:	e00d      	b.n	8000c40 <MemReadTable+0x38>
    *TmpPointer = AL->MEM[Address++];
 8000c24:	7afb      	ldrb	r3, [r7, #11]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	72fa      	strb	r2, [r7, #11]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	5c9a      	ldrb	r2, [r3, r2]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	701a      	strb	r2, [r3, #0]
    TmpPointer++;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3301      	adds	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
    for(uint8_t cnt = 0; cnt <= Lenght; cnt++){
 8000c3a:	7cfb      	ldrb	r3, [r7, #19]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	74fb      	strb	r3, [r7, #19]
 8000c40:	7cfa      	ldrb	r2, [r7, #19]
 8000c42:	7abb      	ldrb	r3, [r7, #10]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d9ed      	bls.n	8000c24 <MemReadTable+0x1c>
    }
}
 8000c48:	bf00      	nop
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr

08000c52 <MyCAN_Init>:
#include "uartdma.h"
#include "Addresses.h"
extern UARTDMA_HandleTypeDef huartdma2;


void MyCAN_Init(MyCAN_CAN_HandleTypeDef* Myhcan,AddressLIST* AL ,  CAN_HandleTypeDef* hcan, CAN_FilterTypeDef* FilterConfig ,  CAN_TxHeaderTypeDef* TxHeader,  CAN_RxHeaderTypeDef* RxHeader){
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	603b      	str	r3, [r7, #0]

	Myhcan->hcan = hcan;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
	Myhcan->TxHeader = TxHeader;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	60da      	str	r2, [r3, #12]
	Myhcan->RxHeader = RxHeader;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	605a      	str	r2, [r3, #4]
	Myhcan->AL = AL;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	611a      	str	r2, [r3, #16]
	Myhcan->FilterConfig = FilterConfig;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	609a      	str	r2, [r3, #8]


	 FilterConfig->FilterBank = 13;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	220d      	movs	r2, #13
 8000c82:	615a      	str	r2, [r3, #20]
	  FilterConfig->FilterMode = CAN_FILTERMODE_IDMASK;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
	  FilterConfig->FilterScale = CAN_FILTERSCALE_16BIT;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
	  FilterConfig->FilterIdHigh = 0x0000;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
	  FilterConfig->FilterIdLow = 0x0000;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
	  FilterConfig->FilterMaskIdHigh = 0x0000;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
	  FilterConfig->FilterMaskIdLow = 0x0000;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
	  FilterConfig->FilterFIFOAssignment = CAN_RX_FIFO0;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
	  FilterConfig->FilterActivation = CAN_FILTER_ENABLE;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	621a      	str	r2, [r3, #32]


	  if (HAL_CAN_ConfigFilter(hcan, FilterConfig) != HAL_OK)
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f001 f953 	bl	8001f62 <HAL_CAN_ConfigFilter>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MyCAN_Init+0x74>
	  {

	    /* Filter configuration Error */
	    Error_Handler();
 8000cc2:	f000 fabd 	bl	8001240 <Error_Handler>
	  }



  /* Start the CAN peripheral */
  if (HAL_CAN_Start(hcan) != HAL_OK)
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f001 fa14 	bl	80020f4 <HAL_CAN_Start>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MyCAN_Init+0x84>
  {
    /* Start Error */
    Error_Handler();
 8000cd2:	f000 fab5 	bl	8001240 <Error_Handler>
  }

  /* Activate CAN RX notification */
  if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f001 fc6e 	bl	80025ba <HAL_CAN_ActivateNotification>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MyCAN_Init+0x96>
  {
    /* Notification Error */
    Error_Handler();
 8000ce4:	f000 faac 	bl	8001240 <Error_Handler>
  }

  TxHeader->StdId = AL->MEM[MEM_ID] + 64;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3340      	adds	r3, #64	; 0x40
 8000cee:	461a      	mov	r2, r3
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	601a      	str	r2, [r3, #0]
  TxHeader->ExtId = 0x00;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
  TxHeader->DLC = 8;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	611a      	str	r2, [r3, #16]
  TxHeader->RTR = CAN_RTR_DATA;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  TxHeader->IDE = CAN_ID_STD;
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  TxHeader->TransmitGlobalTime = DISABLE;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	751a      	strb	r2, [r3, #20]



}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <MyCAN_IrqHandler>:

void MyCAN_IrqHandler(MyCAN_CAN_HandleTypeDef* Myhcan){
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
	MyCAN_ReceiveMessage(Myhcan);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f86d 	bl	8000e02 <MyCAN_ReceiveMessage>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MyCAN_SendMessage>:

void MyCAN_SendMessage(MyCAN_CAN_HandleTypeDef* Myhcan, uint8_t Command, uint8_t Lenght, uint8_t Address, uint8_t *Data){
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	70fb      	strb	r3, [r7, #3]
 8000d42:	460b      	mov	r3, r1
 8000d44:	70bb      	strb	r3, [r7, #2]
 8000d46:	4613      	mov	r3, r2
 8000d48:	707b      	strb	r3, [r7, #1]

		while(HAL_CAN_GetTxMailboxesFreeLevel(Myhcan->hcan)){
 8000d4a:	e04e      	b.n	8000dea <MyCAN_SendMessage+0xba>
 8000d4c:	466b      	mov	r3, sp
 8000d4e:	461d      	mov	r5, r3

				Myhcan->TxHeader->DLC = (uint32_t)Lenght;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	78ba      	ldrb	r2, [r7, #2]
 8000d56:	611a      	str	r2, [r3, #16]
				uint8_t Tmp1[Lenght];
 8000d58:	78b8      	ldrb	r0, [r7, #2]
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	b2c1      	uxtb	r1, r0
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	f04f 0400 	mov.w	r4, #0
 8000d6e:	00d4      	lsls	r4, r2, #3
 8000d70:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d74:	00cb      	lsls	r3, r1, #3
 8000d76:	b2c1      	uxtb	r1, r0
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	f04f 0400 	mov.w	r4, #0
 8000d84:	00d4      	lsls	r4, r2, #3
 8000d86:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d8a:	00cb      	lsls	r3, r1, #3
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	3307      	adds	r3, #7
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	ebad 0d03 	sub.w	sp, sp, r3
 8000d98:	466b      	mov	r3, sp
 8000d9a:	3300      	adds	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
				 Tmp1[0] = Command;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	701a      	strb	r2, [r3, #0]
				 Tmp1[1] = Lenght;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	78ba      	ldrb	r2, [r7, #2]
 8000da8:	705a      	strb	r2, [r3, #1]
				 Tmp1[2] = Address;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	787a      	ldrb	r2, [r7, #1]
 8000dae:	709a      	strb	r2, [r3, #2]
				for(uint8_t cnt = 3; cnt <= (Lenght - 1); cnt++){
 8000db0:	2303      	movs	r3, #3
 8000db2:	75fb      	strb	r3, [r7, #23]
 8000db4:	e00a      	b.n	8000dcc <MyCAN_SendMessage+0x9c>
					Tmp1[cnt] = *Data;
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
 8000db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dba:	7811      	ldrb	r1, [r2, #0]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	54d1      	strb	r1, [r2, r3]
					Data++;
 8000dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
				for(uint8_t cnt = 3; cnt <= (Lenght - 1); cnt++){
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	75fb      	strb	r3, [r7, #23]
 8000dcc:	7dfa      	ldrb	r2, [r7, #23]
 8000dce:	78bb      	ldrb	r3, [r7, #2]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	ddef      	ble.n	8000db6 <MyCAN_SendMessage+0x86>
				}


				HAL_CAN_AddTxMessage(Myhcan->hcan, Myhcan->TxHeader, Tmp1, &(Myhcan->Mailbox));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68d9      	ldr	r1, [r3, #12]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3314      	adds	r3, #20
 8000de4:	f001 f9ca 	bl	800217c <HAL_CAN_AddTxMessage>
 8000de8:	46ad      	mov	sp, r5
		while(HAL_CAN_GetTxMailboxesFreeLevel(Myhcan->hcan)){
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fa9e 	bl	8002330 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1a8      	bne.n	8000d4c <MyCAN_SendMessage+0x1c>
		}

}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bdb0      	pop	{r4, r5, r7, pc}

08000e02 <MyCAN_ReceiveMessage>:

void MyCAN_ReceiveMessage(MyCAN_CAN_HandleTypeDef* Myhcan){
 8000e02:	b5b0      	push	{r4, r5, r7, lr}
 8000e04:	b08c      	sub	sp, #48	; 0x30
 8000e06:	af02      	add	r7, sp, #8
 8000e08:	6078      	str	r0, [r7, #4]

	uint8_t TmpBuffor[8];

		if(HAL_CAN_GetRxMessage(Myhcan->hcan, CAN_RX_FIFO0, Myhcan->RxHeader, TmpBuffor) == HAL_OK){
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	f107 030c 	add.w	r3, r7, #12
 8000e16:	2100      	movs	r1, #0
 8000e18:	f001 fabe 	bl	8002398 <HAL_CAN_GetRxMessage>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8097 	bne.w	8000f52 <MyCAN_ReceiveMessage+0x150>
 8000e24:	466b      	mov	r3, sp
 8000e26:	461d      	mov	r5, r3

			// \/ Lenght of Message without Command, Addresses and DLC
			uint8_t LenghtData = TmpBuffor[1] - 3;
 8000e28:	7b7b      	ldrb	r3, [r7, #13]
 8000e2a:	3b03      	subs	r3, #3
 8000e2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			uint8_t TmpToReceive[LenghtData];
 8000e30:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8000e34:	4603      	mov	r3, r0
 8000e36:	3b01      	subs	r3, #1
 8000e38:	623b      	str	r3, [r7, #32]
 8000e3a:	b2c1      	uxtb	r1, r0
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	f04f 0400 	mov.w	r4, #0
 8000e48:	00d4      	lsls	r4, r2, #3
 8000e4a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e4e:	00cb      	lsls	r3, r1, #3
 8000e50:	b2c1      	uxtb	r1, r0
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	f04f 0400 	mov.w	r4, #0
 8000e5e:	00d4      	lsls	r4, r2, #3
 8000e60:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e64:	00cb      	lsls	r3, r1, #3
 8000e66:	4603      	mov	r3, r0
 8000e68:	3307      	adds	r3, #7
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	ebad 0d03 	sub.w	sp, sp, r3
 8000e72:	ab02      	add	r3, sp, #8
 8000e74:	3300      	adds	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
			uint8_t TmpToSend[LenghtData];
 8000e78:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	b2c1      	uxtb	r1, r0
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	f04f 0400 	mov.w	r4, #0
 8000e90:	00d4      	lsls	r4, r2, #3
 8000e92:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e96:	00cb      	lsls	r3, r1, #3
 8000e98:	b2c1      	uxtb	r1, r0
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	f04f 0400 	mov.w	r4, #0
 8000ea6:	00d4      	lsls	r4, r2, #3
 8000ea8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000eac:	00cb      	lsls	r3, r1, #3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	ebad 0d03 	sub.w	sp, sp, r3
 8000eba:	ab02      	add	r3, sp, #8
 8000ebc:	3300      	adds	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]




			switch(Myhcan->RxHeader->StdId){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b42      	cmp	r3, #66	; 0x42
 8000ec8:	d000      	beq.n	8000ecc <MyCAN_ReceiveMessage+0xca>
				}
				break;

			default:

				break;
 8000eca:	e041      	b.n	8000f50 <MyCAN_ReceiveMessage+0x14e>
				if(TmpBuffor[0] == 1){
 8000ecc:	7b3b      	ldrb	r3, [r7, #12]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d129      	bne.n	8000f26 <MyCAN_ReceiveMessage+0x124>
					uint8_t anothercnt = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					for(uint8_t cnt = 3; cnt < TmpBuffor[1]; cnt++){
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ede:	e014      	b.n	8000f0a <MyCAN_ReceiveMessage+0x108>
						TmpToSend[anothercnt] = TmpBuffor[cnt];
 8000ee0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ee8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eec:	440a      	add	r2, r1
 8000eee:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	54d1      	strb	r1, [r2, r3]
						anothercnt++;
 8000ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000efa:	3301      	adds	r3, #1
 8000efc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					for(uint8_t cnt = 3; cnt < TmpBuffor[1]; cnt++){
 8000f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f04:	3301      	adds	r3, #1
 8000f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
 8000f0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d3e5      	bcc.n	8000ee0 <MyCAN_ReceiveMessage+0xde>
						MemWriteTable(Myhcan->AL,TmpBuffor[2], LenghtData, TmpToSend);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6918      	ldr	r0, [r3, #16]
 8000f18:	7bb9      	ldrb	r1, [r7, #14]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000f20:	f7ff fe4d 	bl	8000bbe <MemWriteTable>
				break;
 8000f24:	e013      	b.n	8000f4e <MyCAN_ReceiveMessage+0x14c>
				else if(TmpBuffor[0] == 2){
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d110      	bne.n	8000f4e <MyCAN_ReceiveMessage+0x14c>
						MemReadTable(Myhcan->AL, TmpBuffor[2], LenghtData,  TmpToReceive);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6918      	ldr	r0, [r3, #16]
 8000f30:	7bb9      	ldrb	r1, [r7, #14]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000f38:	f7ff fe66 	bl	8000c08 <MemReadTable>
						MyCAN_SendMessage(Myhcan, Command_Write, TmpBuffor[1], TmpBuffor[2], TmpToReceive);
 8000f3c:	7b7a      	ldrb	r2, [r7, #13]
 8000f3e:	7bb9      	ldrb	r1, [r7, #14]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	460b      	mov	r3, r1
 8000f46:	2101      	movs	r1, #1
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fef1 	bl	8000d30 <MyCAN_SendMessage>
				break;
 8000f4e:	bf00      	nop
 8000f50:	46ad      	mov	sp, r5
			}

		}

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f5c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f62:	4a18      	ldr	r2, [pc, #96]	; (8000fc4 <MX_CAN_Init+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f68:	220c      	movs	r2, #12
 8000f6a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f7a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f7e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f86:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_CAN_Init+0x64>)
 8000fae:	f000 fedd 	bl	8001d6c <HAL_CAN_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fb8:	f000 f942 	bl	8001240 <Error_Handler>
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000224 	.word	0x20000224
 8000fc4:	40006400 	.word	0x40006400

08000fc8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_CAN_MspInit+0x8c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d131      	bne.n	800104c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_CAN_MspInit+0x90>)
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_CAN_MspInit+0x90>)
 8000fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	61d3      	str	r3, [r2, #28]
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_CAN_MspInit+0x90>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_CAN_MspInit+0x90>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_CAN_MspInit+0x90>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_CAN_MspInit+0x90>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001018:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800101c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4619      	mov	r1, r3
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <HAL_CAN_MspInit+0x94>)
 800102e:	f002 f879 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_CAN_MspInit+0x94>)
 8001048:	f002 f86c 	bl	8003124 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800104c:	bf00      	nop
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40006400 	.word	0x40006400
 8001058:	40021000 	.word	0x40021000
 800105c:	40010800 	.word	0x40010800

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x48>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x48>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x48>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	2010      	movs	r0, #16
 8001084:	f001 fdb3 	bl	8002bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001088:	2010      	movs	r0, #16
 800108a:	f001 fdcc 	bl	8002c26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2011      	movs	r0, #17
 8001094:	f001 fdab 	bl	8002bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001098:	2011      	movs	r0, #17
 800109a:	f001 fdc4 	bl	8002c26 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_GPIO_Init+0x40>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <MX_GPIO_Init+0x40>)
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_GPIO_Init+0x40>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_GPIO_Init+0x40>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <MX_GPIO_Init+0x40>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <MX_GPIO_Init+0x40>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f6:	f000 fdd7 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fa:	f000 f839 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fe:	f7ff ffd5 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001102:	f7ff ffad 	bl	8001060 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001106:	f000 fce1 	bl	8001acc <MX_USART2_UART_Init>
  MX_CAN_Init();
 800110a:	f7ff ff27 	bl	8000f5c <MX_CAN_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800110e:	f000 f874 	bl	80011fa <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  MemTable_Init(&AL);
 8001112:	480f      	ldr	r0, [pc, #60]	; (8001150 <main+0x60>)
 8001114:	f7ff fd32 	bl	8000b7c <MemTable_Init>
  UARTDMA_Init(&huartdma2, &huart2);
 8001118:	490e      	ldr	r1, [pc, #56]	; (8001154 <main+0x64>)
 800111a:	480f      	ldr	r0, [pc, #60]	; (8001158 <main+0x68>)
 800111c:	f000 fc88 	bl	8001a30 <UARTDMA_Init>
  MyCAN_Init(&Myhcan,&AL, &hcan, &FilterConfig,  &TxHeader, &RxHeader);
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <main+0x6c>)
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <main+0x70>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <main+0x74>)
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <main+0x78>)
 800112c:	4908      	ldr	r1, [pc, #32]	; (8001150 <main+0x60>)
 800112e:	480f      	ldr	r0, [pc, #60]	; (800116c <main+0x7c>)
 8001130:	f7ff fd8f 	bl	8000c52 <MyCAN_Init>

	  //
	  // Received
	  //

	  if(UARTDMA_IsDataReceivedReady(&huartdma2)){
 8001134:	4808      	ldr	r0, [pc, #32]	; (8001158 <main+0x68>)
 8001136:	f000 fc31 	bl	800199c <UARTDMA_IsDataReceivedReady>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <main+0x56>
		  UART_ParseLine(&huartdma2);
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <main+0x68>)
 8001142:	f000 f9d1 	bl	80014e8 <UART_ParseLine>
	  //
	  // Transmit
	  //


	  UARTDMA_TransmitEvent(&huartdma2);
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <main+0x68>)
 8001148:	f000 fc39 	bl	80019be <UARTDMA_TransmitEvent>
	  if(UARTDMA_IsDataReceivedReady(&huartdma2)){
 800114c:	e7f2      	b.n	8001134 <main+0x44>
 800114e:	bf00      	nop
 8001150:	20000380 	.word	0x20000380
 8001154:	20000524 	.word	0x20000524
 8001158:	2000024c 	.word	0x2000024c
 800115c:	20000428 	.word	0x20000428
 8001160:	20000410 	.word	0x20000410
 8001164:	20000358 	.word	0x20000358
 8001168:	20000224 	.word	0x20000224
 800116c:	20000444 	.word	0x20000444

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b090      	sub	sp, #64	; 0x40
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	2228      	movs	r2, #40	; 0x28
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fa5e 	bl	8004640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001192:	2301      	movs	r3, #1
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a0:	2301      	movs	r3, #1
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 f90d 	bl	80033d8 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011c4:	f000 f83c 	bl	8001240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2101      	movs	r1, #1
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fb78 	bl	80038d8 <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011ee:	f000 f827 	bl	8001240 <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3740      	adds	r7, #64	; 0x40
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2026      	movs	r0, #38	; 0x26
 8001204:	f001 fcf3 	bl	8002bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001208:	2026      	movs	r0, #38	; 0x26
 800120a:	f001 fd0c 	bl	8002c26 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2014      	movs	r0, #20
 8001214:	f001 fceb 	bl	8002bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001218:	2014      	movs	r0, #20
 800121a:	f001 fd04 	bl	8002c26 <HAL_NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	MyCAN_ReceiveMessage(&Myhcan);
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 800122e:	f7ff fde8 	bl	8000e02 <MyCAN_ReceiveMessage>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000444 	.word	0x20000444

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001246:	e7fe      	b.n	8001246 <Error_Handler+0x6>

08001248 <UART_ParseLED>:
/*
 * 		LED=1\n 	// LED On
 * 		LED=0\n 	// LED Off
 */
void UART_ParseLED()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 800124e:	4919      	ldr	r1, [pc, #100]	; (80012b4 <UART_ParseLED+0x6c>)
 8001250:	2000      	movs	r0, #0
 8001252:	f004 fcab 	bl	8005bac <strtok>
 8001256:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d025      	beq.n	80012ac <UART_ParseLED+0x64>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b2f      	cmp	r3, #47	; 0x2f
 8001266:	d903      	bls.n	8001270 <UART_ParseLED+0x28>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b39      	cmp	r3, #57	; 0x39
 800126e:	d904      	bls.n	800127a <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma2, "LED wrong value. Don't use letters dude!\r\n"); // Print message
 8001270:	4911      	ldr	r1, [pc, #68]	; (80012b8 <UART_ParseLED+0x70>)
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <UART_ParseLED+0x74>)
 8001274:	f000 fb6d 	bl	8001952 <UARTDMA_Print>
			return;	// And exit parsing
 8001278:	e018      	b.n	80012ac <UART_ParseLED+0x64>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f003 f9b1 	bl	80045e2 <atoi>
 8001280:	4603      	mov	r3, r0
 8001282:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d104      	bne.n	8001294 <UART_ParseLED+0x4c>
		{
			//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			UARTDMA_Print(&huartdma2, "LED On\r\n");
 800128a:	490d      	ldr	r1, [pc, #52]	; (80012c0 <UART_ParseLED+0x78>)
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <UART_ParseLED+0x74>)
 800128e:	f000 fb60 	bl	8001952 <UARTDMA_Print>
 8001292:	e00b      	b.n	80012ac <UART_ParseLED+0x64>
		}
		else if(LedState == 0) // LED OFF
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d104      	bne.n	80012a4 <UART_ParseLED+0x5c>
		{
			//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			UARTDMA_Print(&huartdma2, "LED Off\r\n");
 800129a:	490a      	ldr	r1, [pc, #40]	; (80012c4 <UART_ParseLED+0x7c>)
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <UART_ParseLED+0x74>)
 800129e:	f000 fb58 	bl	8001952 <UARTDMA_Print>
 80012a2:	e003      	b.n	80012ac <UART_ParseLED+0x64>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma2, "LED wrong value. Use 0 or 1.\r\n");
 80012a4:	4908      	ldr	r1, [pc, #32]	; (80012c8 <UART_ParseLED+0x80>)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <UART_ParseLED+0x74>)
 80012a8:	f000 fb53 	bl	8001952 <UARTDMA_Print>
		}
	}
}
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	08007de8 	.word	0x08007de8
 80012b8:	08007dec 	.word	0x08007dec
 80012bc:	2000024c 	.word	0x2000024c
 80012c0:	08007e18 	.word	0x08007e18
 80012c4:	08007e24 	.word	0x08007e24
 80012c8:	08007e30 	.word	0x08007e30

080012cc <UART_ParseENV>:

/*
 * ENV=X,Y,Z\0 // X - temperature, Y - humidity, Z - pressure
 */
void UART_ParseENV()
{
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
	uint8_t i,j; // Iterators
	float EnvParameters[3]; // Temperature, humidity, pressure

	for(i = 0; i<3; i++) // 3 parameters are expected
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e078      	b.n	80013ca <UART_ParseENV+0xfe>
	{
		char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80012d8:	4957      	ldr	r1, [pc, #348]	; (8001438 <UART_ParseENV+0x16c>)
 80012da:	2000      	movs	r0, #0
 80012dc:	f004 fc66 	bl	8005bac <strtok>
 80012e0:	6138      	str	r0, [r7, #16]

		if(strlen(ParsePointer) > 0) // If string exists
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d04f      	beq.n	800138a <UART_ParseENV+0xbe>
		{
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 80012ea:	2300      	movs	r3, #0
 80012ec:	75bb      	strb	r3, [r7, #22]
 80012ee:	e045      	b.n	800137c <UART_ParseENV+0xb0>
			{
				if((ParsePointer[j] < '0' || ParsePointer[j] > '9') && ParsePointer[j] != '.' ) // Check if there are only numbers or dot sign
 80012f0:	7dbb      	ldrb	r3, [r7, #22]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b2f      	cmp	r3, #47	; 0x2f
 80012fa:	d905      	bls.n	8001308 <UART_ParseENV+0x3c>
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b39      	cmp	r3, #57	; 0x39
 8001306:	d925      	bls.n	8001354 <UART_ParseENV+0x88>
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b2e      	cmp	r3, #46	; 0x2e
 8001312:	d01f      	beq.n	8001354 <UART_ParseENV+0x88>
				{
					sprintf(Message, "ENV wrong value. Don't use letters dude!\r\n"); // If not, Error message
 8001314:	4b49      	ldr	r3, [pc, #292]	; (800143c <UART_ParseENV+0x170>)
 8001316:	4a4a      	ldr	r2, [pc, #296]	; (8001440 <UART_ParseENV+0x174>)
 8001318:	4614      	mov	r4, r2
 800131a:	469c      	mov	ip, r3
 800131c:	f104 0e20 	add.w	lr, r4, #32
 8001320:	4665      	mov	r5, ip
 8001322:	4626      	mov	r6, r4
 8001324:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001326:	6028      	str	r0, [r5, #0]
 8001328:	6069      	str	r1, [r5, #4]
 800132a:	60aa      	str	r2, [r5, #8]
 800132c:	60eb      	str	r3, [r5, #12]
 800132e:	3410      	adds	r4, #16
 8001330:	f10c 0c10 	add.w	ip, ip, #16
 8001334:	4574      	cmp	r4, lr
 8001336:	d1f3      	bne.n	8001320 <UART_ParseENV+0x54>
 8001338:	4662      	mov	r2, ip
 800133a:	4623      	mov	r3, r4
 800133c:	cb03      	ldmia	r3!, {r0, r1}
 800133e:	6010      	str	r0, [r2, #0]
 8001340:	6051      	str	r1, [r2, #4]
 8001342:	8819      	ldrh	r1, [r3, #0]
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	8111      	strh	r1, [r2, #8]
 8001348:	7293      	strb	r3, [r2, #10]
					UARTDMA_Print(&huartdma2, Message); // Print message
 800134a:	493c      	ldr	r1, [pc, #240]	; (800143c <UART_ParseENV+0x170>)
 800134c:	483d      	ldr	r0, [pc, #244]	; (8001444 <UART_ParseENV+0x178>)
 800134e:	f000 fb00 	bl	8001952 <UARTDMA_Print>
					return;	// And exit parsing
 8001352:	e06d      	b.n	8001430 <UART_ParseENV+0x164>
				}

				EnvParameters[i] = atof(ParsePointer); // If there are no chars, change string to integer
 8001354:	6938      	ldr	r0, [r7, #16]
 8001356:	f003 f941 	bl	80045dc <atof>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	7dfc      	ldrb	r4, [r7, #23]
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fbba 	bl	8000adc <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	00a3      	lsls	r3, r4, #2
 800136c:	f107 0118 	add.w	r1, r7, #24
 8001370:	440b      	add	r3, r1
 8001372:	f843 2c14 	str.w	r2, [r3, #-20]
			for(j=0; ParsePointer[j] != 0; j++) // Loop over all chars in current strong-block
 8001376:	7dbb      	ldrb	r3, [r7, #22]
 8001378:	3301      	adds	r3, #1
 800137a:	75bb      	strb	r3, [r7, #22]
 800137c:	7dbb      	ldrb	r3, [r7, #22]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1b3      	bne.n	80012f0 <UART_ParseENV+0x24>
 8001388:	e01c      	b.n	80013c4 <UART_ParseENV+0xf8>
			}
		}
		else
		{
			sprintf(Message, "ENV too less values. ENV=X,Y,Z\\n\r\n"); // If not, Error message
 800138a:	4b2c      	ldr	r3, [pc, #176]	; (800143c <UART_ParseENV+0x170>)
 800138c:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <UART_ParseENV+0x17c>)
 800138e:	4614      	mov	r4, r2
 8001390:	469c      	mov	ip, r3
 8001392:	f104 0e20 	add.w	lr, r4, #32
 8001396:	4665      	mov	r5, ip
 8001398:	4626      	mov	r6, r4
 800139a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800139c:	6028      	str	r0, [r5, #0]
 800139e:	6069      	str	r1, [r5, #4]
 80013a0:	60aa      	str	r2, [r5, #8]
 80013a2:	60eb      	str	r3, [r5, #12]
 80013a4:	3410      	adds	r4, #16
 80013a6:	f10c 0c10 	add.w	ip, ip, #16
 80013aa:	4574      	cmp	r4, lr
 80013ac:	d1f3      	bne.n	8001396 <UART_ParseENV+0xca>
 80013ae:	4663      	mov	r3, ip
 80013b0:	4622      	mov	r2, r4
 80013b2:	8811      	ldrh	r1, [r2, #0]
 80013b4:	7892      	ldrb	r2, [r2, #2]
 80013b6:	8019      	strh	r1, [r3, #0]
 80013b8:	709a      	strb	r2, [r3, #2]
			UARTDMA_Print(&huartdma2, Message); // Print message
 80013ba:	4920      	ldr	r1, [pc, #128]	; (800143c <UART_ParseENV+0x170>)
 80013bc:	4821      	ldr	r0, [pc, #132]	; (8001444 <UART_ParseENV+0x178>)
 80013be:	f000 fac8 	bl	8001952 <UARTDMA_Print>
			return;	// And exit parsing
 80013c2:	e035      	b.n	8001430 <UART_ParseENV+0x164>
	for(i = 0; i<3; i++) // 3 parameters are expected
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	3301      	adds	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d983      	bls.n	80012d8 <UART_ParseENV+0xc>
		}
	}

	// Print back received data
	sprintf(Message, "Temperature: %.1f\r\n", EnvParameters[0]);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f832 	bl	800043c <__aeabi_f2d>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	491a      	ldr	r1, [pc, #104]	; (800144c <UART_ParseENV+0x180>)
 80013e2:	4816      	ldr	r0, [pc, #88]	; (800143c <UART_ParseENV+0x170>)
 80013e4:	f003 fd84 	bl	8004ef0 <siprintf>
	UARTDMA_Print(&huartdma2, Message);
 80013e8:	4914      	ldr	r1, [pc, #80]	; (800143c <UART_ParseENV+0x170>)
 80013ea:	4816      	ldr	r0, [pc, #88]	; (8001444 <UART_ParseENV+0x178>)
 80013ec:	f000 fab1 	bl	8001952 <UARTDMA_Print>

	sprintf(Message, "Humidity: %.1f\r\n", EnvParameters[1]);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f822 	bl	800043c <__aeabi_f2d>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	461a      	mov	r2, r3
 80013fe:	4623      	mov	r3, r4
 8001400:	4913      	ldr	r1, [pc, #76]	; (8001450 <UART_ParseENV+0x184>)
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <UART_ParseENV+0x170>)
 8001404:	f003 fd74 	bl	8004ef0 <siprintf>
	UARTDMA_Print(&huartdma2, Message);
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <UART_ParseENV+0x170>)
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <UART_ParseENV+0x178>)
 800140c:	f000 faa1 	bl	8001952 <UARTDMA_Print>

	sprintf(Message, "Pressure: %.1f\r\n", EnvParameters[2]);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f812 	bl	800043c <__aeabi_f2d>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	461a      	mov	r2, r3
 800141e:	4623      	mov	r3, r4
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <UART_ParseENV+0x188>)
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <UART_ParseENV+0x170>)
 8001424:	f003 fd64 	bl	8004ef0 <siprintf>
	UARTDMA_Print(&huartdma2, Message);
 8001428:	4904      	ldr	r1, [pc, #16]	; (800143c <UART_ParseENV+0x170>)
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <UART_ParseENV+0x178>)
 800142c:	f000 fa91 	bl	8001952 <UARTDMA_Print>
}
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	bf00      	nop
 8001438:	08007de8 	.word	0x08007de8
 800143c:	2000045c 	.word	0x2000045c
 8001440:	08007e50 	.word	0x08007e50
 8001444:	2000024c 	.word	0x2000024c
 8001448:	08007e7c 	.word	0x08007e7c
 800144c:	08007ea0 	.word	0x08007ea0
 8001450:	08007eb4 	.word	0x08007eb4
 8001454:	08007ec8 	.word	0x08007ec8

08001458 <UART_ParseNAME>:
/*
 * 		NAME=X\n	// Change name for X
 * 		NAME=?\n	// introduce yourself
 */
void UART_ParseNAME()
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	char* ParsePointer = strtok(NULL, ","); // Get next string till token ',' or \0
 800145e:	491a      	ldr	r1, [pc, #104]	; (80014c8 <UART_ParseNAME+0x70>)
 8001460:	2000      	movs	r0, #0
 8001462:	f004 fba3 	bl	8005bac <strtok>
 8001466:	6078      	str	r0, [r7, #4]

	if(strlen(ParsePointer) > 0) // If string exists
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d016      	beq.n	800149e <UART_ParseNAME+0x46>
	{
		if(strcmp(ParsePointer, "?") == 0) // If '?' is behind '='
 8001470:	4916      	ldr	r1, [pc, #88]	; (80014cc <UART_ParseNAME+0x74>)
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7fe fe6c 	bl	8000150 <strcmp>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <UART_ParseNAME+0x32>
		{
			sprintf(Message, "My name is %s\r\n", MyName); // Introduce yourself
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <UART_ParseNAME+0x78>)
 8001480:	4914      	ldr	r1, [pc, #80]	; (80014d4 <UART_ParseNAME+0x7c>)
 8001482:	4815      	ldr	r0, [pc, #84]	; (80014d8 <UART_ParseNAME+0x80>)
 8001484:	f003 fd34 	bl	8004ef0 <siprintf>
 8001488:	e015      	b.n	80014b6 <UART_ParseNAME+0x5e>
		}
		else
		{
			strcpy(MyName, ParsePointer); // Change name for string passed in received message
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <UART_ParseNAME+0x78>)
 800148e:	f003 fd4f 	bl	8004f30 <strcpy>
			sprintf(Message, "Name changed to %s\r\n", MyName);
 8001492:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <UART_ParseNAME+0x78>)
 8001494:	4911      	ldr	r1, [pc, #68]	; (80014dc <UART_ParseNAME+0x84>)
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <UART_ParseNAME+0x80>)
 8001498:	f003 fd2a 	bl	8004ef0 <siprintf>
 800149c:	e00b      	b.n	80014b6 <UART_ParseNAME+0x5e>
		}
	}
	else
	{
		// Error
		sprintf(Message, "Name cannot be empty!\r\n");
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <UART_ParseNAME+0x80>)
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <UART_ParseNAME+0x88>)
 80014a2:	4615      	mov	r5, r2
 80014a4:	461c      	mov	r4, r3
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	6028      	str	r0, [r5, #0]
 80014aa:	6069      	str	r1, [r5, #4]
 80014ac:	60aa      	str	r2, [r5, #8]
 80014ae:	60eb      	str	r3, [r5, #12]
 80014b0:	cc03      	ldmia	r4!, {r0, r1}
 80014b2:	6128      	str	r0, [r5, #16]
 80014b4:	6169      	str	r1, [r5, #20]
	}

	// Send back a message
	UARTDMA_Print(&huartdma2, Message);
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <UART_ParseNAME+0x80>)
 80014b8:	480a      	ldr	r0, [pc, #40]	; (80014e4 <UART_ParseNAME+0x8c>)
 80014ba:	f000 fa4a 	bl	8001952 <UARTDMA_Print>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bdb0      	pop	{r4, r5, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	08007de8 	.word	0x08007de8
 80014cc:	08007edc 	.word	0x08007edc
 80014d0:	20000000 	.word	0x20000000
 80014d4:	08007ee0 	.word	0x08007ee0
 80014d8:	2000045c 	.word	0x2000045c
 80014dc:	08007ef0 	.word	0x08007ef0
 80014e0:	08007f08 	.word	0x08007f08
 80014e4:	2000024c 	.word	0x2000024c

080014e8 <UART_ParseLine>:
 * 		ENV=X,Y,Z\n // X - temperature, Y - humidity, Z - pressure
 * 		NAME=X\n	// Change name for X
 * 		NAME=?\n	// introduce yourself
 */
void UART_ParseLine(UARTDMA_HandleTypeDef *huartdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	; 0x50
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	char BufferReceive[64];

	if(!UARTDMA_GetLineFromReceiveBuffer(huartdma, BufferReceive))
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f9fa 	bl	80018f0 <UARTDMA_GetLineFromReceiveBuffer>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d123      	bne.n	800154a <UART_ParseLine+0x62>
	{
		// Header
		char* ParsePointer = strtok(BufferReceive, "="); // LED\0   1\0
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4913      	ldr	r1, [pc, #76]	; (8001554 <UART_ParseLine+0x6c>)
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fb4f 	bl	8005bac <strtok>
 800150e:	64f8      	str	r0, [r7, #76]	; 0x4c
		// ParsePointer == LED\0

	  if(strcmp(ParsePointer, "LED") == 0)
 8001510:	4911      	ldr	r1, [pc, #68]	; (8001558 <UART_ParseLine+0x70>)
 8001512:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001514:	f7fe fe1c 	bl	8000150 <strcmp>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <UART_ParseLine+0x3c>
	  {
		  UART_ParseLED();
 800151e:	f7ff fe93 	bl	8001248 <UART_ParseLED>
	  {
		  UART_ParseNAME();
	  }

	}
}
 8001522:	e012      	b.n	800154a <UART_ParseLine+0x62>
	  else if(strcmp(ParsePointer, "ENV") == 0)
 8001524:	490d      	ldr	r1, [pc, #52]	; (800155c <UART_ParseLine+0x74>)
 8001526:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001528:	f7fe fe12 	bl	8000150 <strcmp>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <UART_ParseLine+0x50>
		  UART_ParseENV();
 8001532:	f7ff fecb 	bl	80012cc <UART_ParseENV>
}
 8001536:	e008      	b.n	800154a <UART_ParseLine+0x62>
	  else if(strcmp(ParsePointer, "NAME") == 0)
 8001538:	4909      	ldr	r1, [pc, #36]	; (8001560 <UART_ParseLine+0x78>)
 800153a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800153c:	f7fe fe08 	bl	8000150 <strcmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <UART_ParseLine+0x62>
		  UART_ParseNAME();
 8001546:	f7ff ff87 	bl	8001458 <UART_ParseNAME>
}
 800154a:	bf00      	nop
 800154c:	3750      	adds	r7, #80	; 0x50
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	08007f20 	.word	0x08007f20
 8001558:	08007f24 	.word	0x08007f24
 800155c:	08007f28 	.word	0x08007f28
 8001560:	08007f2c 	.word	0x08007f2c

08001564 <Rb_Read>:
 */
#include "main.h"
#include "ring_buffer.h"


Rb_Status Rb_Read(RingBuffer *rb, uint8_t *Value){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]

	if(rb->Head == rb->Tail){
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	429a      	cmp	r2, r3
 8001578:	d101      	bne.n	800157e <Rb_Read+0x1a>

		return Rb_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e015      	b.n	80015aa <Rb_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	789a      	ldrb	r2, [r3, #2]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	785b      	ldrb	r3, [r3, #1]
 8001592:	3301      	adds	r3, #1
 8001594:	425a      	negs	r2, r3
 8001596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800159a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800159e:	bf58      	it	pl
 80015a0:	4253      	negpl	r3, r2
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	705a      	strb	r2, [r3, #1]

	return Rb_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <Rb_Write>:

Rb_Status Rb_Write(RingBuffer *rb, uint8_t Value){
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]

	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	425a      	negs	r2, r3
 80015c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80015d0:	bf58      	it	pl
 80015d2:	4253      	negpl	r3, r2
 80015d4:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail){
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d101      	bne.n	80015e4 <Rb_Write+0x30>
		return Rb_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e00a      	b.n	80015fa <Rb_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	701a      	strb	r2, [r3, #0]

	return Rb_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <HAL_MspInit+0x5c>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_MspInit+0x5c>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_MspInit+0x5c>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_MspInit+0x5c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_MspInit+0x5c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_MspInit+0x5c>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_MspInit+0x60>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_MspInit+0x60>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ae:	f000 fb41 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma2);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Channel6_IRQHandler+0x10>)
 80016be:	f000 f892 	bl	80017e6 <UARTDMA_DmaReceiveIrqHandler>
	return;
 80016c2:	bf00      	nop
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000024c 	.word	0x2000024c

080016cc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <DMA1_Channel7_IRQHandler+0x10>)
 80016d2:	f001 fbf3 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200004e0 	.word	0x200004e0

080016e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	MyCAN_IrqHandler(&Myhcan);
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80016e6:	f7ff fb18 	bl	8000d1a <MyCAN_IrqHandler>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80016ea:	4803      	ldr	r0, [pc, #12]	; (80016f8 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 80016ec:	f000 ff8a 	bl	8002604 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000444 	.word	0x20000444
 80016f8:	20000224 	.word	0x20000224

080016fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma2);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <USART2_IRQHandler+0x14>)
 8001702:	f000 f845 	bl	8001790 <UARTDMA_UartIrqHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <USART2_IRQHandler+0x18>)
 8001708:	f002 fbbc 	bl	8003e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	2000024c 	.word	0x2000024c
 8001714:	20000524 	.word	0x20000524

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f002 ff50 	bl	80045ec <__errno>
 800174c:	4602      	mov	r2, r0
 800174e:	230c      	movs	r3, #12
 8001750:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20005000 	.word	0x20005000
 8001778:	00000400 	.word	0x00000400
 800177c:	20000218 	.word	0x20000218
 8001780:	20000570 	.word	0x20000570

08001784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01a      	beq.n	80017de <UARTDMA_UartIrqHandler+0x4e>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	60fb      	str	r3, [r7, #12]

		UARTDMA_DmaReceiveIrqHandler(huartdma);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f804 	bl	80017e6 <UARTDMA_DmaReceiveIrqHandler>
	}
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f6:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d157      	bne.n	80018ba <UARTDMA_DmaReceiveIrqHandler+0xd4>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF7 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001816:	409a      	lsls	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	605a      	str	r2, [r3, #4]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	b29b      	uxth	r3, r3
 8001828:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800182c:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 8001834:	2300      	movs	r3, #0
 8001836:	82fb      	strh	r3, [r7, #22]
 8001838:	e01a      	b.n	8001870 <UARTDMA_DmaReceiveIrqHandler+0x8a>
		{
			Rb_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4413      	add	r3, r2
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff feb3 	bl	80015b4 <Rb_Write>

			if(DmaBufferPointer[i] == '\n')
 800184e:	8afb      	ldrh	r3, [r7, #22]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b0a      	cmp	r3, #10
 8001858:	d107      	bne.n	800186a <UARTDMA_DmaReceiveIrqHandler+0x84>
			{
				huartdma->UartRxBufferLines++;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001860:	3301      	adds	r3, #1
 8001862:	b2da      	uxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800186a:	8afb      	ldrh	r3, [r7, #22]
 800186c:	3301      	adds	r3, #1
 800186e:	82fb      	strh	r3, [r7, #22]
 8001870:	8afa      	ldrh	r2, [r7, #22]
 8001872:	89fb      	ldrh	r3, [r7, #14]
 8001874:	429a      	cmp	r2, r3
 8001876:	d3e0      	bcc.n	800183a <UARTDMA_DmaReceiveIrqHandler+0x54>
			}
		}

		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	220f      	movs	r2, #15
 8001882:	409a      	lsls	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1d1a      	adds	r2, r3, #4
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60da      	str	r2, [r3, #12]
		huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;            	// Start DMA transfer
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0201 	orr.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
	}
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandleTypeDef *huartdma, char c)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	70fb      	strb	r3, [r7, #3]

	if(Rb_OK != Rb_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	33c7      	adds	r3, #199	; 0xc7
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fe6c 	bl	80015b4 <Rb_Write>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <UARTDMA_GetLineFromReceiveBuffer>:

//
// Get complete line (end with \n) from UART buffer
//
uint8_t UARTDMA_GetLineFromReceiveBuffer(UARTDMA_HandleTypeDef *huartdma, char *OutBuffer)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
	char *OuRbufferPtr; // Helper pointer

	OuRbufferPtr = OutBuffer; // Set helper pointer
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
	if(huartdma->UartRxBufferLines) // If there id something to read
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001904:	2b00      	cmp	r3, #0
 8001906:	d01f      	beq.n	8001948 <UARTDMA_GetLineFromReceiveBuffer+0x58>
	{
		while(Rb_OK == Rb_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OuRbufferPtr)) // Get from Ring Buffer till end
 8001908:	e013      	b.n	8001932 <UARTDMA_GetLineFromReceiveBuffer+0x42>
		{
			if(*OuRbufferPtr == '\n') // If end line byte hit
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b0a      	cmp	r3, #10
 8001910:	d10c      	bne.n	800192c <UARTDMA_GetLineFromReceiveBuffer+0x3c>
			{
				*OuRbufferPtr = 0; // Change it to end cstring '\0' byte
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
				huartdma->UartRxBufferLines--; // Decrease received lines counter
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800191e:	3b01      	subs	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
				return 0; // Exit if end line
 8001928:	2300      	movs	r3, #0
 800192a:	e00e      	b.n	800194a <UARTDMA_GetLineFromReceiveBuffer+0x5a>
			}

			OuRbufferPtr++; // Increase pointer
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
		while(Rb_OK == Rb_Read(&huartdma->UART_RX_Buffer, (uint8_t*)OuRbufferPtr)) // Get from Ring Buffer till end
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3344      	adds	r3, #68	; 0x44
 8001936:	68f9      	ldr	r1, [r7, #12]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe13 	bl	8001564 <Rb_Read>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0e2      	beq.n	800190a <UARTDMA_GetLineFromReceiveBuffer+0x1a>
		}
		return 0; // Return o error (but no full line... place for improovement)
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <UARTDMA_GetLineFromReceiveBuffer+0x5a>
	}
	return 1; // Return an error
 8001948:	2301      	movs	r3, #1
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandleTypeDef *huartdma, char *Message)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8001960:	e012      	b.n	8001988 <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8001962:	7afb      	ldrb	r3, [r7, #11]
 8001964:	4619      	mov	r1, r3
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffab 	bl	80018c2 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3301      	adds	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	2b0a      	cmp	r3, #10
 8001976:	d107      	bne.n	8001988 <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 800197e:	3301      	adds	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	72fb      	strb	r3, [r7, #11]
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e6      	bne.n	8001962 <UARTDMA_Print+0x10>
		}
	}
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <UARTDMA_IsDataReceivedReady>:
//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandleTypeDef *huartdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandleTypeDef *huartdma)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b084      	sub	sp, #16
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 80019c6:	2300      	movs	r3, #0
 80019c8:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d027      	beq.n	8001a28 <UARTDMA_TransmitEvent+0x6a>
	{
		while(Rb_OK == Rb_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80019d8:	e013      	b.n	8001a02 <UARTDMA_TransmitEvent+0x44>
		{
			if(CharToSend == '\n') // Check end line byte
 80019da:	7b7b      	ldrb	r3, [r7, #13]
 80019dc:	2b0a      	cmp	r3, #10
 80019de:	d107      	bne.n	80019f0 <UARTDMA_TransmitEvent+0x32>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	81fa      	strh	r2, [r7, #14]
 80019f6:	4619      	mov	r1, r3
 80019f8:	7b7a      	ldrb	r2, [r7, #13]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	440b      	add	r3, r1
 80019fe:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		while(Rb_OK == Rb_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	33c7      	adds	r3, #199	; 0xc7
 8001a06:	f107 020d 	add.w	r2, r7, #13
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fda9 	bl	8001564 <Rb_Read>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0e0      	beq.n	80019da <UARTDMA_TransmitEvent+0x1c>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3387      	adds	r3, #135	; 0x87
 8001a20:	89fa      	ldrh	r2, [r7, #14]
 8001a22:	4619      	mov	r1, r3
 8001a24:	f002 f942 	bl	8003cac <HAL_UART_Transmit_DMA>
	}
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0210 	orr.w	r2, r2, #16
 8001a52:	60da      	str	r2, [r3, #12]
	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0202 	orr.w	r2, r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0202 	orr.w	r2, r2, #2
 8001a82:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	2240      	movs	r2, #64	; 0x40
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f002 f978 	bl	8003d84 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0204 	bic.w	r2, r2, #4
 8001aaa:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_USART2_UART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART2_UART_Init+0x4c>)
 8001b04:	f002 f884 	bl	8003c10 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b0e:	f7ff fb97 	bl	8001240 <Error_Handler>
  }

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000524 	.word	0x20000524
 8001b1c:	40004400 	.word	0x40004400

08001b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a41      	ldr	r2, [pc, #260]	; (8001c40 <HAL_UART_MspInit+0x120>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d17b      	bne.n	8001c38 <HAL_UART_MspInit+0x118>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b40:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <HAL_UART_MspInit+0x124>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <HAL_UART_MspInit+0x124>)
 8001b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4a:	61d3      	str	r3, [r2, #28]
 8001b4c:	4b3d      	ldr	r3, [pc, #244]	; (8001c44 <HAL_UART_MspInit+0x124>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <HAL_UART_MspInit+0x124>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a39      	ldr	r2, [pc, #228]	; (8001c44 <HAL_UART_MspInit+0x124>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_UART_MspInit+0x124>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b70:	2304      	movs	r3, #4
 8001b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	4831      	ldr	r0, [pc, #196]	; (8001c48 <HAL_UART_MspInit+0x128>)
 8001b84:	f001 face 	bl	8003124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482b      	ldr	r0, [pc, #172]	; (8001c48 <HAL_UART_MspInit+0x128>)
 8001b9c:	f001 fac2 	bl	8003124 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_UART_MspInit+0x130>)
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba6:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001bd0:	481e      	ldr	r0, [pc, #120]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001bd2:	f001 f843 	bl	8002c5c <HAL_DMA_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001bdc:	f7ff fb30 	bl	8001240 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <HAL_UART_MspInit+0x12c>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001bee:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_UART_MspInit+0x138>)
 8001bf0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c1e:	f001 f81d 	bl	8002c5c <HAL_DMA_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001c28:	f7ff fb0a 	bl	8001240 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_UART_MspInit+0x134>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40004400 	.word	0x40004400
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	2000049c 	.word	0x2000049c
 8001c50:	4002006c 	.word	0x4002006c
 8001c54:	200004e0 	.word	0x200004e0
 8001c58:	40020080 	.word	0x40020080

08001c5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c5e:	e003      	b.n	8001c68 <LoopCopyDataInit>

08001c60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c66:	3104      	adds	r1, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c68:	480a      	ldr	r0, [pc, #40]	; (8001c94 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c70:	d3f6      	bcc.n	8001c60 <CopyDataInit>
  ldr r2, =_sbss
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c74:	e002      	b.n	8001c7c <LoopFillZerobss>

08001c76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c78:	f842 3b04 	str.w	r3, [r2], #4

08001c7c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c80:	d3f9      	bcc.n	8001c76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c82:	f7ff fd7f 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c86:	f002 fcb7 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c8a:	f7ff fa31 	bl	80010f0 <main>
  bx lr
 8001c8e:	4770      	bx	lr
  ldr r3, =_sidata
 8001c90:	08008218 	.word	0x08008218
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c98:	200001fc 	.word	0x200001fc
  ldr r2, =_sbss
 8001c9c:	200001fc 	.word	0x200001fc
  ldr r3, = _ebss
 8001ca0:	2000056c 	.word	0x2000056c

08001ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC1_2_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_Init+0x28>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_Init+0x28>)
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 ff8d 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f000 f808 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc4:	f7ff fc9e 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x54>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x58>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 ffa5 	bl	8002c42 <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00e      	b.n	8001d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d80a      	bhi.n	8001d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f000 ff6d 	bl	8002bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d14:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_InitTick+0x5c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000020 	.word	0x20000020
 8001d2c:	20000028 	.word	0x20000028
 8001d30:	20000024 	.word	0x20000024

08001d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x1c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x20>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_IncTick+0x20>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000028 	.word	0x20000028
 8001d54:	20000564 	.word	0x20000564

08001d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <HAL_GetTick+0x10>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000564 	.word	0x20000564

08001d6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0ed      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff f91c 	bl	8000fc8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0202 	bic.w	r2, r2, #2
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da0:	f7ff ffda 	bl	8001d58 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da6:	e012      	b.n	8001dce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da8:	f7ff ffd6 	bl	8001d58 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	d90b      	bls.n	8001dce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0c5      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e5      	bne.n	8001da8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dec:	f7ff ffb4 	bl	8001d58 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001df2:	e012      	b.n	8001e1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df4:	f7ff ffb0 	bl	8001d58 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d90b      	bls.n	8001e1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2205      	movs	r2, #5
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e09f      	b.n	8001f5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0e5      	beq.n	8001df4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e1b      	ldrb	r3, [r3, #24]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7e5b      	ldrb	r3, [r3, #25]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7e9b      	ldrb	r3, [r3, #26]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0220 	orr.w	r2, r2, #32
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0220 	bic.w	r2, r2, #32
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7edb      	ldrb	r3, [r3, #27]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0210 	bic.w	r2, r2, #16
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0210 	orr.w	r2, r2, #16
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7f1b      	ldrb	r3, [r3, #28]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e007      	b.n	8001efa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0208 	bic.w	r2, r2, #8
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7f5b      	ldrb	r3, [r3, #29]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0204 	orr.w	r2, r2, #4
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0204 	bic.w	r2, r2, #4
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	ea42 0103 	orr.w	r1, r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b087      	sub	sp, #28
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d003      	beq.n	8001f88 <HAL_CAN_ConfigFilter+0x26>
 8001f80:	7cfb      	ldrb	r3, [r7, #19]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	f040 80aa 	bne.w	80020dc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d123      	bne.n	800200a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	401a      	ands	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001fe4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3248      	adds	r2, #72	; 0x48
 8001fea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ffe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002000:	6979      	ldr	r1, [r7, #20]
 8002002:	3348      	adds	r3, #72	; 0x48
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	440b      	add	r3, r1
 8002008:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d122      	bne.n	8002058 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	431a      	orrs	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002032:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3248      	adds	r2, #72	; 0x48
 8002038:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800204c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	3348      	adds	r3, #72	; 0x48
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d109      	bne.n	8002074 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002072:	e007      	b.n	8002084 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d109      	bne.n	80020a0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800209e:	e007      	b.n	80020b0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ce:	f023 0201 	bic.w	r2, r3, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	e006      	b.n	80020ea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
  }
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	371c      	adds	r7, #28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d12e      	bne.n	8002166 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002120:	f7ff fe1a 	bl	8001d58 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002126:	e012      	b.n	800214e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002128:	f7ff fe16 	bl	8001d58 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b0a      	cmp	r3, #10
 8002134:	d90b      	bls.n	800214e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2205      	movs	r2, #5
 8002146:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e012      	b.n	8002174 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e5      	bne.n	8002128 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	e006      	b.n	8002174 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
  }
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800219a:	7ffb      	ldrb	r3, [r7, #31]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d003      	beq.n	80021a8 <HAL_CAN_AddTxMessage+0x2c>
 80021a0:	7ffb      	ldrb	r3, [r7, #31]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	f040 80b8 	bne.w	8002318 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80a0 	beq.w	8002308 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	0e1b      	lsrs	r3, r3, #24
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d907      	bls.n	80021e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e09e      	b.n	8002326 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021e8:	2201      	movs	r2, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	409a      	lsls	r2, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	6809      	ldr	r1, [r1, #0]
 8002208:	431a      	orrs	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3318      	adds	r3, #24
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	440b      	add	r3, r1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e00f      	b.n	8002236 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002220:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800222a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3318      	adds	r3, #24
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3318      	adds	r3, #24
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	440b      	add	r3, r1
 8002246:	3304      	adds	r3, #4
 8002248:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	7d1b      	ldrb	r3, [r3, #20]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d111      	bne.n	8002276 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3318      	adds	r3, #24
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	6811      	ldr	r1, [r2, #0]
 8002266:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3318      	adds	r3, #24
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	440b      	add	r3, r1
 8002272:	3304      	adds	r3, #4
 8002274:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3307      	adds	r3, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	061a      	lsls	r2, r3, #24
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3306      	adds	r3, #6
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3305      	adds	r3, #5
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	4313      	orrs	r3, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	3204      	adds	r2, #4
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	4610      	mov	r0, r2
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	ea43 0200 	orr.w	r2, r3, r0
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	440b      	add	r3, r1
 80022a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3303      	adds	r3, #3
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	061a      	lsls	r2, r3, #24
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3302      	adds	r3, #2
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3301      	adds	r3, #1
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	4313      	orrs	r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	4610      	mov	r0, r2
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	6811      	ldr	r1, [r2, #0]
 80022d4:	ea43 0200 	orr.w	r2, r3, r0
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	440b      	add	r3, r1
 80022de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3318      	adds	r3, #24
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	4413      	add	r3, r2
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	6811      	ldr	r1, [r2, #0]
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3318      	adds	r3, #24
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	440b      	add	r3, r1
 8002302:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	e00e      	b.n	8002326 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e006      	b.n	8002326 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3724      	adds	r7, #36	; 0x24
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002342:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d002      	beq.n	8002350 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800234a:	7afb      	ldrb	r3, [r7, #11]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d11d      	bne.n	800238c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3301      	adds	r3, #1
 8002362:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3301      	adds	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3301      	adds	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800238c:	68fb      	ldr	r3, [r7, #12]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d003      	beq.n	80023bc <HAL_CAN_GetRxMessage+0x24>
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	f040 80f3 	bne.w	80025a2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10e      	bne.n	80023e0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d116      	bne.n	80023fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0e7      	b.n	80025b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d107      	bne.n	80023fe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0d8      	b.n	80025b0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	331b      	adds	r3, #27
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0204 	and.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	331b      	adds	r3, #27
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0d5b      	lsrs	r3, r3, #21
 800242c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e00b      	b.n	800244e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	331b      	adds	r3, #27
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	4413      	add	r3, r2
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	331b      	adds	r3, #27
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0202 	and.w	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	331b      	adds	r3, #27
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	3304      	adds	r3, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	331b      	adds	r3, #27
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	b2da      	uxtb	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	331b      	adds	r3, #27
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0a1a      	lsrs	r2, r3, #8
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0c1a      	lsrs	r2, r3, #16
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3302      	adds	r3, #2
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	4413      	add	r3, r2
 8002500:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0e1a      	lsrs	r2, r3, #24
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3303      	adds	r3, #3
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	4413      	add	r3, r2
 800251a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	3304      	adds	r3, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	4413      	add	r3, r2
 8002532:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0a1a      	lsrs	r2, r3, #8
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3305      	adds	r3, #5
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0c1a      	lsrs	r2, r3, #16
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3306      	adds	r3, #6
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	4413      	add	r3, r2
 8002566:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e1a      	lsrs	r2, r3, #24
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3307      	adds	r3, #7
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	e007      	b.n	800259e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0220 	orr.w	r2, r2, #32
 800259c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e006      	b.n	80025b0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
  }
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d002      	beq.n	80025d8 <HAL_CAN_ActivateNotification+0x1e>
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d109      	bne.n	80025ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6959      	ldr	r1, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e006      	b.n	80025fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
  }
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d07c      	beq.n	8002744 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d023      	beq.n	800269c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f97d 	bl	8002966 <HAL_CAN_TxMailbox0CompleteCallback>
 800266c:	e016      	b.n	800269c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	e00c      	b.n	800269c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
 8002694:	e002      	b.n	800269c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f980 	bl	800299c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d024      	beq.n	80026f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f95c 	bl	8002978 <HAL_CAN_TxMailbox1CompleteCallback>
 80026c0:	e016      	b.n	80026f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
 80026d4:	e00c      	b.n	80026f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
 80026e8:	e002      	b.n	80026f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f95f 	bl	80029ae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002702:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f93b 	bl	800298a <HAL_CAN_TxMailbox2CompleteCallback>
 8002714:	e016      	b.n	8002744 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	e00c      	b.n	8002744 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	e002      	b.n	8002744 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f93e 	bl	80029c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00c      	beq.n	8002768 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800275e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2208      	movs	r2, #8
 8002782:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f924 	bl	80029d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fd3e 	bl	8001224 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2210      	movs	r2, #16
 80027ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2208      	movs	r2, #8
 80027e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f904 	bl	80029f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d009      	beq.n	800280c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8ec 	bl	80029e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2210      	movs	r2, #16
 8002826:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8ed 	bl	8002a08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2208      	movs	r2, #8
 8002848:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8e5 	bl	8002a1a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d075      	beq.n	8002946 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d06c      	beq.n	800293e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03d      	beq.n	800293e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d038      	beq.n	800293e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028d2:	2b30      	cmp	r3, #48	; 0x30
 80028d4:	d017      	beq.n	8002906 <HAL_CAN_IRQHandler+0x302>
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d804      	bhi.n	80028e4 <HAL_CAN_IRQHandler+0x2e0>
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d009      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x2ee>
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d00c      	beq.n	80028fc <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028e2:	e024      	b.n	800292e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80028e4:	2b50      	cmp	r3, #80	; 0x50
 80028e6:	d018      	beq.n	800291a <HAL_CAN_IRQHandler+0x316>
 80028e8:	2b60      	cmp	r3, #96	; 0x60
 80028ea:	d01b      	beq.n	8002924 <HAL_CAN_IRQHandler+0x320>
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d00f      	beq.n	8002910 <HAL_CAN_IRQHandler+0x30c>
            break;
 80028f0:	e01d      	b.n	800292e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028fa:	e018      	b.n	800292e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f043 0310 	orr.w	r3, r3, #16
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002904:	e013      	b.n	800292e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f043 0320 	orr.w	r3, r3, #32
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800290e:	e00e      	b.n	800292e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002918:	e009      	b.n	800292e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002922:	e004      	b.n	800292e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800292c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800293c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2204      	movs	r2, #4
 8002944:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f867 	bl	8002a2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4906      	ldr	r1, [pc, #24]	; (8002ad8 <__NVIC_EnableIRQ+0x34>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba4:	d301      	bcc.n	8002baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <SysTick_Config+0x40>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f7ff ff90 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <SysTick_Config+0x40>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <SysTick_Config+0x40>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff2d 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff42 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff90 	bl	8002b30 <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5f 	bl	8002adc <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff35 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa2 	bl	8002b94 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e043      	b.n	8002cfa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_DMA_Init+0xa8>)
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_DMA_Init+0xac>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	009a      	lsls	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_DMA_Init+0xb0>)
 8002c8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ca6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002caa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	bffdfff8 	.word	0xbffdfff8
 8002d08:	cccccccd 	.word	0xcccccccd
 8002d0c:	40020000 	.word	0x40020000

08002d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_DMA_Start_IT+0x20>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e04a      	b.n	8002dc6 <HAL_DMA_Start_IT+0xb6>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d13a      	bne.n	8002db8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f9ae 	bl	80030c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 020e 	orr.w	r2, r2, #14
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e00f      	b.n	8002da6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0204 	bic.w	r2, r2, #4
 8002d94:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 020a 	orr.w	r2, r2, #10
 8002da4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	e005      	b.n	8002dc4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d005      	beq.n	8002df2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2204      	movs	r2, #4
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e051      	b.n	8002e96 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 020e 	bic.w	r2, r2, #14
 8002e00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <HAL_DMA_Abort_IT+0xd0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d029      	beq.n	8002e70 <HAL_DMA_Abort_IT+0xa0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <HAL_DMA_Abort_IT+0xd4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d022      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x9c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <HAL_DMA_Abort_IT+0xd8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d01a      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x96>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <HAL_DMA_Abort_IT+0xdc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d012      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x90>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <HAL_DMA_Abort_IT+0xe0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00a      	beq.n	8002e5a <HAL_DMA_Abort_IT+0x8a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_DMA_Abort_IT+0xe4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d102      	bne.n	8002e54 <HAL_DMA_Abort_IT+0x84>
 8002e4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e52:	e00e      	b.n	8002e72 <HAL_DMA_Abort_IT+0xa2>
 8002e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e58:	e00b      	b.n	8002e72 <HAL_DMA_Abort_IT+0xa2>
 8002e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5e:	e008      	b.n	8002e72 <HAL_DMA_Abort_IT+0xa2>
 8002e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e64:	e005      	b.n	8002e72 <HAL_DMA_Abort_IT+0xa2>
 8002e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6a:	e002      	b.n	8002e72 <HAL_DMA_Abort_IT+0xa2>
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	e000      	b.n	8002e72 <HAL_DMA_Abort_IT+0xa2>
 8002e70:	2301      	movs	r3, #1
 8002e72:	4a11      	ldr	r2, [pc, #68]	; (8002eb8 <HAL_DMA_Abort_IT+0xe8>)
 8002e74:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
    } 
  }
  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40020008 	.word	0x40020008
 8002ea4:	4002001c 	.word	0x4002001c
 8002ea8:	40020030 	.word	0x40020030
 8002eac:	40020044 	.word	0x40020044
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	4002006c 	.word	0x4002006c
 8002eb8:	40020000 	.word	0x40020000

08002ebc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2204      	movs	r2, #4
 8002eda:	409a      	lsls	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d04f      	beq.n	8002f84 <HAL_DMA_IRQHandler+0xc8>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a66      	ldr	r2, [pc, #408]	; (80030ac <HAL_DMA_IRQHandler+0x1f0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d029      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xae>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <HAL_DMA_IRQHandler+0x1f4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d022      	beq.n	8002f66 <HAL_DMA_IRQHandler+0xaa>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a63      	ldr	r2, [pc, #396]	; (80030b4 <HAL_DMA_IRQHandler+0x1f8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01a      	beq.n	8002f60 <HAL_DMA_IRQHandler+0xa4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a62      	ldr	r2, [pc, #392]	; (80030b8 <HAL_DMA_IRQHandler+0x1fc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d012      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x9e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a60      	ldr	r2, [pc, #384]	; (80030bc <HAL_DMA_IRQHandler+0x200>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00a      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x98>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5f      	ldr	r2, [pc, #380]	; (80030c0 <HAL_DMA_IRQHandler+0x204>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d102      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x92>
 8002f48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f4c:	e00e      	b.n	8002f6c <HAL_DMA_IRQHandler+0xb0>
 8002f4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f52:	e00b      	b.n	8002f6c <HAL_DMA_IRQHandler+0xb0>
 8002f54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f58:	e008      	b.n	8002f6c <HAL_DMA_IRQHandler+0xb0>
 8002f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f5e:	e005      	b.n	8002f6c <HAL_DMA_IRQHandler+0xb0>
 8002f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f64:	e002      	b.n	8002f6c <HAL_DMA_IRQHandler+0xb0>
 8002f66:	2340      	movs	r3, #64	; 0x40
 8002f68:	e000      	b.n	8002f6c <HAL_DMA_IRQHandler+0xb0>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	4a55      	ldr	r2, [pc, #340]	; (80030c4 <HAL_DMA_IRQHandler+0x208>)
 8002f6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8094 	beq.w	80030a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f82:	e08e      	b.n	80030a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2202      	movs	r2, #2
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d056      	beq.n	8003042 <HAL_DMA_IRQHandler+0x186>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d051      	beq.n	8003042 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 020a 	bic.w	r2, r2, #10
 8002fba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a38      	ldr	r2, [pc, #224]	; (80030ac <HAL_DMA_IRQHandler+0x1f0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d029      	beq.n	8003022 <HAL_DMA_IRQHandler+0x166>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a37      	ldr	r2, [pc, #220]	; (80030b0 <HAL_DMA_IRQHandler+0x1f4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_DMA_IRQHandler+0x162>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <HAL_DMA_IRQHandler+0x1f8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01a      	beq.n	8003018 <HAL_DMA_IRQHandler+0x15c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a34      	ldr	r2, [pc, #208]	; (80030b8 <HAL_DMA_IRQHandler+0x1fc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d012      	beq.n	8003012 <HAL_DMA_IRQHandler+0x156>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a32      	ldr	r2, [pc, #200]	; (80030bc <HAL_DMA_IRQHandler+0x200>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00a      	beq.n	800300c <HAL_DMA_IRQHandler+0x150>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a31      	ldr	r2, [pc, #196]	; (80030c0 <HAL_DMA_IRQHandler+0x204>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d102      	bne.n	8003006 <HAL_DMA_IRQHandler+0x14a>
 8003000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003004:	e00e      	b.n	8003024 <HAL_DMA_IRQHandler+0x168>
 8003006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800300a:	e00b      	b.n	8003024 <HAL_DMA_IRQHandler+0x168>
 800300c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003010:	e008      	b.n	8003024 <HAL_DMA_IRQHandler+0x168>
 8003012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003016:	e005      	b.n	8003024 <HAL_DMA_IRQHandler+0x168>
 8003018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800301c:	e002      	b.n	8003024 <HAL_DMA_IRQHandler+0x168>
 800301e:	2320      	movs	r3, #32
 8003020:	e000      	b.n	8003024 <HAL_DMA_IRQHandler+0x168>
 8003022:	2302      	movs	r3, #2
 8003024:	4a27      	ldr	r2, [pc, #156]	; (80030c4 <HAL_DMA_IRQHandler+0x208>)
 8003026:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d034      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003040:	e02f      	b.n	80030a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2208      	movs	r2, #8
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d028      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x1e8>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d023      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 020e 	bic.w	r2, r2, #14
 800306a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
    }
  }
  return;
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
}
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40020008 	.word	0x40020008
 80030b0:	4002001c 	.word	0x4002001c
 80030b4:	40020030 	.word	0x40020030
 80030b8:	40020044 	.word	0x40020044
 80030bc:	40020058 	.word	0x40020058
 80030c0:	4002006c 	.word	0x4002006c
 80030c4:	40020000 	.word	0x40020000

080030c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d108      	bne.n	8003108 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003106:	e007      	b.n	8003118 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	60da      	str	r2, [r3, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr
	...

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b08b      	sub	sp, #44	; 0x2c
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800312e:	2300      	movs	r3, #0
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003136:	e127      	b.n	8003388 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003138:	2201      	movs	r2, #1
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	f040 8116 	bne.w	8003382 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b12      	cmp	r3, #18
 800315c:	d034      	beq.n	80031c8 <HAL_GPIO_Init+0xa4>
 800315e:	2b12      	cmp	r3, #18
 8003160:	d80d      	bhi.n	800317e <HAL_GPIO_Init+0x5a>
 8003162:	2b02      	cmp	r3, #2
 8003164:	d02b      	beq.n	80031be <HAL_GPIO_Init+0x9a>
 8003166:	2b02      	cmp	r3, #2
 8003168:	d804      	bhi.n	8003174 <HAL_GPIO_Init+0x50>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d031      	beq.n	80031d2 <HAL_GPIO_Init+0xae>
 800316e:	2b01      	cmp	r3, #1
 8003170:	d01c      	beq.n	80031ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003172:	e048      	b.n	8003206 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003174:	2b03      	cmp	r3, #3
 8003176:	d043      	beq.n	8003200 <HAL_GPIO_Init+0xdc>
 8003178:	2b11      	cmp	r3, #17
 800317a:	d01b      	beq.n	80031b4 <HAL_GPIO_Init+0x90>
          break;
 800317c:	e043      	b.n	8003206 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800317e:	4a89      	ldr	r2, [pc, #548]	; (80033a4 <HAL_GPIO_Init+0x280>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d026      	beq.n	80031d2 <HAL_GPIO_Init+0xae>
 8003184:	4a87      	ldr	r2, [pc, #540]	; (80033a4 <HAL_GPIO_Init+0x280>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d806      	bhi.n	8003198 <HAL_GPIO_Init+0x74>
 800318a:	4a87      	ldr	r2, [pc, #540]	; (80033a8 <HAL_GPIO_Init+0x284>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d020      	beq.n	80031d2 <HAL_GPIO_Init+0xae>
 8003190:	4a86      	ldr	r2, [pc, #536]	; (80033ac <HAL_GPIO_Init+0x288>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01d      	beq.n	80031d2 <HAL_GPIO_Init+0xae>
          break;
 8003196:	e036      	b.n	8003206 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003198:	4a85      	ldr	r2, [pc, #532]	; (80033b0 <HAL_GPIO_Init+0x28c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d019      	beq.n	80031d2 <HAL_GPIO_Init+0xae>
 800319e:	4a85      	ldr	r2, [pc, #532]	; (80033b4 <HAL_GPIO_Init+0x290>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d016      	beq.n	80031d2 <HAL_GPIO_Init+0xae>
 80031a4:	4a84      	ldr	r2, [pc, #528]	; (80033b8 <HAL_GPIO_Init+0x294>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_GPIO_Init+0xae>
          break;
 80031aa:	e02c      	b.n	8003206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	623b      	str	r3, [r7, #32]
          break;
 80031b2:	e028      	b.n	8003206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	3304      	adds	r3, #4
 80031ba:	623b      	str	r3, [r7, #32]
          break;
 80031bc:	e023      	b.n	8003206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	3308      	adds	r3, #8
 80031c4:	623b      	str	r3, [r7, #32]
          break;
 80031c6:	e01e      	b.n	8003206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	330c      	adds	r3, #12
 80031ce:	623b      	str	r3, [r7, #32]
          break;
 80031d0:	e019      	b.n	8003206 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d102      	bne.n	80031e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031da:	2304      	movs	r3, #4
 80031dc:	623b      	str	r3, [r7, #32]
          break;
 80031de:	e012      	b.n	8003206 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031e8:	2308      	movs	r3, #8
 80031ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	611a      	str	r2, [r3, #16]
          break;
 80031f2:	e008      	b.n	8003206 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f4:	2308      	movs	r3, #8
 80031f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	615a      	str	r2, [r3, #20]
          break;
 80031fe:	e002      	b.n	8003206 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003200:	2300      	movs	r3, #0
 8003202:	623b      	str	r3, [r7, #32]
          break;
 8003204:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2bff      	cmp	r3, #255	; 0xff
 800320a:	d801      	bhi.n	8003210 <HAL_GPIO_Init+0xec>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	e001      	b.n	8003214 <HAL_GPIO_Init+0xf0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2bff      	cmp	r3, #255	; 0xff
 800321a:	d802      	bhi.n	8003222 <HAL_GPIO_Init+0xfe>
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x104>
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	3b08      	subs	r3, #8
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	210f      	movs	r1, #15
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	401a      	ands	r2, r3
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	431a      	orrs	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8096 	beq.w	8003382 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_GPIO_Init+0x298>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_GPIO_Init+0x298>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6193      	str	r3, [r2, #24]
 8003262:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_GPIO_Init+0x298>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800326e:	4a54      	ldr	r2, [pc, #336]	; (80033c0 <HAL_GPIO_Init+0x29c>)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4b      	ldr	r2, [pc, #300]	; (80033c4 <HAL_GPIO_Init+0x2a0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d013      	beq.n	80032c2 <HAL_GPIO_Init+0x19e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_GPIO_Init+0x2a4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00d      	beq.n	80032be <HAL_GPIO_Init+0x19a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a49      	ldr	r2, [pc, #292]	; (80033cc <HAL_GPIO_Init+0x2a8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d007      	beq.n	80032ba <HAL_GPIO_Init+0x196>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_GPIO_Init+0x2ac>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <HAL_GPIO_Init+0x192>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e006      	b.n	80032c4 <HAL_GPIO_Init+0x1a0>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e004      	b.n	80032c4 <HAL_GPIO_Init+0x1a0>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e002      	b.n	80032c4 <HAL_GPIO_Init+0x1a0>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <HAL_GPIO_Init+0x1a0>
 80032c2:	2300      	movs	r3, #0
 80032c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c6:	f002 0203 	and.w	r2, r2, #3
 80032ca:	0092      	lsls	r2, r2, #2
 80032cc:	4093      	lsls	r3, r2
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032d4:	493a      	ldr	r1, [pc, #232]	; (80033c0 <HAL_GPIO_Init+0x29c>)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3302      	adds	r3, #2
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4938      	ldr	r1, [pc, #224]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
 80032fa:	e006      	b.n	800330a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	43db      	mvns	r3, r3
 8003304:	4933      	ldr	r1, [pc, #204]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003306:	4013      	ands	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d006      	beq.n	8003324 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	492e      	ldr	r1, [pc, #184]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
 8003322:	e006      	b.n	8003332 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	43db      	mvns	r3, r3
 800332c:	4929      	ldr	r1, [pc, #164]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 800332e:	4013      	ands	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800333e:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	4924      	ldr	r1, [pc, #144]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
 800334a:	e006      	b.n	800335a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800334c:	4b21      	ldr	r3, [pc, #132]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	43db      	mvns	r3, r3
 8003354:	491f      	ldr	r1, [pc, #124]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003356:	4013      	ands	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	491a      	ldr	r1, [pc, #104]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	60cb      	str	r3, [r1, #12]
 8003372:	e006      	b.n	8003382 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	43db      	mvns	r3, r3
 800337c:	4915      	ldr	r1, [pc, #84]	; (80033d4 <HAL_GPIO_Init+0x2b0>)
 800337e:	4013      	ands	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	3301      	adds	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f47f aed0 	bne.w	8003138 <HAL_GPIO_Init+0x14>
  }
}
 8003398:	bf00      	nop
 800339a:	372c      	adds	r7, #44	; 0x2c
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	10210000 	.word	0x10210000
 80033a8:	10110000 	.word	0x10110000
 80033ac:	10120000 	.word	0x10120000
 80033b0:	10310000 	.word	0x10310000
 80033b4:	10320000 	.word	0x10320000
 80033b8:	10220000 	.word	0x10220000
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40010800 	.word	0x40010800
 80033c8:	40010c00 	.word	0x40010c00
 80033cc:	40011000 	.word	0x40011000
 80033d0:	40011400 	.word	0x40011400
 80033d4:	40010400 	.word	0x40010400

080033d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e26c      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8087 	beq.w	8003506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f8:	4b92      	ldr	r3, [pc, #584]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00c      	beq.n	800341e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003404:	4b8f      	ldr	r3, [pc, #572]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d112      	bne.n	8003436 <HAL_RCC_OscConfig+0x5e>
 8003410:	4b8c      	ldr	r3, [pc, #560]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d10b      	bne.n	8003436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341e:	4b89      	ldr	r3, [pc, #548]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d06c      	beq.n	8003504 <HAL_RCC_OscConfig+0x12c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d168      	bne.n	8003504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e246      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x76>
 8003440:	4b80      	ldr	r3, [pc, #512]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7f      	ldr	r2, [pc, #508]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e02e      	b.n	80034ac <HAL_RCC_OscConfig+0xd4>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x98>
 8003456:	4b7b      	ldr	r3, [pc, #492]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7a      	ldr	r2, [pc, #488]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b78      	ldr	r3, [pc, #480]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a77      	ldr	r2, [pc, #476]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e01d      	b.n	80034ac <HAL_RCC_OscConfig+0xd4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0xbc>
 800347a:	4b72      	ldr	r3, [pc, #456]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a71      	ldr	r2, [pc, #452]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b6f      	ldr	r3, [pc, #444]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a6e      	ldr	r2, [pc, #440]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0xd4>
 8003494:	4b6b      	ldr	r3, [pc, #428]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6a      	ldr	r2, [pc, #424]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a67      	ldr	r2, [pc, #412]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fc50 	bl	8001d58 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fc4c 	bl	8001d58 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1fa      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0xe4>
 80034da:	e014      	b.n	8003506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fc3c 	bl	8001d58 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fc38 	bl	8001d58 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e1e6      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x10c>
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d063      	beq.n	80035da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003512:	4b4c      	ldr	r3, [pc, #304]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800351e:	4b49      	ldr	r3, [pc, #292]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d11c      	bne.n	8003564 <HAL_RCC_OscConfig+0x18c>
 800352a:	4b46      	ldr	r3, [pc, #280]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	4b43      	ldr	r3, [pc, #268]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_RCC_OscConfig+0x176>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e1ba      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354e:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4939      	ldr	r1, [pc, #228]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	e03a      	b.n	80035da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d020      	beq.n	80035ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003572:	f7fe fbf1 	bl	8001d58 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357a:	f7fe fbed 	bl	8001d58 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e19b      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4927      	ldr	r1, [pc, #156]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	600b      	str	r3, [r1, #0]
 80035ac:	e015      	b.n	80035da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x270>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7fe fbd0 	bl	8001d58 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035bc:	f7fe fbcc 	bl	8001d58 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e17a      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	4b1d      	ldr	r3, [pc, #116]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d03a      	beq.n	800365c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ee:	4b17      	ldr	r3, [pc, #92]	; (800364c <HAL_RCC_OscConfig+0x274>)
 80035f0:	2201      	movs	r2, #1
 80035f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe fbb0 	bl	8001d58 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fe fbac 	bl	8001d58 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e15a      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_RCC_OscConfig+0x26c>)
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800361a:	2001      	movs	r0, #1
 800361c:	f000 fada 	bl	8003bd4 <RCC_Delay>
 8003620:	e01c      	b.n	800365c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_RCC_OscConfig+0x274>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003628:	f7fe fb96 	bl	8001d58 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362e:	e00f      	b.n	8003650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fe fb92 	bl	8001d58 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d908      	bls.n	8003650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e140      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	42420000 	.word	0x42420000
 800364c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	4b9e      	ldr	r3, [pc, #632]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e9      	bne.n	8003630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a6 	beq.w	80037b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366e:	4b97      	ldr	r3, [pc, #604]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10d      	bne.n	8003696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	4b94      	ldr	r3, [pc, #592]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	4a93      	ldr	r2, [pc, #588]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003684:	61d3      	str	r3, [r2, #28]
 8003686:	4b91      	ldr	r3, [pc, #580]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b8e      	ldr	r3, [pc, #568]	; (80038d0 <HAL_RCC_OscConfig+0x4f8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x4f8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a8a      	ldr	r2, [pc, #552]	; (80038d0 <HAL_RCC_OscConfig+0x4f8>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ae:	f7fe fb53 	bl	8001d58 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fe fb4f 	bl	8001d58 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0fd      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	4b81      	ldr	r3, [pc, #516]	; (80038d0 <HAL_RCC_OscConfig+0x4f8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x312>
 80036dc:	4b7b      	ldr	r3, [pc, #492]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4a7a      	ldr	r2, [pc, #488]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	e02d      	b.n	8003746 <HAL_RCC_OscConfig+0x36e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x334>
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	6213      	str	r3, [r2, #32]
 80036fe:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4a72      	ldr	r2, [pc, #456]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003704:	f023 0304 	bic.w	r3, r3, #4
 8003708:	6213      	str	r3, [r2, #32]
 800370a:	e01c      	b.n	8003746 <HAL_RCC_OscConfig+0x36e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b05      	cmp	r3, #5
 8003712:	d10c      	bne.n	800372e <HAL_RCC_OscConfig+0x356>
 8003714:	4b6d      	ldr	r3, [pc, #436]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	4a6c      	ldr	r2, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800371a:	f043 0304 	orr.w	r3, r3, #4
 800371e:	6213      	str	r3, [r2, #32]
 8003720:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4a69      	ldr	r2, [pc, #420]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6213      	str	r3, [r2, #32]
 800372c:	e00b      	b.n	8003746 <HAL_RCC_OscConfig+0x36e>
 800372e:	4b67      	ldr	r3, [pc, #412]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	4a66      	ldr	r2, [pc, #408]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6213      	str	r3, [r2, #32]
 800373a:	4b64      	ldr	r3, [pc, #400]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4a63      	ldr	r2, [pc, #396]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d015      	beq.n	800377a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe fb03 	bl	8001d58 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	e00a      	b.n	800376c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003756:	f7fe faff 	bl	8001d58 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f241 3288 	movw	r2, #5000	; 0x1388
 8003764:	4293      	cmp	r3, r2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e0ab      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800376c:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ee      	beq.n	8003756 <HAL_RCC_OscConfig+0x37e>
 8003778:	e014      	b.n	80037a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800377a:	f7fe faed 	bl	8001d58 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003780:	e00a      	b.n	8003798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fe fae9 	bl	8001d58 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003790:	4293      	cmp	r3, r2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e095      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003798:	4b4c      	ldr	r3, [pc, #304]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1ee      	bne.n	8003782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d105      	bne.n	80037b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037aa:	4b48      	ldr	r3, [pc, #288]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	4a47      	ldr	r2, [pc, #284]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 8081 	beq.w	80038c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c0:	4b42      	ldr	r3, [pc, #264]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d061      	beq.n	8003890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d146      	bne.n	8003862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d4:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <HAL_RCC_OscConfig+0x4fc>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fe fabd 	bl	8001d58 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe fab9 	bl	8001d58 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e067      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d108      	bne.n	800381c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800380a:	4b30      	ldr	r3, [pc, #192]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	492d      	ldr	r1, [pc, #180]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a19      	ldr	r1, [r3, #32]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	430b      	orrs	r3, r1
 800382e:	4927      	ldr	r1, [pc, #156]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003830:	4313      	orrs	r3, r2
 8003832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_OscConfig+0x4fc>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fe fa8d 	bl	8001d58 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7fe fa89 	bl	8001d58 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e037      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003854:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x46a>
 8003860:	e02f      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <HAL_RCC_OscConfig+0x4fc>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe fa76 	bl	8001d58 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7fe fa72 	bl	8001d58 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e020      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0x498>
 800388e:	e018      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e013      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x4f4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d001      	beq.n	80038c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3718      	adds	r7, #24
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	42420060 	.word	0x42420060

080038d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0d0      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d910      	bls.n	800391c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4965      	ldr	r1, [pc, #404]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003934:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800393e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	494d      	ldr	r1, [pc, #308]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d040      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d115      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e073      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06b      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4936      	ldr	r1, [pc, #216]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fe f9c6 	bl	8001d58 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe f9c2 	bl	8001d58 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e053      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d210      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0207 	bic.w	r2, r3, #7
 8003a0e:	4922      	ldr	r1, [pc, #136]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e032      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4916      	ldr	r1, [pc, #88]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a66:	f000 f821 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a6a:	4601      	mov	r1, r0
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	5cd3      	ldrb	r3, [r2, r3]
 8003a7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8003a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe f924 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40022000 	.word	0x40022000
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	08007f48 	.word	0x08007f48
 8003aa4:	20000020 	.word	0x20000020
 8003aa8:	20000024 	.word	0x20000024

08003aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	b490      	push	{r4, r7}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ab4:	1d3c      	adds	r4, r7, #4
 8003ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ab8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003abc:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ad6:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d002      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x40>
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x46>
 8003aea:	e02d      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aec:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aee:	623b      	str	r3, [r7, #32]
      break;
 8003af0:	e02d      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	0c9b      	lsrs	r3, r3, #18
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003afe:	4413      	add	r3, r2
 8003b00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d013      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	0c5b      	lsrs	r3, r3, #17
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b1e:	4413      	add	r3, r2
 8003b20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4a0f      	ldr	r2, [pc, #60]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b2a:	fb02 f203 	mul.w	r2, r2, r3
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e004      	b.n	8003b42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b3c:	fb02 f303 	mul.w	r3, r2, r3
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	623b      	str	r3, [r7, #32]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b4a:	623b      	str	r3, [r7, #32]
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc90      	pop	{r4, r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	08007f34 	.word	0x08007f34
 8003b60:	08007f44 	.word	0x08007f44
 8003b64:	40021000 	.word	0x40021000
 8003b68:	007a1200 	.word	0x007a1200
 8003b6c:	003d0900 	.word	0x003d0900

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b02      	ldr	r3, [pc, #8]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000020 	.word	0x20000020

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b88:	f7ff fff2 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08007f58 	.word	0x08007f58

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb0:	f7ff ffde 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4601      	mov	r1, r0
 8003bb6:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0adb      	lsrs	r3, r3, #11
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4a03      	ldr	r2, [pc, #12]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	08007f58 	.word	0x08007f58

08003bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <RCC_Delay+0x34>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <RCC_Delay+0x38>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	0a5b      	lsrs	r3, r3, #9
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bf0:	bf00      	nop
  }
  while (Delay --);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	60fa      	str	r2, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f9      	bne.n	8003bf0 <RCC_Delay+0x1c>
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000020 	.word	0x20000020
 8003c0c:	10624dd3 	.word	0x10624dd3

08003c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e03f      	b.n	8003ca2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd ff72 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	; 0x24
 8003c40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fc33 	bl	80044c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d153      	bne.n	8003d6e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_UART_Transmit_DMA+0x26>
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e04c      	b.n	8003d70 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_UART_Transmit_DMA+0x38>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e045      	b.n	8003d70 <HAL_UART_Transmit_DMA+0xc4>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2221      	movs	r2, #33	; 0x21
 8003d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_UART_Transmit_DMA+0xcc>)
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <HAL_UART_Transmit_DMA+0xd0>)
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <HAL_UART_Transmit_DMA+0xd4>)
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	2200      	movs	r2, #0
 8003d2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003d2c:	f107 0308 	add.w	r3, r7, #8
 8003d30:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	6819      	ldr	r1, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	461a      	mov	r2, r3
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	f7fe ffe4 	bl	8002d10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d50:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d68:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	e000      	b.n	8003d70 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003d6e:	2302      	movs	r3, #2
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	080040df 	.word	0x080040df
 8003d7c:	08004131 	.word	0x08004131
 8003d80:	080041d1 	.word	0x080041d1

08003d84 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b20      	cmp	r3, #32
 8003d9c:	d166      	bne.n	8003e6c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_UART_Receive_DMA+0x26>
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e05f      	b.n	8003e6e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_UART_Receive_DMA+0x38>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e058      	b.n	8003e6e <HAL_UART_Receive_DMA+0xea>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	88fa      	ldrh	r2, [r7, #6]
 8003dce:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2222      	movs	r2, #34	; 0x22
 8003dda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <HAL_UART_Receive_DMA+0xf4>)
 8003de4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <HAL_UART_Receive_DMA+0xf8>)
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <HAL_UART_Receive_DMA+0xfc>)
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003dfe:	f107 0308 	add.w	r3, r7, #8
 8003e02:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	4619      	mov	r1, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	f7fe ff7b 	bl	8002d10 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e46:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e66:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e000      	b.n	8003e6e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003e6c:	2302      	movs	r3, #2
  }
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	0800414d 	.word	0x0800414d
 8003e7c:	080041b5 	.word	0x080041b5
 8003e80:	080041d1 	.word	0x080041d1

08003e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x52>
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa75 	bl	80043be <UART_Receive_IT>
      return;
 8003ed4:	e0d1      	b.n	800407a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80b0 	beq.w	800403e <HAL_UART_IRQHandler+0x1ba>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x70>
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80a5 	beq.w	800403e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_UART_IRQHandler+0x90>
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_UART_IRQHandler+0xb0>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	f043 0202 	orr.w	r2, r3, #2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_UART_IRQHandler+0xd0>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00f      	beq.n	8003f7e <HAL_UART_IRQHandler+0xfa>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <HAL_UART_IRQHandler+0xee>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	f043 0208 	orr.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d078      	beq.n	8004078 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x11c>
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa0f 	bl	80043be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bf14      	ite	ne
 8003fae:	2301      	movne	r3, #1
 8003fb0:	2300      	moveq	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x144>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d031      	beq.n	800402c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f960 	bl	800428e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d023      	beq.n	8004024 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d013      	beq.n	800401c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	4a21      	ldr	r2, [pc, #132]	; (8004080 <HAL_UART_IRQHandler+0x1fc>)
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe fee5 	bl	8002dd0 <HAL_DMA_Abort_IT>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d016      	beq.n	800403a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004016:	4610      	mov	r0, r2
 8004018:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401a:	e00e      	b.n	800403a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f855 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004022:	e00a      	b.n	800403a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f851 	bl	80040cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402a:	e006      	b.n	800403a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f84d 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004038:	e01e      	b.n	8004078 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403a:	bf00      	nop
    return;
 800403c:	e01c      	b.n	8004078 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004044:	2b00      	cmp	r3, #0
 8004046:	d008      	beq.n	800405a <HAL_UART_IRQHandler+0x1d6>
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f94c 	bl	80042f0 <UART_Transmit_IT>
    return;
 8004058:	e00f      	b.n	800407a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_UART_IRQHandler+0x1f6>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f98d 	bl	800438e <UART_EndTransmit_IT>
    return;
 8004074:	bf00      	nop
 8004076:	e000      	b.n	800407a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004078:	bf00      	nop
  }
}
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	080042c9 	.word	0x080042c9

08004084 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800411e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004120:	e002      	b.n	8004128 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff ffae 	bl	8004084 <HAL_UART_TxCpltCallback>
}
 8004128:	bf00      	nop
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f7ff ffa9 	bl	8004096 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11e      	bne.n	80041a6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff ff7e 	bl	80040a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff ff79 	bl	80040ba <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b21      	cmp	r3, #33	; 0x21
 8004202:	d108      	bne.n	8004216 <UART_DMAError+0x46>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2200      	movs	r2, #0
 800420e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004210:	68b8      	ldr	r0, [r7, #8]
 8004212:	f000 f827 	bl	8004264 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b22      	cmp	r3, #34	; 0x22
 8004236:	d108      	bne.n	800424a <UART_DMAError+0x7a>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004244:	68b8      	ldr	r0, [r7, #8]
 8004246:	f000 f822 	bl	800428e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	f043 0210 	orr.w	r2, r3, #16
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004256:	68b8      	ldr	r0, [r7, #8]
 8004258:	f7ff ff38 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800427a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042a4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695a      	ldr	r2, [r3, #20]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff fef2 	bl	80040cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b21      	cmp	r3, #33	; 0x21
 8004302:	d13e      	bne.n	8004382 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d114      	bne.n	8004338 <UART_Transmit_IT+0x48>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d110      	bne.n	8004338 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	621a      	str	r2, [r3, #32]
 8004336:	e008      	b.n	800434a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6211      	str	r1, [r2, #32]
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29b      	uxth	r3, r3
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4619      	mov	r1, r3
 8004358:	84d1      	strh	r1, [r2, #38]	; 0x26
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800436c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800437c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	e000      	b.n	8004384 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004382:	2302      	movs	r3, #2
  }
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fe68 	bl	8004084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b22      	cmp	r3, #34	; 0x22
 80043d0:	d170      	bne.n	80044b4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d117      	bne.n	800440c <UART_Receive_IT+0x4e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d113      	bne.n	800440c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
 800440a:	e026      	b.n	800445a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	d007      	beq.n	8004430 <UART_Receive_IT+0x72>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <UART_Receive_IT+0x80>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	e008      	b.n	8004450 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444a:	b2da      	uxtb	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4619      	mov	r1, r3
 8004468:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800446a:	2b00      	cmp	r3, #0
 800446c:	d120      	bne.n	80044b0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0220 	bic.w	r2, r2, #32
 800447c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7ff fdfe 	bl	80040a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e002      	b.n	80044b6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044fa:	f023 030c 	bic.w	r3, r3, #12
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	430b      	orrs	r3, r1
 8004506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <UART_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004528:	f7ff fb40 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	e002      	b.n	8004536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7ff fb28 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8004534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <UART_SetConfig+0x118>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	0119      	lsls	r1, r3, #4
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f2f3 	udiv	r2, r2, r3
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <UART_SetConfig+0x118>)
 800456e:	fba3 0302 	umull	r0, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2064      	movs	r0, #100	; 0x64
 8004576:	fb00 f303 	mul.w	r3, r0, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <UART_SetConfig+0x118>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458c:	4419      	add	r1, r3
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <UART_SetConfig+0x118>)
 80045a6:	fba3 0302 	umull	r0, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2064      	movs	r0, #100	; 0x64
 80045ae:	fb00 f303 	mul.w	r3, r0, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	3332      	adds	r3, #50	; 0x32
 80045b8:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <UART_SetConfig+0x118>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	440a      	add	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40013800 	.word	0x40013800
 80045d8:	51eb851f 	.word	0x51eb851f

080045dc <atof>:
 80045dc:	2100      	movs	r1, #0
 80045de:	f001 bad3 	b.w	8005b88 <strtod>

080045e2 <atoi>:
 80045e2:	220a      	movs	r2, #10
 80045e4:	2100      	movs	r1, #0
 80045e6:	f001 bbb1 	b.w	8005d4c <strtol>
	...

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	; (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000002c 	.word	0x2000002c

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	2500      	movs	r5, #0
 80045fc:	4e0c      	ldr	r6, [pc, #48]	; (8004630 <__libc_init_array+0x38>)
 80045fe:	4c0d      	ldr	r4, [pc, #52]	; (8004634 <__libc_init_array+0x3c>)
 8004600:	1ba4      	subs	r4, r4, r6
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	42a5      	cmp	r5, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	f003 fbe0 	bl	8007dcc <_init>
 800460c:	2500      	movs	r5, #0
 800460e:	4e0a      	ldr	r6, [pc, #40]	; (8004638 <__libc_init_array+0x40>)
 8004610:	4c0a      	ldr	r4, [pc, #40]	; (800463c <__libc_init_array+0x44>)
 8004612:	1ba4      	subs	r4, r4, r6
 8004614:	10a4      	asrs	r4, r4, #2
 8004616:	42a5      	cmp	r5, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004620:	4798      	blx	r3
 8004622:	3501      	adds	r5, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800462a:	4798      	blx	r3
 800462c:	3501      	adds	r5, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08008210 	.word	0x08008210
 8004634:	08008210 	.word	0x08008210
 8004638:	08008210 	.word	0x08008210
 800463c:	08008214 	.word	0x08008214

08004640 <memset>:
 8004640:	4603      	mov	r3, r0
 8004642:	4402      	add	r2, r0
 8004644:	4293      	cmp	r3, r2
 8004646:	d100      	bne.n	800464a <memset+0xa>
 8004648:	4770      	bx	lr
 800464a:	f803 1b01 	strb.w	r1, [r3], #1
 800464e:	e7f9      	b.n	8004644 <memset+0x4>

08004650 <__cvt>:
 8004650:	2b00      	cmp	r3, #0
 8004652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004656:	461e      	mov	r6, r3
 8004658:	bfbb      	ittet	lt
 800465a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800465e:	461e      	movlt	r6, r3
 8004660:	2300      	movge	r3, #0
 8004662:	232d      	movlt	r3, #45	; 0x2d
 8004664:	b088      	sub	sp, #32
 8004666:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004668:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800466c:	f027 0720 	bic.w	r7, r7, #32
 8004670:	2f46      	cmp	r7, #70	; 0x46
 8004672:	4614      	mov	r4, r2
 8004674:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004676:	700b      	strb	r3, [r1, #0]
 8004678:	d004      	beq.n	8004684 <__cvt+0x34>
 800467a:	2f45      	cmp	r7, #69	; 0x45
 800467c:	d100      	bne.n	8004680 <__cvt+0x30>
 800467e:	3501      	adds	r5, #1
 8004680:	2302      	movs	r3, #2
 8004682:	e000      	b.n	8004686 <__cvt+0x36>
 8004684:	2303      	movs	r3, #3
 8004686:	aa07      	add	r2, sp, #28
 8004688:	9204      	str	r2, [sp, #16]
 800468a:	aa06      	add	r2, sp, #24
 800468c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004690:	e9cd 3500 	strd	r3, r5, [sp]
 8004694:	4622      	mov	r2, r4
 8004696:	4633      	mov	r3, r6
 8004698:	f001 fbfe 	bl	8005e98 <_dtoa_r>
 800469c:	2f47      	cmp	r7, #71	; 0x47
 800469e:	4680      	mov	r8, r0
 80046a0:	d102      	bne.n	80046a8 <__cvt+0x58>
 80046a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046a4:	07db      	lsls	r3, r3, #31
 80046a6:	d526      	bpl.n	80046f6 <__cvt+0xa6>
 80046a8:	2f46      	cmp	r7, #70	; 0x46
 80046aa:	eb08 0905 	add.w	r9, r8, r5
 80046ae:	d111      	bne.n	80046d4 <__cvt+0x84>
 80046b0:	f898 3000 	ldrb.w	r3, [r8]
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d10a      	bne.n	80046ce <__cvt+0x7e>
 80046b8:	2200      	movs	r2, #0
 80046ba:	2300      	movs	r3, #0
 80046bc:	4620      	mov	r0, r4
 80046be:	4631      	mov	r1, r6
 80046c0:	f7fc f97c 	bl	80009bc <__aeabi_dcmpeq>
 80046c4:	b918      	cbnz	r0, 80046ce <__cvt+0x7e>
 80046c6:	f1c5 0501 	rsb	r5, r5, #1
 80046ca:	f8ca 5000 	str.w	r5, [sl]
 80046ce:	f8da 3000 	ldr.w	r3, [sl]
 80046d2:	4499      	add	r9, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	2300      	movs	r3, #0
 80046d8:	4620      	mov	r0, r4
 80046da:	4631      	mov	r1, r6
 80046dc:	f7fc f96e 	bl	80009bc <__aeabi_dcmpeq>
 80046e0:	b938      	cbnz	r0, 80046f2 <__cvt+0xa2>
 80046e2:	2230      	movs	r2, #48	; 0x30
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	454b      	cmp	r3, r9
 80046e8:	d205      	bcs.n	80046f6 <__cvt+0xa6>
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	9107      	str	r1, [sp, #28]
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	e7f8      	b.n	80046e4 <__cvt+0x94>
 80046f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80046f6:	4640      	mov	r0, r8
 80046f8:	9b07      	ldr	r3, [sp, #28]
 80046fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046fc:	eba3 0308 	sub.w	r3, r3, r8
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	b008      	add	sp, #32
 8004704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004708 <__exponent>:
 8004708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800470a:	2900      	cmp	r1, #0
 800470c:	bfb4      	ite	lt
 800470e:	232d      	movlt	r3, #45	; 0x2d
 8004710:	232b      	movge	r3, #43	; 0x2b
 8004712:	4604      	mov	r4, r0
 8004714:	bfb8      	it	lt
 8004716:	4249      	neglt	r1, r1
 8004718:	2909      	cmp	r1, #9
 800471a:	f804 2b02 	strb.w	r2, [r4], #2
 800471e:	7043      	strb	r3, [r0, #1]
 8004720:	dd21      	ble.n	8004766 <__exponent+0x5e>
 8004722:	f10d 0307 	add.w	r3, sp, #7
 8004726:	461f      	mov	r7, r3
 8004728:	260a      	movs	r6, #10
 800472a:	fb91 f5f6 	sdiv	r5, r1, r6
 800472e:	fb06 1115 	mls	r1, r6, r5, r1
 8004732:	2d09      	cmp	r5, #9
 8004734:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004738:	f803 1c01 	strb.w	r1, [r3, #-1]
 800473c:	f103 32ff 	add.w	r2, r3, #4294967295
 8004740:	4629      	mov	r1, r5
 8004742:	dc09      	bgt.n	8004758 <__exponent+0x50>
 8004744:	3130      	adds	r1, #48	; 0x30
 8004746:	3b02      	subs	r3, #2
 8004748:	f802 1c01 	strb.w	r1, [r2, #-1]
 800474c:	42bb      	cmp	r3, r7
 800474e:	4622      	mov	r2, r4
 8004750:	d304      	bcc.n	800475c <__exponent+0x54>
 8004752:	1a10      	subs	r0, r2, r0
 8004754:	b003      	add	sp, #12
 8004756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004758:	4613      	mov	r3, r2
 800475a:	e7e6      	b.n	800472a <__exponent+0x22>
 800475c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004760:	f804 2b01 	strb.w	r2, [r4], #1
 8004764:	e7f2      	b.n	800474c <__exponent+0x44>
 8004766:	2330      	movs	r3, #48	; 0x30
 8004768:	4419      	add	r1, r3
 800476a:	7083      	strb	r3, [r0, #2]
 800476c:	1d02      	adds	r2, r0, #4
 800476e:	70c1      	strb	r1, [r0, #3]
 8004770:	e7ef      	b.n	8004752 <__exponent+0x4a>
	...

08004774 <_printf_float>:
 8004774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004778:	b091      	sub	sp, #68	; 0x44
 800477a:	460c      	mov	r4, r1
 800477c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800477e:	4693      	mov	fp, r2
 8004780:	461e      	mov	r6, r3
 8004782:	4605      	mov	r5, r0
 8004784:	f002 fc6a 	bl	800705c <_localeconv_r>
 8004788:	6803      	ldr	r3, [r0, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	9309      	str	r3, [sp, #36]	; 0x24
 800478e:	f7fb fce9 	bl	8000164 <strlen>
 8004792:	2300      	movs	r3, #0
 8004794:	930e      	str	r3, [sp, #56]	; 0x38
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	900a      	str	r0, [sp, #40]	; 0x28
 800479a:	3307      	adds	r3, #7
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	f103 0208 	add.w	r2, r3, #8
 80047a4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80047a8:	f8d4 a000 	ldr.w	sl, [r4]
 80047ac:	603a      	str	r2, [r7, #0]
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047b6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80047ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047be:	930b      	str	r3, [sp, #44]	; 0x2c
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	4ba6      	ldr	r3, [pc, #664]	; (8004a60 <_printf_float+0x2ec>)
 80047c6:	4638      	mov	r0, r7
 80047c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047ca:	f7fc f929 	bl	8000a20 <__aeabi_dcmpun>
 80047ce:	bb68      	cbnz	r0, 800482c <_printf_float+0xb8>
 80047d0:	f04f 32ff 	mov.w	r2, #4294967295
 80047d4:	4ba2      	ldr	r3, [pc, #648]	; (8004a60 <_printf_float+0x2ec>)
 80047d6:	4638      	mov	r0, r7
 80047d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047da:	f7fc f903 	bl	80009e4 <__aeabi_dcmple>
 80047de:	bb28      	cbnz	r0, 800482c <_printf_float+0xb8>
 80047e0:	2200      	movs	r2, #0
 80047e2:	2300      	movs	r3, #0
 80047e4:	4638      	mov	r0, r7
 80047e6:	4649      	mov	r1, r9
 80047e8:	f7fc f8f2 	bl	80009d0 <__aeabi_dcmplt>
 80047ec:	b110      	cbz	r0, 80047f4 <_printf_float+0x80>
 80047ee:	232d      	movs	r3, #45	; 0x2d
 80047f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f4:	4f9b      	ldr	r7, [pc, #620]	; (8004a64 <_printf_float+0x2f0>)
 80047f6:	4b9c      	ldr	r3, [pc, #624]	; (8004a68 <_printf_float+0x2f4>)
 80047f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047fc:	bf98      	it	ls
 80047fe:	461f      	movls	r7, r3
 8004800:	2303      	movs	r3, #3
 8004802:	f04f 0900 	mov.w	r9, #0
 8004806:	6123      	str	r3, [r4, #16]
 8004808:	f02a 0304 	bic.w	r3, sl, #4
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	9600      	str	r6, [sp, #0]
 8004810:	465b      	mov	r3, fp
 8004812:	aa0f      	add	r2, sp, #60	; 0x3c
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f9e2 	bl	8004be0 <_printf_common>
 800481c:	3001      	adds	r0, #1
 800481e:	f040 8090 	bne.w	8004942 <_printf_float+0x1ce>
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	b011      	add	sp, #68	; 0x44
 8004828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482c:	463a      	mov	r2, r7
 800482e:	464b      	mov	r3, r9
 8004830:	4638      	mov	r0, r7
 8004832:	4649      	mov	r1, r9
 8004834:	f7fc f8f4 	bl	8000a20 <__aeabi_dcmpun>
 8004838:	b110      	cbz	r0, 8004840 <_printf_float+0xcc>
 800483a:	4f8c      	ldr	r7, [pc, #560]	; (8004a6c <_printf_float+0x2f8>)
 800483c:	4b8c      	ldr	r3, [pc, #560]	; (8004a70 <_printf_float+0x2fc>)
 800483e:	e7db      	b.n	80047f8 <_printf_float+0x84>
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004846:	1c59      	adds	r1, r3, #1
 8004848:	a80d      	add	r0, sp, #52	; 0x34
 800484a:	a90e      	add	r1, sp, #56	; 0x38
 800484c:	d140      	bne.n	80048d0 <_printf_float+0x15c>
 800484e:	2306      	movs	r3, #6
 8004850:	6063      	str	r3, [r4, #4]
 8004852:	f04f 0c00 	mov.w	ip, #0
 8004856:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800485a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	6022      	str	r2, [r4, #0]
 8004862:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	463a      	mov	r2, r7
 800486a:	464b      	mov	r3, r9
 800486c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004870:	4628      	mov	r0, r5
 8004872:	f7ff feed 	bl	8004650 <__cvt>
 8004876:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800487a:	2b47      	cmp	r3, #71	; 0x47
 800487c:	4607      	mov	r7, r0
 800487e:	d109      	bne.n	8004894 <_printf_float+0x120>
 8004880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004882:	1cd8      	adds	r0, r3, #3
 8004884:	db02      	blt.n	800488c <_printf_float+0x118>
 8004886:	6862      	ldr	r2, [r4, #4]
 8004888:	4293      	cmp	r3, r2
 800488a:	dd47      	ble.n	800491c <_printf_float+0x1a8>
 800488c:	f1a8 0802 	sub.w	r8, r8, #2
 8004890:	fa5f f888 	uxtb.w	r8, r8
 8004894:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004898:	990d      	ldr	r1, [sp, #52]	; 0x34
 800489a:	d824      	bhi.n	80048e6 <_printf_float+0x172>
 800489c:	3901      	subs	r1, #1
 800489e:	4642      	mov	r2, r8
 80048a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048a4:	910d      	str	r1, [sp, #52]	; 0x34
 80048a6:	f7ff ff2f 	bl	8004708 <__exponent>
 80048aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ac:	4681      	mov	r9, r0
 80048ae:	1813      	adds	r3, r2, r0
 80048b0:	2a01      	cmp	r2, #1
 80048b2:	6123      	str	r3, [r4, #16]
 80048b4:	dc02      	bgt.n	80048bc <_printf_float+0x148>
 80048b6:	6822      	ldr	r2, [r4, #0]
 80048b8:	07d1      	lsls	r1, r2, #31
 80048ba:	d501      	bpl.n	80048c0 <_printf_float+0x14c>
 80048bc:	3301      	adds	r3, #1
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0a2      	beq.n	800480e <_printf_float+0x9a>
 80048c8:	232d      	movs	r3, #45	; 0x2d
 80048ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048ce:	e79e      	b.n	800480e <_printf_float+0x9a>
 80048d0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80048d4:	f000 816e 	beq.w	8004bb4 <_printf_float+0x440>
 80048d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048dc:	d1b9      	bne.n	8004852 <_printf_float+0xde>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1b7      	bne.n	8004852 <_printf_float+0xde>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e7b4      	b.n	8004850 <_printf_float+0xdc>
 80048e6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80048ea:	d119      	bne.n	8004920 <_printf_float+0x1ac>
 80048ec:	2900      	cmp	r1, #0
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	dd0c      	ble.n	800490c <_printf_float+0x198>
 80048f2:	6121      	str	r1, [r4, #16]
 80048f4:	b913      	cbnz	r3, 80048fc <_printf_float+0x188>
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	07d2      	lsls	r2, r2, #31
 80048fa:	d502      	bpl.n	8004902 <_printf_float+0x18e>
 80048fc:	3301      	adds	r3, #1
 80048fe:	440b      	add	r3, r1
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004904:	f04f 0900 	mov.w	r9, #0
 8004908:	65a3      	str	r3, [r4, #88]	; 0x58
 800490a:	e7d9      	b.n	80048c0 <_printf_float+0x14c>
 800490c:	b913      	cbnz	r3, 8004914 <_printf_float+0x1a0>
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	07d0      	lsls	r0, r2, #31
 8004912:	d501      	bpl.n	8004918 <_printf_float+0x1a4>
 8004914:	3302      	adds	r3, #2
 8004916:	e7f3      	b.n	8004900 <_printf_float+0x18c>
 8004918:	2301      	movs	r3, #1
 800491a:	e7f1      	b.n	8004900 <_printf_float+0x18c>
 800491c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004920:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004924:	4293      	cmp	r3, r2
 8004926:	db05      	blt.n	8004934 <_printf_float+0x1c0>
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	6123      	str	r3, [r4, #16]
 800492c:	07d1      	lsls	r1, r2, #31
 800492e:	d5e8      	bpl.n	8004902 <_printf_float+0x18e>
 8004930:	3301      	adds	r3, #1
 8004932:	e7e5      	b.n	8004900 <_printf_float+0x18c>
 8004934:	2b00      	cmp	r3, #0
 8004936:	bfcc      	ite	gt
 8004938:	2301      	movgt	r3, #1
 800493a:	f1c3 0302 	rsble	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	e7de      	b.n	8004900 <_printf_float+0x18c>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	055a      	lsls	r2, r3, #21
 8004946:	d407      	bmi.n	8004958 <_printf_float+0x1e4>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	463a      	mov	r2, r7
 800494c:	4659      	mov	r1, fp
 800494e:	4628      	mov	r0, r5
 8004950:	47b0      	blx	r6
 8004952:	3001      	adds	r0, #1
 8004954:	d129      	bne.n	80049aa <_printf_float+0x236>
 8004956:	e764      	b.n	8004822 <_printf_float+0xae>
 8004958:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800495c:	f240 80d7 	bls.w	8004b0e <_printf_float+0x39a>
 8004960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004964:	2200      	movs	r2, #0
 8004966:	2300      	movs	r3, #0
 8004968:	f7fc f828 	bl	80009bc <__aeabi_dcmpeq>
 800496c:	b388      	cbz	r0, 80049d2 <_printf_float+0x25e>
 800496e:	2301      	movs	r3, #1
 8004970:	4a40      	ldr	r2, [pc, #256]	; (8004a74 <_printf_float+0x300>)
 8004972:	4659      	mov	r1, fp
 8004974:	4628      	mov	r0, r5
 8004976:	47b0      	blx	r6
 8004978:	3001      	adds	r0, #1
 800497a:	f43f af52 	beq.w	8004822 <_printf_float+0xae>
 800497e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004982:	429a      	cmp	r2, r3
 8004984:	db02      	blt.n	800498c <_printf_float+0x218>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	07d8      	lsls	r0, r3, #31
 800498a:	d50e      	bpl.n	80049aa <_printf_float+0x236>
 800498c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004990:	4659      	mov	r1, fp
 8004992:	4628      	mov	r0, r5
 8004994:	47b0      	blx	r6
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af43 	beq.w	8004822 <_printf_float+0xae>
 800499c:	2700      	movs	r7, #0
 800499e:	f104 081a 	add.w	r8, r4, #26
 80049a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049a4:	3b01      	subs	r3, #1
 80049a6:	42bb      	cmp	r3, r7
 80049a8:	dc09      	bgt.n	80049be <_printf_float+0x24a>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	079f      	lsls	r7, r3, #30
 80049ae:	f100 80fd 	bmi.w	8004bac <_printf_float+0x438>
 80049b2:	68e0      	ldr	r0, [r4, #12]
 80049b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049b6:	4298      	cmp	r0, r3
 80049b8:	bfb8      	it	lt
 80049ba:	4618      	movlt	r0, r3
 80049bc:	e733      	b.n	8004826 <_printf_float+0xb2>
 80049be:	2301      	movs	r3, #1
 80049c0:	4642      	mov	r2, r8
 80049c2:	4659      	mov	r1, fp
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b0      	blx	r6
 80049c8:	3001      	adds	r0, #1
 80049ca:	f43f af2a 	beq.w	8004822 <_printf_float+0xae>
 80049ce:	3701      	adds	r7, #1
 80049d0:	e7e7      	b.n	80049a2 <_printf_float+0x22e>
 80049d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dc2b      	bgt.n	8004a30 <_printf_float+0x2bc>
 80049d8:	2301      	movs	r3, #1
 80049da:	4a26      	ldr	r2, [pc, #152]	; (8004a74 <_printf_float+0x300>)
 80049dc:	4659      	mov	r1, fp
 80049de:	4628      	mov	r0, r5
 80049e0:	47b0      	blx	r6
 80049e2:	3001      	adds	r0, #1
 80049e4:	f43f af1d 	beq.w	8004822 <_printf_float+0xae>
 80049e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049ea:	b923      	cbnz	r3, 80049f6 <_printf_float+0x282>
 80049ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049ee:	b913      	cbnz	r3, 80049f6 <_printf_float+0x282>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	07d9      	lsls	r1, r3, #31
 80049f4:	d5d9      	bpl.n	80049aa <_printf_float+0x236>
 80049f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049fa:	4659      	mov	r1, fp
 80049fc:	4628      	mov	r0, r5
 80049fe:	47b0      	blx	r6
 8004a00:	3001      	adds	r0, #1
 8004a02:	f43f af0e 	beq.w	8004822 <_printf_float+0xae>
 8004a06:	f04f 0800 	mov.w	r8, #0
 8004a0a:	f104 091a 	add.w	r9, r4, #26
 8004a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a10:	425b      	negs	r3, r3
 8004a12:	4543      	cmp	r3, r8
 8004a14:	dc01      	bgt.n	8004a1a <_printf_float+0x2a6>
 8004a16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a18:	e797      	b.n	800494a <_printf_float+0x1d6>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	464a      	mov	r2, r9
 8004a1e:	4659      	mov	r1, fp
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b0      	blx	r6
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f aefc 	beq.w	8004822 <_printf_float+0xae>
 8004a2a:	f108 0801 	add.w	r8, r8, #1
 8004a2e:	e7ee      	b.n	8004a0e <_printf_float+0x29a>
 8004a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a34:	429a      	cmp	r2, r3
 8004a36:	bfa8      	it	ge
 8004a38:	461a      	movge	r2, r3
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	4690      	mov	r8, r2
 8004a3e:	dd07      	ble.n	8004a50 <_printf_float+0x2dc>
 8004a40:	4613      	mov	r3, r2
 8004a42:	4659      	mov	r1, fp
 8004a44:	463a      	mov	r2, r7
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b0      	blx	r6
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	f43f aee9 	beq.w	8004822 <_printf_float+0xae>
 8004a50:	f104 031a 	add.w	r3, r4, #26
 8004a54:	f04f 0a00 	mov.w	sl, #0
 8004a58:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a5e:	e015      	b.n	8004a8c <_printf_float+0x318>
 8004a60:	7fefffff 	.word	0x7fefffff
 8004a64:	08007f64 	.word	0x08007f64
 8004a68:	08007f60 	.word	0x08007f60
 8004a6c:	08007f6c 	.word	0x08007f6c
 8004a70:	08007f68 	.word	0x08007f68
 8004a74:	08007f70 	.word	0x08007f70
 8004a78:	2301      	movs	r3, #1
 8004a7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	4628      	mov	r0, r5
 8004a80:	47b0      	blx	r6
 8004a82:	3001      	adds	r0, #1
 8004a84:	f43f aecd 	beq.w	8004822 <_printf_float+0xae>
 8004a88:	f10a 0a01 	add.w	sl, sl, #1
 8004a8c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004a90:	eba9 0308 	sub.w	r3, r9, r8
 8004a94:	4553      	cmp	r3, sl
 8004a96:	dcef      	bgt.n	8004a78 <_printf_float+0x304>
 8004a98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	444f      	add	r7, r9
 8004aa0:	db14      	blt.n	8004acc <_printf_float+0x358>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07da      	lsls	r2, r3, #31
 8004aa6:	d411      	bmi.n	8004acc <_printf_float+0x358>
 8004aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004aac:	eba3 0209 	sub.w	r2, r3, r9
 8004ab0:	eba3 0901 	sub.w	r9, r3, r1
 8004ab4:	4591      	cmp	r9, r2
 8004ab6:	bfa8      	it	ge
 8004ab8:	4691      	movge	r9, r2
 8004aba:	f1b9 0f00 	cmp.w	r9, #0
 8004abe:	dc0d      	bgt.n	8004adc <_printf_float+0x368>
 8004ac0:	2700      	movs	r7, #0
 8004ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ac6:	f104 081a 	add.w	r8, r4, #26
 8004aca:	e018      	b.n	8004afe <_printf_float+0x38a>
 8004acc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b0      	blx	r6
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d1e6      	bne.n	8004aa8 <_printf_float+0x334>
 8004ada:	e6a2      	b.n	8004822 <_printf_float+0xae>
 8004adc:	464b      	mov	r3, r9
 8004ade:	463a      	mov	r2, r7
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	47b0      	blx	r6
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d1ea      	bne.n	8004ac0 <_printf_float+0x34c>
 8004aea:	e69a      	b.n	8004822 <_printf_float+0xae>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4642      	mov	r2, r8
 8004af0:	4659      	mov	r1, fp
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b0      	blx	r6
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f ae93 	beq.w	8004822 <_printf_float+0xae>
 8004afc:	3701      	adds	r7, #1
 8004afe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b02:	1a9b      	subs	r3, r3, r2
 8004b04:	eba3 0309 	sub.w	r3, r3, r9
 8004b08:	42bb      	cmp	r3, r7
 8004b0a:	dcef      	bgt.n	8004aec <_printf_float+0x378>
 8004b0c:	e74d      	b.n	80049aa <_printf_float+0x236>
 8004b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b10:	2a01      	cmp	r2, #1
 8004b12:	dc01      	bgt.n	8004b18 <_printf_float+0x3a4>
 8004b14:	07db      	lsls	r3, r3, #31
 8004b16:	d538      	bpl.n	8004b8a <_printf_float+0x416>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	463a      	mov	r2, r7
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b0      	blx	r6
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f ae7d 	beq.w	8004822 <_printf_float+0xae>
 8004b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	4628      	mov	r0, r5
 8004b30:	47b0      	blx	r6
 8004b32:	3001      	adds	r0, #1
 8004b34:	f107 0701 	add.w	r7, r7, #1
 8004b38:	f43f ae73 	beq.w	8004822 <_printf_float+0xae>
 8004b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b42:	2200      	movs	r2, #0
 8004b44:	f103 38ff 	add.w	r8, r3, #4294967295
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f7fb ff37 	bl	80009bc <__aeabi_dcmpeq>
 8004b4e:	b9c0      	cbnz	r0, 8004b82 <_printf_float+0x40e>
 8004b50:	4643      	mov	r3, r8
 8004b52:	463a      	mov	r2, r7
 8004b54:	4659      	mov	r1, fp
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b0      	blx	r6
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d10d      	bne.n	8004b7a <_printf_float+0x406>
 8004b5e:	e660      	b.n	8004822 <_printf_float+0xae>
 8004b60:	2301      	movs	r3, #1
 8004b62:	4642      	mov	r2, r8
 8004b64:	4659      	mov	r1, fp
 8004b66:	4628      	mov	r0, r5
 8004b68:	47b0      	blx	r6
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	f43f ae59 	beq.w	8004822 <_printf_float+0xae>
 8004b70:	3701      	adds	r7, #1
 8004b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b74:	3b01      	subs	r3, #1
 8004b76:	42bb      	cmp	r3, r7
 8004b78:	dcf2      	bgt.n	8004b60 <_printf_float+0x3ec>
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b80:	e6e4      	b.n	800494c <_printf_float+0x1d8>
 8004b82:	2700      	movs	r7, #0
 8004b84:	f104 081a 	add.w	r8, r4, #26
 8004b88:	e7f3      	b.n	8004b72 <_printf_float+0x3fe>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e7e1      	b.n	8004b52 <_printf_float+0x3de>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4642      	mov	r2, r8
 8004b92:	4659      	mov	r1, fp
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b0      	blx	r6
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f ae42 	beq.w	8004822 <_printf_float+0xae>
 8004b9e:	3701      	adds	r7, #1
 8004ba0:	68e3      	ldr	r3, [r4, #12]
 8004ba2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	42bb      	cmp	r3, r7
 8004ba8:	dcf1      	bgt.n	8004b8e <_printf_float+0x41a>
 8004baa:	e702      	b.n	80049b2 <_printf_float+0x23e>
 8004bac:	2700      	movs	r7, #0
 8004bae:	f104 0819 	add.w	r8, r4, #25
 8004bb2:	e7f5      	b.n	8004ba0 <_printf_float+0x42c>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f43f ae94 	beq.w	80048e2 <_printf_float+0x16e>
 8004bba:	f04f 0c00 	mov.w	ip, #0
 8004bbe:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004bc2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004bcc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	463a      	mov	r2, r7
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7ff fd3a 	bl	8004650 <__cvt>
 8004bdc:	4607      	mov	r7, r0
 8004bde:	e64f      	b.n	8004880 <_printf_float+0x10c>

08004be0 <_printf_common>:
 8004be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	4691      	mov	r9, r2
 8004be6:	461f      	mov	r7, r3
 8004be8:	688a      	ldr	r2, [r1, #8]
 8004bea:	690b      	ldr	r3, [r1, #16]
 8004bec:	4606      	mov	r6, r0
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	bfb8      	it	lt
 8004bf2:	4613      	movlt	r3, r2
 8004bf4:	f8c9 3000 	str.w	r3, [r9]
 8004bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c02:	b112      	cbz	r2, 8004c0a <_printf_common+0x2a>
 8004c04:	3301      	adds	r3, #1
 8004c06:	f8c9 3000 	str.w	r3, [r9]
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	0699      	lsls	r1, r3, #26
 8004c0e:	bf42      	ittt	mi
 8004c10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c14:	3302      	addmi	r3, #2
 8004c16:	f8c9 3000 	strmi.w	r3, [r9]
 8004c1a:	6825      	ldr	r5, [r4, #0]
 8004c1c:	f015 0506 	ands.w	r5, r5, #6
 8004c20:	d107      	bne.n	8004c32 <_printf_common+0x52>
 8004c22:	f104 0a19 	add.w	sl, r4, #25
 8004c26:	68e3      	ldr	r3, [r4, #12]
 8004c28:	f8d9 2000 	ldr.w	r2, [r9]
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	42ab      	cmp	r3, r5
 8004c30:	dc29      	bgt.n	8004c86 <_printf_common+0xa6>
 8004c32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	3300      	adds	r3, #0
 8004c3a:	bf18      	it	ne
 8004c3c:	2301      	movne	r3, #1
 8004c3e:	0692      	lsls	r2, r2, #26
 8004c40:	d42e      	bmi.n	8004ca0 <_printf_common+0xc0>
 8004c42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c46:	4639      	mov	r1, r7
 8004c48:	4630      	mov	r0, r6
 8004c4a:	47c0      	blx	r8
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d021      	beq.n	8004c94 <_printf_common+0xb4>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	68e5      	ldr	r5, [r4, #12]
 8004c54:	f003 0306 	and.w	r3, r3, #6
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	bf18      	it	ne
 8004c5c:	2500      	movne	r5, #0
 8004c5e:	f8d9 2000 	ldr.w	r2, [r9]
 8004c62:	f04f 0900 	mov.w	r9, #0
 8004c66:	bf08      	it	eq
 8004c68:	1aad      	subeq	r5, r5, r2
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	6922      	ldr	r2, [r4, #16]
 8004c6e:	bf08      	it	eq
 8004c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bfc4      	itt	gt
 8004c78:	1a9b      	subgt	r3, r3, r2
 8004c7a:	18ed      	addgt	r5, r5, r3
 8004c7c:	341a      	adds	r4, #26
 8004c7e:	454d      	cmp	r5, r9
 8004c80:	d11a      	bne.n	8004cb8 <_printf_common+0xd8>
 8004c82:	2000      	movs	r0, #0
 8004c84:	e008      	b.n	8004c98 <_printf_common+0xb8>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4652      	mov	r2, sl
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	47c0      	blx	r8
 8004c90:	3001      	adds	r0, #1
 8004c92:	d103      	bne.n	8004c9c <_printf_common+0xbc>
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9c:	3501      	adds	r5, #1
 8004c9e:	e7c2      	b.n	8004c26 <_printf_common+0x46>
 8004ca0:	2030      	movs	r0, #48	; 0x30
 8004ca2:	18e1      	adds	r1, r4, r3
 8004ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cae:	4422      	add	r2, r4
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cb6:	e7c4      	b.n	8004c42 <_printf_common+0x62>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4622      	mov	r2, r4
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	47c0      	blx	r8
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d0e6      	beq.n	8004c94 <_printf_common+0xb4>
 8004cc6:	f109 0901 	add.w	r9, r9, #1
 8004cca:	e7d8      	b.n	8004c7e <_printf_common+0x9e>

08004ccc <_printf_i>:
 8004ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	7e09      	ldrb	r1, [r1, #24]
 8004cd8:	b085      	sub	sp, #20
 8004cda:	296e      	cmp	r1, #110	; 0x6e
 8004cdc:	4617      	mov	r7, r2
 8004cde:	4606      	mov	r6, r0
 8004ce0:	4698      	mov	r8, r3
 8004ce2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ce4:	f000 80b3 	beq.w	8004e4e <_printf_i+0x182>
 8004ce8:	d822      	bhi.n	8004d30 <_printf_i+0x64>
 8004cea:	2963      	cmp	r1, #99	; 0x63
 8004cec:	d036      	beq.n	8004d5c <_printf_i+0x90>
 8004cee:	d80a      	bhi.n	8004d06 <_printf_i+0x3a>
 8004cf0:	2900      	cmp	r1, #0
 8004cf2:	f000 80b9 	beq.w	8004e68 <_printf_i+0x19c>
 8004cf6:	2958      	cmp	r1, #88	; 0x58
 8004cf8:	f000 8083 	beq.w	8004e02 <_printf_i+0x136>
 8004cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d04:	e032      	b.n	8004d6c <_printf_i+0xa0>
 8004d06:	2964      	cmp	r1, #100	; 0x64
 8004d08:	d001      	beq.n	8004d0e <_printf_i+0x42>
 8004d0a:	2969      	cmp	r1, #105	; 0x69
 8004d0c:	d1f6      	bne.n	8004cfc <_printf_i+0x30>
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	6813      	ldr	r3, [r2, #0]
 8004d12:	0605      	lsls	r5, r0, #24
 8004d14:	f103 0104 	add.w	r1, r3, #4
 8004d18:	d52a      	bpl.n	8004d70 <_printf_i+0xa4>
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6011      	str	r1, [r2, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da03      	bge.n	8004d2a <_printf_i+0x5e>
 8004d22:	222d      	movs	r2, #45	; 0x2d
 8004d24:	425b      	negs	r3, r3
 8004d26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d2a:	486f      	ldr	r0, [pc, #444]	; (8004ee8 <_printf_i+0x21c>)
 8004d2c:	220a      	movs	r2, #10
 8004d2e:	e039      	b.n	8004da4 <_printf_i+0xd8>
 8004d30:	2973      	cmp	r1, #115	; 0x73
 8004d32:	f000 809d 	beq.w	8004e70 <_printf_i+0x1a4>
 8004d36:	d808      	bhi.n	8004d4a <_printf_i+0x7e>
 8004d38:	296f      	cmp	r1, #111	; 0x6f
 8004d3a:	d020      	beq.n	8004d7e <_printf_i+0xb2>
 8004d3c:	2970      	cmp	r1, #112	; 0x70
 8004d3e:	d1dd      	bne.n	8004cfc <_printf_i+0x30>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	f043 0320 	orr.w	r3, r3, #32
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	e003      	b.n	8004d52 <_printf_i+0x86>
 8004d4a:	2975      	cmp	r1, #117	; 0x75
 8004d4c:	d017      	beq.n	8004d7e <_printf_i+0xb2>
 8004d4e:	2978      	cmp	r1, #120	; 0x78
 8004d50:	d1d4      	bne.n	8004cfc <_printf_i+0x30>
 8004d52:	2378      	movs	r3, #120	; 0x78
 8004d54:	4865      	ldr	r0, [pc, #404]	; (8004eec <_printf_i+0x220>)
 8004d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d5a:	e055      	b.n	8004e08 <_printf_i+0x13c>
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d62:	1d19      	adds	r1, r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6011      	str	r1, [r2, #0]
 8004d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e08c      	b.n	8004e8a <_printf_i+0x1be>
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d76:	6011      	str	r1, [r2, #0]
 8004d78:	bf18      	it	ne
 8004d7a:	b21b      	sxthne	r3, r3
 8004d7c:	e7cf      	b.n	8004d1e <_printf_i+0x52>
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	6825      	ldr	r5, [r4, #0]
 8004d82:	1d18      	adds	r0, r3, #4
 8004d84:	6010      	str	r0, [r2, #0]
 8004d86:	0628      	lsls	r0, r5, #24
 8004d88:	d501      	bpl.n	8004d8e <_printf_i+0xc2>
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	e002      	b.n	8004d94 <_printf_i+0xc8>
 8004d8e:	0668      	lsls	r0, r5, #25
 8004d90:	d5fb      	bpl.n	8004d8a <_printf_i+0xbe>
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	296f      	cmp	r1, #111	; 0x6f
 8004d96:	bf14      	ite	ne
 8004d98:	220a      	movne	r2, #10
 8004d9a:	2208      	moveq	r2, #8
 8004d9c:	4852      	ldr	r0, [pc, #328]	; (8004ee8 <_printf_i+0x21c>)
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004da4:	6865      	ldr	r5, [r4, #4]
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	60a5      	str	r5, [r4, #8]
 8004daa:	f2c0 8095 	blt.w	8004ed8 <_printf_i+0x20c>
 8004dae:	6821      	ldr	r1, [r4, #0]
 8004db0:	f021 0104 	bic.w	r1, r1, #4
 8004db4:	6021      	str	r1, [r4, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d13d      	bne.n	8004e36 <_printf_i+0x16a>
 8004dba:	2d00      	cmp	r5, #0
 8004dbc:	f040 808e 	bne.w	8004edc <_printf_i+0x210>
 8004dc0:	4665      	mov	r5, ip
 8004dc2:	2a08      	cmp	r2, #8
 8004dc4:	d10b      	bne.n	8004dde <_printf_i+0x112>
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	07db      	lsls	r3, r3, #31
 8004dca:	d508      	bpl.n	8004dde <_printf_i+0x112>
 8004dcc:	6923      	ldr	r3, [r4, #16]
 8004dce:	6862      	ldr	r2, [r4, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	bfde      	ittt	le
 8004dd4:	2330      	movle	r3, #48	; 0x30
 8004dd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dde:	ebac 0305 	sub.w	r3, ip, r5
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	f8cd 8000 	str.w	r8, [sp]
 8004de8:	463b      	mov	r3, r7
 8004dea:	aa03      	add	r2, sp, #12
 8004dec:	4621      	mov	r1, r4
 8004dee:	4630      	mov	r0, r6
 8004df0:	f7ff fef6 	bl	8004be0 <_printf_common>
 8004df4:	3001      	adds	r0, #1
 8004df6:	d14d      	bne.n	8004e94 <_printf_i+0x1c8>
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	b005      	add	sp, #20
 8004dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e02:	4839      	ldr	r0, [pc, #228]	; (8004ee8 <_printf_i+0x21c>)
 8004e04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e08:	6813      	ldr	r3, [r2, #0]
 8004e0a:	6821      	ldr	r1, [r4, #0]
 8004e0c:	1d1d      	adds	r5, r3, #4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6015      	str	r5, [r2, #0]
 8004e12:	060a      	lsls	r2, r1, #24
 8004e14:	d50b      	bpl.n	8004e2e <_printf_i+0x162>
 8004e16:	07ca      	lsls	r2, r1, #31
 8004e18:	bf44      	itt	mi
 8004e1a:	f041 0120 	orrmi.w	r1, r1, #32
 8004e1e:	6021      	strmi	r1, [r4, #0]
 8004e20:	b91b      	cbnz	r3, 8004e2a <_printf_i+0x15e>
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	f022 0220 	bic.w	r2, r2, #32
 8004e28:	6022      	str	r2, [r4, #0]
 8004e2a:	2210      	movs	r2, #16
 8004e2c:	e7b7      	b.n	8004d9e <_printf_i+0xd2>
 8004e2e:	064d      	lsls	r5, r1, #25
 8004e30:	bf48      	it	mi
 8004e32:	b29b      	uxthmi	r3, r3
 8004e34:	e7ef      	b.n	8004e16 <_printf_i+0x14a>
 8004e36:	4665      	mov	r5, ip
 8004e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e3c:	fb02 3311 	mls	r3, r2, r1, r3
 8004e40:	5cc3      	ldrb	r3, [r0, r3]
 8004e42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e46:	460b      	mov	r3, r1
 8004e48:	2900      	cmp	r1, #0
 8004e4a:	d1f5      	bne.n	8004e38 <_printf_i+0x16c>
 8004e4c:	e7b9      	b.n	8004dc2 <_printf_i+0xf6>
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	6825      	ldr	r5, [r4, #0]
 8004e52:	1d18      	adds	r0, r3, #4
 8004e54:	6961      	ldr	r1, [r4, #20]
 8004e56:	6010      	str	r0, [r2, #0]
 8004e58:	0628      	lsls	r0, r5, #24
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	d501      	bpl.n	8004e62 <_printf_i+0x196>
 8004e5e:	6019      	str	r1, [r3, #0]
 8004e60:	e002      	b.n	8004e68 <_printf_i+0x19c>
 8004e62:	066a      	lsls	r2, r5, #25
 8004e64:	d5fb      	bpl.n	8004e5e <_printf_i+0x192>
 8004e66:	8019      	strh	r1, [r3, #0]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4665      	mov	r5, ip
 8004e6c:	6123      	str	r3, [r4, #16]
 8004e6e:	e7b9      	b.n	8004de4 <_printf_i+0x118>
 8004e70:	6813      	ldr	r3, [r2, #0]
 8004e72:	1d19      	adds	r1, r3, #4
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	681d      	ldr	r5, [r3, #0]
 8004e78:	6862      	ldr	r2, [r4, #4]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f002 f915 	bl	80070ac <memchr>
 8004e82:	b108      	cbz	r0, 8004e88 <_printf_i+0x1bc>
 8004e84:	1b40      	subs	r0, r0, r5
 8004e86:	6060      	str	r0, [r4, #4]
 8004e88:	6863      	ldr	r3, [r4, #4]
 8004e8a:	6123      	str	r3, [r4, #16]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e92:	e7a7      	b.n	8004de4 <_printf_i+0x118>
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	462a      	mov	r2, r5
 8004e98:	4639      	mov	r1, r7
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	47c0      	blx	r8
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d0aa      	beq.n	8004df8 <_printf_i+0x12c>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	079b      	lsls	r3, r3, #30
 8004ea6:	d413      	bmi.n	8004ed0 <_printf_i+0x204>
 8004ea8:	68e0      	ldr	r0, [r4, #12]
 8004eaa:	9b03      	ldr	r3, [sp, #12]
 8004eac:	4298      	cmp	r0, r3
 8004eae:	bfb8      	it	lt
 8004eb0:	4618      	movlt	r0, r3
 8004eb2:	e7a3      	b.n	8004dfc <_printf_i+0x130>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	464a      	mov	r2, r9
 8004eb8:	4639      	mov	r1, r7
 8004eba:	4630      	mov	r0, r6
 8004ebc:	47c0      	blx	r8
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d09a      	beq.n	8004df8 <_printf_i+0x12c>
 8004ec2:	3501      	adds	r5, #1
 8004ec4:	68e3      	ldr	r3, [r4, #12]
 8004ec6:	9a03      	ldr	r2, [sp, #12]
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	42ab      	cmp	r3, r5
 8004ecc:	dcf2      	bgt.n	8004eb4 <_printf_i+0x1e8>
 8004ece:	e7eb      	b.n	8004ea8 <_printf_i+0x1dc>
 8004ed0:	2500      	movs	r5, #0
 8004ed2:	f104 0919 	add.w	r9, r4, #25
 8004ed6:	e7f5      	b.n	8004ec4 <_printf_i+0x1f8>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ac      	bne.n	8004e36 <_printf_i+0x16a>
 8004edc:	7803      	ldrb	r3, [r0, #0]
 8004ede:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee6:	e76c      	b.n	8004dc2 <_printf_i+0xf6>
 8004ee8:	08007f72 	.word	0x08007f72
 8004eec:	08007f83 	.word	0x08007f83

08004ef0 <siprintf>:
 8004ef0:	b40e      	push	{r1, r2, r3}
 8004ef2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ef6:	b500      	push	{lr}
 8004ef8:	b09c      	sub	sp, #112	; 0x70
 8004efa:	ab1d      	add	r3, sp, #116	; 0x74
 8004efc:	9002      	str	r0, [sp, #8]
 8004efe:	9006      	str	r0, [sp, #24]
 8004f00:	9107      	str	r1, [sp, #28]
 8004f02:	9104      	str	r1, [sp, #16]
 8004f04:	4808      	ldr	r0, [pc, #32]	; (8004f28 <siprintf+0x38>)
 8004f06:	4909      	ldr	r1, [pc, #36]	; (8004f2c <siprintf+0x3c>)
 8004f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0c:	9105      	str	r1, [sp, #20]
 8004f0e:	6800      	ldr	r0, [r0, #0]
 8004f10:	a902      	add	r1, sp, #8
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	f002 fdea 	bl	8007aec <_svfiprintf_r>
 8004f18:	2200      	movs	r2, #0
 8004f1a:	9b02      	ldr	r3, [sp, #8]
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	b01c      	add	sp, #112	; 0x70
 8004f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f24:	b003      	add	sp, #12
 8004f26:	4770      	bx	lr
 8004f28:	2000002c 	.word	0x2000002c
 8004f2c:	ffff0208 	.word	0xffff0208

08004f30 <strcpy>:
 8004f30:	4603      	mov	r3, r0
 8004f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f36:	f803 2b01 	strb.w	r2, [r3], #1
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	d1f9      	bne.n	8004f32 <strcpy+0x2>
 8004f3e:	4770      	bx	lr

08004f40 <sulp>:
 8004f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f44:	460f      	mov	r7, r1
 8004f46:	4690      	mov	r8, r2
 8004f48:	f002 fb94 	bl	8007674 <__ulp>
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	460d      	mov	r5, r1
 8004f50:	f1b8 0f00 	cmp.w	r8, #0
 8004f54:	d011      	beq.n	8004f7a <sulp+0x3a>
 8004f56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004f5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dd0b      	ble.n	8004f7a <sulp+0x3a>
 8004f62:	2400      	movs	r4, #0
 8004f64:	051b      	lsls	r3, r3, #20
 8004f66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004f6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004f6e:	4622      	mov	r2, r4
 8004f70:	462b      	mov	r3, r5
 8004f72:	f7fb fabb 	bl	80004ec <__aeabi_dmul>
 8004f76:	4604      	mov	r4, r0
 8004f78:	460d      	mov	r5, r1
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f82:	0000      	movs	r0, r0
 8004f84:	0000      	movs	r0, r0
	...

08004f88 <_strtod_l>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	461f      	mov	r7, r3
 8004f8e:	2300      	movs	r3, #0
 8004f90:	b0a1      	sub	sp, #132	; 0x84
 8004f92:	4683      	mov	fp, r0
 8004f94:	4638      	mov	r0, r7
 8004f96:	460e      	mov	r6, r1
 8004f98:	9217      	str	r2, [sp, #92]	; 0x5c
 8004f9a:	931c      	str	r3, [sp, #112]	; 0x70
 8004f9c:	f002 f85b 	bl	8007056 <__localeconv_l>
 8004fa0:	4680      	mov	r8, r0
 8004fa2:	6800      	ldr	r0, [r0, #0]
 8004fa4:	f7fb f8de 	bl	8000164 <strlen>
 8004fa8:	f04f 0900 	mov.w	r9, #0
 8004fac:	4604      	mov	r4, r0
 8004fae:	f04f 0a00 	mov.w	sl, #0
 8004fb2:	961b      	str	r6, [sp, #108]	; 0x6c
 8004fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	2a0d      	cmp	r2, #13
 8004fba:	d832      	bhi.n	8005022 <_strtod_l+0x9a>
 8004fbc:	2a09      	cmp	r2, #9
 8004fbe:	d236      	bcs.n	800502e <_strtod_l+0xa6>
 8004fc0:	2a00      	cmp	r2, #0
 8004fc2:	d03e      	beq.n	8005042 <_strtod_l+0xba>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8004fc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004fca:	782b      	ldrb	r3, [r5, #0]
 8004fcc:	2b30      	cmp	r3, #48	; 0x30
 8004fce:	f040 80ac 	bne.w	800512a <_strtod_l+0x1a2>
 8004fd2:	786b      	ldrb	r3, [r5, #1]
 8004fd4:	2b58      	cmp	r3, #88	; 0x58
 8004fd6:	d001      	beq.n	8004fdc <_strtod_l+0x54>
 8004fd8:	2b78      	cmp	r3, #120	; 0x78
 8004fda:	d167      	bne.n	80050ac <_strtod_l+0x124>
 8004fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fde:	9702      	str	r7, [sp, #8]
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	ab1c      	add	r3, sp, #112	; 0x70
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	4a89      	ldr	r2, [pc, #548]	; (800520c <_strtod_l+0x284>)
 8004fe8:	ab1d      	add	r3, sp, #116	; 0x74
 8004fea:	a91b      	add	r1, sp, #108	; 0x6c
 8004fec:	4658      	mov	r0, fp
 8004fee:	f001 fd57 	bl	8006aa0 <__gethex>
 8004ff2:	f010 0407 	ands.w	r4, r0, #7
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	d005      	beq.n	8005006 <_strtod_l+0x7e>
 8004ffa:	2c06      	cmp	r4, #6
 8004ffc:	d12b      	bne.n	8005056 <_strtod_l+0xce>
 8004ffe:	2300      	movs	r3, #0
 8005000:	3501      	adds	r5, #1
 8005002:	951b      	str	r5, [sp, #108]	; 0x6c
 8005004:	930d      	str	r3, [sp, #52]	; 0x34
 8005006:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005008:	2b00      	cmp	r3, #0
 800500a:	f040 85a6 	bne.w	8005b5a <_strtod_l+0xbd2>
 800500e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005010:	b1e3      	cbz	r3, 800504c <_strtod_l+0xc4>
 8005012:	464a      	mov	r2, r9
 8005014:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	b021      	add	sp, #132	; 0x84
 800501e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005022:	2a2b      	cmp	r2, #43	; 0x2b
 8005024:	d015      	beq.n	8005052 <_strtod_l+0xca>
 8005026:	2a2d      	cmp	r2, #45	; 0x2d
 8005028:	d004      	beq.n	8005034 <_strtod_l+0xac>
 800502a:	2a20      	cmp	r2, #32
 800502c:	d1ca      	bne.n	8004fc4 <_strtod_l+0x3c>
 800502e:	3301      	adds	r3, #1
 8005030:	931b      	str	r3, [sp, #108]	; 0x6c
 8005032:	e7bf      	b.n	8004fb4 <_strtod_l+0x2c>
 8005034:	2201      	movs	r2, #1
 8005036:	920d      	str	r2, [sp, #52]	; 0x34
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	921b      	str	r2, [sp, #108]	; 0x6c
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1c2      	bne.n	8004fc8 <_strtod_l+0x40>
 8005042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005044:	961b      	str	r6, [sp, #108]	; 0x6c
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 8585 	bne.w	8005b56 <_strtod_l+0xbce>
 800504c:	464a      	mov	r2, r9
 800504e:	4653      	mov	r3, sl
 8005050:	e7e2      	b.n	8005018 <_strtod_l+0x90>
 8005052:	2200      	movs	r2, #0
 8005054:	e7ef      	b.n	8005036 <_strtod_l+0xae>
 8005056:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005058:	b13a      	cbz	r2, 800506a <_strtod_l+0xe2>
 800505a:	2135      	movs	r1, #53	; 0x35
 800505c:	a81e      	add	r0, sp, #120	; 0x78
 800505e:	f002 fbfc 	bl	800785a <__copybits>
 8005062:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005064:	4658      	mov	r0, fp
 8005066:	f002 f86e 	bl	8007146 <_Bfree>
 800506a:	3c01      	subs	r4, #1
 800506c:	2c04      	cmp	r4, #4
 800506e:	d806      	bhi.n	800507e <_strtod_l+0xf6>
 8005070:	e8df f004 	tbb	[pc, r4]
 8005074:	1714030a 	.word	0x1714030a
 8005078:	0a          	.byte	0x0a
 8005079:	00          	.byte	0x00
 800507a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800507e:	0731      	lsls	r1, r6, #28
 8005080:	d5c1      	bpl.n	8005006 <_strtod_l+0x7e>
 8005082:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8005086:	e7be      	b.n	8005006 <_strtod_l+0x7e>
 8005088:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800508a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800508e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005096:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800509a:	e7f0      	b.n	800507e <_strtod_l+0xf6>
 800509c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005210 <_strtod_l+0x288>
 80050a0:	e7ed      	b.n	800507e <_strtod_l+0xf6>
 80050a2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80050a6:	f04f 39ff 	mov.w	r9, #4294967295
 80050aa:	e7e8      	b.n	800507e <_strtod_l+0xf6>
 80050ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b30      	cmp	r3, #48	; 0x30
 80050b6:	d0f9      	beq.n	80050ac <_strtod_l+0x124>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0a4      	beq.n	8005006 <_strtod_l+0x7e>
 80050bc:	2301      	movs	r3, #1
 80050be:	2500      	movs	r5, #0
 80050c0:	220a      	movs	r2, #10
 80050c2:	9307      	str	r3, [sp, #28]
 80050c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050c6:	9506      	str	r5, [sp, #24]
 80050c8:	9308      	str	r3, [sp, #32]
 80050ca:	9504      	str	r5, [sp, #16]
 80050cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80050ce:	7807      	ldrb	r7, [r0, #0]
 80050d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80050d4:	b2d9      	uxtb	r1, r3
 80050d6:	2909      	cmp	r1, #9
 80050d8:	d929      	bls.n	800512e <_strtod_l+0x1a6>
 80050da:	4622      	mov	r2, r4
 80050dc:	f8d8 1000 	ldr.w	r1, [r8]
 80050e0:	f002 fe0c 	bl	8007cfc <strncmp>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d031      	beq.n	800514c <_strtod_l+0x1c4>
 80050e8:	2000      	movs	r0, #0
 80050ea:	463b      	mov	r3, r7
 80050ec:	4602      	mov	r2, r0
 80050ee:	9c04      	ldr	r4, [sp, #16]
 80050f0:	9005      	str	r0, [sp, #20]
 80050f2:	2b65      	cmp	r3, #101	; 0x65
 80050f4:	d001      	beq.n	80050fa <_strtod_l+0x172>
 80050f6:	2b45      	cmp	r3, #69	; 0x45
 80050f8:	d114      	bne.n	8005124 <_strtod_l+0x19c>
 80050fa:	b924      	cbnz	r4, 8005106 <_strtod_l+0x17e>
 80050fc:	b910      	cbnz	r0, 8005104 <_strtod_l+0x17c>
 80050fe:	9b07      	ldr	r3, [sp, #28]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d09e      	beq.n	8005042 <_strtod_l+0xba>
 8005104:	2400      	movs	r4, #0
 8005106:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005108:	1c73      	adds	r3, r6, #1
 800510a:	931b      	str	r3, [sp, #108]	; 0x6c
 800510c:	7873      	ldrb	r3, [r6, #1]
 800510e:	2b2b      	cmp	r3, #43	; 0x2b
 8005110:	d078      	beq.n	8005204 <_strtod_l+0x27c>
 8005112:	2b2d      	cmp	r3, #45	; 0x2d
 8005114:	d070      	beq.n	80051f8 <_strtod_l+0x270>
 8005116:	f04f 0c00 	mov.w	ip, #0
 800511a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800511e:	2f09      	cmp	r7, #9
 8005120:	d97c      	bls.n	800521c <_strtod_l+0x294>
 8005122:	961b      	str	r6, [sp, #108]	; 0x6c
 8005124:	f04f 0e00 	mov.w	lr, #0
 8005128:	e09a      	b.n	8005260 <_strtod_l+0x2d8>
 800512a:	2300      	movs	r3, #0
 800512c:	e7c7      	b.n	80050be <_strtod_l+0x136>
 800512e:	9904      	ldr	r1, [sp, #16]
 8005130:	3001      	adds	r0, #1
 8005132:	2908      	cmp	r1, #8
 8005134:	bfd7      	itett	le
 8005136:	9906      	ldrle	r1, [sp, #24]
 8005138:	fb02 3505 	mlagt	r5, r2, r5, r3
 800513c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005140:	9306      	strle	r3, [sp, #24]
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	901b      	str	r0, [sp, #108]	; 0x6c
 8005146:	3301      	adds	r3, #1
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	e7bf      	b.n	80050cc <_strtod_l+0x144>
 800514c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800514e:	191a      	adds	r2, r3, r4
 8005150:	921b      	str	r2, [sp, #108]	; 0x6c
 8005152:	9a04      	ldr	r2, [sp, #16]
 8005154:	5d1b      	ldrb	r3, [r3, r4]
 8005156:	2a00      	cmp	r2, #0
 8005158:	d037      	beq.n	80051ca <_strtod_l+0x242>
 800515a:	4602      	mov	r2, r0
 800515c:	9c04      	ldr	r4, [sp, #16]
 800515e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005162:	2909      	cmp	r1, #9
 8005164:	d913      	bls.n	800518e <_strtod_l+0x206>
 8005166:	2101      	movs	r1, #1
 8005168:	9105      	str	r1, [sp, #20]
 800516a:	e7c2      	b.n	80050f2 <_strtod_l+0x16a>
 800516c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800516e:	3001      	adds	r0, #1
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	921b      	str	r2, [sp, #108]	; 0x6c
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b30      	cmp	r3, #48	; 0x30
 8005178:	d0f8      	beq.n	800516c <_strtod_l+0x1e4>
 800517a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800517e:	2a08      	cmp	r2, #8
 8005180:	f200 84f0 	bhi.w	8005b64 <_strtod_l+0xbdc>
 8005184:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005186:	9208      	str	r2, [sp, #32]
 8005188:	4602      	mov	r2, r0
 800518a:	2000      	movs	r0, #0
 800518c:	4604      	mov	r4, r0
 800518e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8005192:	f100 0101 	add.w	r1, r0, #1
 8005196:	d012      	beq.n	80051be <_strtod_l+0x236>
 8005198:	440a      	add	r2, r1
 800519a:	270a      	movs	r7, #10
 800519c:	4621      	mov	r1, r4
 800519e:	eb00 0c04 	add.w	ip, r0, r4
 80051a2:	458c      	cmp	ip, r1
 80051a4:	d113      	bne.n	80051ce <_strtod_l+0x246>
 80051a6:	1821      	adds	r1, r4, r0
 80051a8:	2908      	cmp	r1, #8
 80051aa:	f104 0401 	add.w	r4, r4, #1
 80051ae:	4404      	add	r4, r0
 80051b0:	dc19      	bgt.n	80051e6 <_strtod_l+0x25e>
 80051b2:	210a      	movs	r1, #10
 80051b4:	9b06      	ldr	r3, [sp, #24]
 80051b6:	fb01 e303 	mla	r3, r1, r3, lr
 80051ba:	9306      	str	r3, [sp, #24]
 80051bc:	2100      	movs	r1, #0
 80051be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051c0:	1c58      	adds	r0, r3, #1
 80051c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	4608      	mov	r0, r1
 80051c8:	e7c9      	b.n	800515e <_strtod_l+0x1d6>
 80051ca:	9804      	ldr	r0, [sp, #16]
 80051cc:	e7d3      	b.n	8005176 <_strtod_l+0x1ee>
 80051ce:	2908      	cmp	r1, #8
 80051d0:	f101 0101 	add.w	r1, r1, #1
 80051d4:	dc03      	bgt.n	80051de <_strtod_l+0x256>
 80051d6:	9b06      	ldr	r3, [sp, #24]
 80051d8:	437b      	muls	r3, r7
 80051da:	9306      	str	r3, [sp, #24]
 80051dc:	e7e1      	b.n	80051a2 <_strtod_l+0x21a>
 80051de:	2910      	cmp	r1, #16
 80051e0:	bfd8      	it	le
 80051e2:	437d      	mulle	r5, r7
 80051e4:	e7dd      	b.n	80051a2 <_strtod_l+0x21a>
 80051e6:	2c10      	cmp	r4, #16
 80051e8:	bfdc      	itt	le
 80051ea:	210a      	movle	r1, #10
 80051ec:	fb01 e505 	mlale	r5, r1, r5, lr
 80051f0:	e7e4      	b.n	80051bc <_strtod_l+0x234>
 80051f2:	2301      	movs	r3, #1
 80051f4:	9305      	str	r3, [sp, #20]
 80051f6:	e781      	b.n	80050fc <_strtod_l+0x174>
 80051f8:	f04f 0c01 	mov.w	ip, #1
 80051fc:	1cb3      	adds	r3, r6, #2
 80051fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8005200:	78b3      	ldrb	r3, [r6, #2]
 8005202:	e78a      	b.n	800511a <_strtod_l+0x192>
 8005204:	f04f 0c00 	mov.w	ip, #0
 8005208:	e7f8      	b.n	80051fc <_strtod_l+0x274>
 800520a:	bf00      	nop
 800520c:	08007f94 	.word	0x08007f94
 8005210:	7ff00000 	.word	0x7ff00000
 8005214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005216:	1c5f      	adds	r7, r3, #1
 8005218:	971b      	str	r7, [sp, #108]	; 0x6c
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	2b30      	cmp	r3, #48	; 0x30
 800521e:	d0f9      	beq.n	8005214 <_strtod_l+0x28c>
 8005220:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005224:	2f08      	cmp	r7, #8
 8005226:	f63f af7d 	bhi.w	8005124 <_strtod_l+0x19c>
 800522a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800522e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005234:	1c5f      	adds	r7, r3, #1
 8005236:	971b      	str	r7, [sp, #108]	; 0x6c
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800523e:	f1b8 0f09 	cmp.w	r8, #9
 8005242:	d937      	bls.n	80052b4 <_strtod_l+0x32c>
 8005244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005246:	1a7f      	subs	r7, r7, r1
 8005248:	2f08      	cmp	r7, #8
 800524a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800524e:	dc37      	bgt.n	80052c0 <_strtod_l+0x338>
 8005250:	45be      	cmp	lr, r7
 8005252:	bfa8      	it	ge
 8005254:	46be      	movge	lr, r7
 8005256:	f1bc 0f00 	cmp.w	ip, #0
 800525a:	d001      	beq.n	8005260 <_strtod_l+0x2d8>
 800525c:	f1ce 0e00 	rsb	lr, lr, #0
 8005260:	2c00      	cmp	r4, #0
 8005262:	d151      	bne.n	8005308 <_strtod_l+0x380>
 8005264:	2800      	cmp	r0, #0
 8005266:	f47f aece 	bne.w	8005006 <_strtod_l+0x7e>
 800526a:	9a07      	ldr	r2, [sp, #28]
 800526c:	2a00      	cmp	r2, #0
 800526e:	f47f aeca 	bne.w	8005006 <_strtod_l+0x7e>
 8005272:	9a05      	ldr	r2, [sp, #20]
 8005274:	2a00      	cmp	r2, #0
 8005276:	f47f aee4 	bne.w	8005042 <_strtod_l+0xba>
 800527a:	2b4e      	cmp	r3, #78	; 0x4e
 800527c:	d027      	beq.n	80052ce <_strtod_l+0x346>
 800527e:	dc21      	bgt.n	80052c4 <_strtod_l+0x33c>
 8005280:	2b49      	cmp	r3, #73	; 0x49
 8005282:	f47f aede 	bne.w	8005042 <_strtod_l+0xba>
 8005286:	49a4      	ldr	r1, [pc, #656]	; (8005518 <_strtod_l+0x590>)
 8005288:	a81b      	add	r0, sp, #108	; 0x6c
 800528a:	f001 fe3d 	bl	8006f08 <__match>
 800528e:	2800      	cmp	r0, #0
 8005290:	f43f aed7 	beq.w	8005042 <_strtod_l+0xba>
 8005294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005296:	49a1      	ldr	r1, [pc, #644]	; (800551c <_strtod_l+0x594>)
 8005298:	3b01      	subs	r3, #1
 800529a:	a81b      	add	r0, sp, #108	; 0x6c
 800529c:	931b      	str	r3, [sp, #108]	; 0x6c
 800529e:	f001 fe33 	bl	8006f08 <__match>
 80052a2:	b910      	cbnz	r0, 80052aa <_strtod_l+0x322>
 80052a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052a6:	3301      	adds	r3, #1
 80052a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80052aa:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005530 <_strtod_l+0x5a8>
 80052ae:	f04f 0900 	mov.w	r9, #0
 80052b2:	e6a8      	b.n	8005006 <_strtod_l+0x7e>
 80052b4:	210a      	movs	r1, #10
 80052b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80052ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80052be:	e7b8      	b.n	8005232 <_strtod_l+0x2aa>
 80052c0:	46be      	mov	lr, r7
 80052c2:	e7c8      	b.n	8005256 <_strtod_l+0x2ce>
 80052c4:	2b69      	cmp	r3, #105	; 0x69
 80052c6:	d0de      	beq.n	8005286 <_strtod_l+0x2fe>
 80052c8:	2b6e      	cmp	r3, #110	; 0x6e
 80052ca:	f47f aeba 	bne.w	8005042 <_strtod_l+0xba>
 80052ce:	4994      	ldr	r1, [pc, #592]	; (8005520 <_strtod_l+0x598>)
 80052d0:	a81b      	add	r0, sp, #108	; 0x6c
 80052d2:	f001 fe19 	bl	8006f08 <__match>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f43f aeb3 	beq.w	8005042 <_strtod_l+0xba>
 80052dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b28      	cmp	r3, #40	; 0x28
 80052e2:	d10e      	bne.n	8005302 <_strtod_l+0x37a>
 80052e4:	aa1e      	add	r2, sp, #120	; 0x78
 80052e6:	498f      	ldr	r1, [pc, #572]	; (8005524 <_strtod_l+0x59c>)
 80052e8:	a81b      	add	r0, sp, #108	; 0x6c
 80052ea:	f001 fe21 	bl	8006f30 <__hexnan>
 80052ee:	2805      	cmp	r0, #5
 80052f0:	d107      	bne.n	8005302 <_strtod_l+0x37a>
 80052f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052f4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80052f8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80052fc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005300:	e681      	b.n	8005006 <_strtod_l+0x7e>
 8005302:	f8df a234 	ldr.w	sl, [pc, #564]	; 8005538 <_strtod_l+0x5b0>
 8005306:	e7d2      	b.n	80052ae <_strtod_l+0x326>
 8005308:	ebae 0302 	sub.w	r3, lr, r2
 800530c:	9307      	str	r3, [sp, #28]
 800530e:	9b04      	ldr	r3, [sp, #16]
 8005310:	9806      	ldr	r0, [sp, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf08      	it	eq
 8005316:	4623      	moveq	r3, r4
 8005318:	2c10      	cmp	r4, #16
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	46a0      	mov	r8, r4
 800531e:	bfa8      	it	ge
 8005320:	f04f 0810 	movge.w	r8, #16
 8005324:	f7fb f868 	bl	80003f8 <__aeabi_ui2d>
 8005328:	2c09      	cmp	r4, #9
 800532a:	4681      	mov	r9, r0
 800532c:	468a      	mov	sl, r1
 800532e:	dc13      	bgt.n	8005358 <_strtod_l+0x3d0>
 8005330:	9b07      	ldr	r3, [sp, #28]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f43f ae67 	beq.w	8005006 <_strtod_l+0x7e>
 8005338:	9b07      	ldr	r3, [sp, #28]
 800533a:	dd7e      	ble.n	800543a <_strtod_l+0x4b2>
 800533c:	2b16      	cmp	r3, #22
 800533e:	dc65      	bgt.n	800540c <_strtod_l+0x484>
 8005340:	4a79      	ldr	r2, [pc, #484]	; (8005528 <_strtod_l+0x5a0>)
 8005342:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005346:	464a      	mov	r2, r9
 8005348:	e9de 0100 	ldrd	r0, r1, [lr]
 800534c:	4653      	mov	r3, sl
 800534e:	f7fb f8cd 	bl	80004ec <__aeabi_dmul>
 8005352:	4681      	mov	r9, r0
 8005354:	468a      	mov	sl, r1
 8005356:	e656      	b.n	8005006 <_strtod_l+0x7e>
 8005358:	4b73      	ldr	r3, [pc, #460]	; (8005528 <_strtod_l+0x5a0>)
 800535a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800535e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005362:	f7fb f8c3 	bl	80004ec <__aeabi_dmul>
 8005366:	4606      	mov	r6, r0
 8005368:	4628      	mov	r0, r5
 800536a:	460f      	mov	r7, r1
 800536c:	f7fb f844 	bl	80003f8 <__aeabi_ui2d>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4630      	mov	r0, r6
 8005376:	4639      	mov	r1, r7
 8005378:	f7fa ff02 	bl	8000180 <__adddf3>
 800537c:	2c0f      	cmp	r4, #15
 800537e:	4681      	mov	r9, r0
 8005380:	468a      	mov	sl, r1
 8005382:	ddd5      	ble.n	8005330 <_strtod_l+0x3a8>
 8005384:	9b07      	ldr	r3, [sp, #28]
 8005386:	eba4 0808 	sub.w	r8, r4, r8
 800538a:	4498      	add	r8, r3
 800538c:	f1b8 0f00 	cmp.w	r8, #0
 8005390:	f340 809a 	ble.w	80054c8 <_strtod_l+0x540>
 8005394:	f018 030f 	ands.w	r3, r8, #15
 8005398:	d00a      	beq.n	80053b0 <_strtod_l+0x428>
 800539a:	4963      	ldr	r1, [pc, #396]	; (8005528 <_strtod_l+0x5a0>)
 800539c:	464a      	mov	r2, r9
 800539e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80053a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053a6:	4653      	mov	r3, sl
 80053a8:	f7fb f8a0 	bl	80004ec <__aeabi_dmul>
 80053ac:	4681      	mov	r9, r0
 80053ae:	468a      	mov	sl, r1
 80053b0:	f038 080f 	bics.w	r8, r8, #15
 80053b4:	d077      	beq.n	80054a6 <_strtod_l+0x51e>
 80053b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80053ba:	dd4b      	ble.n	8005454 <_strtod_l+0x4cc>
 80053bc:	f04f 0800 	mov.w	r8, #0
 80053c0:	f8cd 8010 	str.w	r8, [sp, #16]
 80053c4:	f8cd 8020 	str.w	r8, [sp, #32]
 80053c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80053cc:	2322      	movs	r3, #34	; 0x22
 80053ce:	f04f 0900 	mov.w	r9, #0
 80053d2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8005530 <_strtod_l+0x5a8>
 80053d6:	f8cb 3000 	str.w	r3, [fp]
 80053da:	9b08      	ldr	r3, [sp, #32]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f43f ae12 	beq.w	8005006 <_strtod_l+0x7e>
 80053e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053e4:	4658      	mov	r0, fp
 80053e6:	f001 feae 	bl	8007146 <_Bfree>
 80053ea:	9906      	ldr	r1, [sp, #24]
 80053ec:	4658      	mov	r0, fp
 80053ee:	f001 feaa 	bl	8007146 <_Bfree>
 80053f2:	9904      	ldr	r1, [sp, #16]
 80053f4:	4658      	mov	r0, fp
 80053f6:	f001 fea6 	bl	8007146 <_Bfree>
 80053fa:	9908      	ldr	r1, [sp, #32]
 80053fc:	4658      	mov	r0, fp
 80053fe:	f001 fea2 	bl	8007146 <_Bfree>
 8005402:	4641      	mov	r1, r8
 8005404:	4658      	mov	r0, fp
 8005406:	f001 fe9e 	bl	8007146 <_Bfree>
 800540a:	e5fc      	b.n	8005006 <_strtod_l+0x7e>
 800540c:	9a07      	ldr	r2, [sp, #28]
 800540e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005412:	4293      	cmp	r3, r2
 8005414:	dbb6      	blt.n	8005384 <_strtod_l+0x3fc>
 8005416:	4d44      	ldr	r5, [pc, #272]	; (8005528 <_strtod_l+0x5a0>)
 8005418:	f1c4 040f 	rsb	r4, r4, #15
 800541c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005420:	464a      	mov	r2, r9
 8005422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005426:	4653      	mov	r3, sl
 8005428:	f7fb f860 	bl	80004ec <__aeabi_dmul>
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	1b1c      	subs	r4, r3, r4
 8005430:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005438:	e789      	b.n	800534e <_strtod_l+0x3c6>
 800543a:	f113 0f16 	cmn.w	r3, #22
 800543e:	dba1      	blt.n	8005384 <_strtod_l+0x3fc>
 8005440:	4a39      	ldr	r2, [pc, #228]	; (8005528 <_strtod_l+0x5a0>)
 8005442:	4648      	mov	r0, r9
 8005444:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005448:	e9d2 2300 	ldrd	r2, r3, [r2]
 800544c:	4651      	mov	r1, sl
 800544e:	f7fb f977 	bl	8000740 <__aeabi_ddiv>
 8005452:	e77e      	b.n	8005352 <_strtod_l+0x3ca>
 8005454:	2300      	movs	r3, #0
 8005456:	4648      	mov	r0, r9
 8005458:	4651      	mov	r1, sl
 800545a:	461d      	mov	r5, r3
 800545c:	4e33      	ldr	r6, [pc, #204]	; (800552c <_strtod_l+0x5a4>)
 800545e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005462:	f1b8 0f01 	cmp.w	r8, #1
 8005466:	dc21      	bgt.n	80054ac <_strtod_l+0x524>
 8005468:	b10b      	cbz	r3, 800546e <_strtod_l+0x4e6>
 800546a:	4681      	mov	r9, r0
 800546c:	468a      	mov	sl, r1
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <_strtod_l+0x5a4>)
 8005470:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8005474:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005478:	464a      	mov	r2, r9
 800547a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800547e:	4653      	mov	r3, sl
 8005480:	f7fb f834 	bl	80004ec <__aeabi_dmul>
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <_strtod_l+0x5a8>)
 8005486:	460a      	mov	r2, r1
 8005488:	400b      	ands	r3, r1
 800548a:	492a      	ldr	r1, [pc, #168]	; (8005534 <_strtod_l+0x5ac>)
 800548c:	4681      	mov	r9, r0
 800548e:	428b      	cmp	r3, r1
 8005490:	d894      	bhi.n	80053bc <_strtod_l+0x434>
 8005492:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005496:	428b      	cmp	r3, r1
 8005498:	bf86      	itte	hi
 800549a:	f04f 39ff 	movhi.w	r9, #4294967295
 800549e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800553c <_strtod_l+0x5b4>
 80054a2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80054a6:	2300      	movs	r3, #0
 80054a8:	9305      	str	r3, [sp, #20]
 80054aa:	e07b      	b.n	80055a4 <_strtod_l+0x61c>
 80054ac:	f018 0f01 	tst.w	r8, #1
 80054b0:	d006      	beq.n	80054c0 <_strtod_l+0x538>
 80054b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f7fb f817 	bl	80004ec <__aeabi_dmul>
 80054be:	2301      	movs	r3, #1
 80054c0:	3501      	adds	r5, #1
 80054c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80054c6:	e7cc      	b.n	8005462 <_strtod_l+0x4da>
 80054c8:	d0ed      	beq.n	80054a6 <_strtod_l+0x51e>
 80054ca:	f1c8 0800 	rsb	r8, r8, #0
 80054ce:	f018 020f 	ands.w	r2, r8, #15
 80054d2:	d00a      	beq.n	80054ea <_strtod_l+0x562>
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <_strtod_l+0x5a0>)
 80054d6:	4648      	mov	r0, r9
 80054d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054dc:	4651      	mov	r1, sl
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fb f92d 	bl	8000740 <__aeabi_ddiv>
 80054e6:	4681      	mov	r9, r0
 80054e8:	468a      	mov	sl, r1
 80054ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 80054ee:	d0da      	beq.n	80054a6 <_strtod_l+0x51e>
 80054f0:	f1b8 0f1f 	cmp.w	r8, #31
 80054f4:	dd24      	ble.n	8005540 <_strtod_l+0x5b8>
 80054f6:	f04f 0800 	mov.w	r8, #0
 80054fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80054fe:	f8cd 8020 	str.w	r8, [sp, #32]
 8005502:	f8cd 8018 	str.w	r8, [sp, #24]
 8005506:	2322      	movs	r3, #34	; 0x22
 8005508:	f04f 0900 	mov.w	r9, #0
 800550c:	f04f 0a00 	mov.w	sl, #0
 8005510:	f8cb 3000 	str.w	r3, [fp]
 8005514:	e761      	b.n	80053da <_strtod_l+0x452>
 8005516:	bf00      	nop
 8005518:	08007f65 	.word	0x08007f65
 800551c:	08007feb 	.word	0x08007feb
 8005520:	08007f6d 	.word	0x08007f6d
 8005524:	08007fa8 	.word	0x08007fa8
 8005528:	08008028 	.word	0x08008028
 800552c:	08008000 	.word	0x08008000
 8005530:	7ff00000 	.word	0x7ff00000
 8005534:	7ca00000 	.word	0x7ca00000
 8005538:	fff80000 	.word	0xfff80000
 800553c:	7fefffff 	.word	0x7fefffff
 8005540:	f018 0310 	ands.w	r3, r8, #16
 8005544:	bf18      	it	ne
 8005546:	236a      	movne	r3, #106	; 0x6a
 8005548:	4648      	mov	r0, r9
 800554a:	9305      	str	r3, [sp, #20]
 800554c:	4651      	mov	r1, sl
 800554e:	2300      	movs	r3, #0
 8005550:	4da1      	ldr	r5, [pc, #644]	; (80057d8 <_strtod_l+0x850>)
 8005552:	f1b8 0f00 	cmp.w	r8, #0
 8005556:	f300 8113 	bgt.w	8005780 <_strtod_l+0x7f8>
 800555a:	b10b      	cbz	r3, 8005560 <_strtod_l+0x5d8>
 800555c:	4681      	mov	r9, r0
 800555e:	468a      	mov	sl, r1
 8005560:	9b05      	ldr	r3, [sp, #20]
 8005562:	b1bb      	cbz	r3, 8005594 <_strtod_l+0x60c>
 8005564:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8005568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800556c:	2b00      	cmp	r3, #0
 800556e:	4651      	mov	r1, sl
 8005570:	dd10      	ble.n	8005594 <_strtod_l+0x60c>
 8005572:	2b1f      	cmp	r3, #31
 8005574:	f340 8110 	ble.w	8005798 <_strtod_l+0x810>
 8005578:	2b34      	cmp	r3, #52	; 0x34
 800557a:	bfd8      	it	le
 800557c:	f04f 32ff 	movle.w	r2, #4294967295
 8005580:	f04f 0900 	mov.w	r9, #0
 8005584:	bfcf      	iteee	gt
 8005586:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800558a:	3b20      	suble	r3, #32
 800558c:	fa02 f303 	lslle.w	r3, r2, r3
 8005590:	ea03 0a01 	andle.w	sl, r3, r1
 8005594:	2200      	movs	r2, #0
 8005596:	2300      	movs	r3, #0
 8005598:	4648      	mov	r0, r9
 800559a:	4651      	mov	r1, sl
 800559c:	f7fb fa0e 	bl	80009bc <__aeabi_dcmpeq>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d1a8      	bne.n	80054f6 <_strtod_l+0x56e>
 80055a4:	9b06      	ldr	r3, [sp, #24]
 80055a6:	9a04      	ldr	r2, [sp, #16]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	9908      	ldr	r1, [sp, #32]
 80055ac:	4623      	mov	r3, r4
 80055ae:	4658      	mov	r0, fp
 80055b0:	f001 fe1b 	bl	80071ea <__s2b>
 80055b4:	9008      	str	r0, [sp, #32]
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f43f af00 	beq.w	80053bc <_strtod_l+0x434>
 80055bc:	9a07      	ldr	r2, [sp, #28]
 80055be:	9b07      	ldr	r3, [sp, #28]
 80055c0:	2a00      	cmp	r2, #0
 80055c2:	f1c3 0300 	rsb	r3, r3, #0
 80055c6:	bfa8      	it	ge
 80055c8:	2300      	movge	r3, #0
 80055ca:	f04f 0800 	mov.w	r8, #0
 80055ce:	930e      	str	r3, [sp, #56]	; 0x38
 80055d0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80055d4:	9316      	str	r3, [sp, #88]	; 0x58
 80055d6:	f8cd 8010 	str.w	r8, [sp, #16]
 80055da:	9b08      	ldr	r3, [sp, #32]
 80055dc:	4658      	mov	r0, fp
 80055de:	6859      	ldr	r1, [r3, #4]
 80055e0:	f001 fd7d 	bl	80070de <_Balloc>
 80055e4:	9006      	str	r0, [sp, #24]
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f43f aef0 	beq.w	80053cc <_strtod_l+0x444>
 80055ec:	9b08      	ldr	r3, [sp, #32]
 80055ee:	300c      	adds	r0, #12
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	f103 010c 	add.w	r1, r3, #12
 80055f6:	3202      	adds	r2, #2
 80055f8:	0092      	lsls	r2, r2, #2
 80055fa:	f001 fd65 	bl	80070c8 <memcpy>
 80055fe:	ab1e      	add	r3, sp, #120	; 0x78
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	ab1d      	add	r3, sp, #116	; 0x74
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	464a      	mov	r2, r9
 8005608:	4653      	mov	r3, sl
 800560a:	4658      	mov	r0, fp
 800560c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005610:	f002 f8a6 	bl	8007760 <__d2b>
 8005614:	901c      	str	r0, [sp, #112]	; 0x70
 8005616:	2800      	cmp	r0, #0
 8005618:	f43f aed8 	beq.w	80053cc <_strtod_l+0x444>
 800561c:	2101      	movs	r1, #1
 800561e:	4658      	mov	r0, fp
 8005620:	f001 fe6f 	bl	8007302 <__i2b>
 8005624:	9004      	str	r0, [sp, #16]
 8005626:	4603      	mov	r3, r0
 8005628:	2800      	cmp	r0, #0
 800562a:	f43f aecf 	beq.w	80053cc <_strtod_l+0x444>
 800562e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005630:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005632:	2d00      	cmp	r5, #0
 8005634:	bfab      	itete	ge
 8005636:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005638:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800563a:	18ee      	addge	r6, r5, r3
 800563c:	1b5c      	sublt	r4, r3, r5
 800563e:	9b05      	ldr	r3, [sp, #20]
 8005640:	bfa8      	it	ge
 8005642:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005644:	eba5 0503 	sub.w	r5, r5, r3
 8005648:	4415      	add	r5, r2
 800564a:	4b64      	ldr	r3, [pc, #400]	; (80057dc <_strtod_l+0x854>)
 800564c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005650:	bfb8      	it	lt
 8005652:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005654:	429d      	cmp	r5, r3
 8005656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800565a:	f280 80af 	bge.w	80057bc <_strtod_l+0x834>
 800565e:	1b5b      	subs	r3, r3, r5
 8005660:	2b1f      	cmp	r3, #31
 8005662:	eba2 0203 	sub.w	r2, r2, r3
 8005666:	f04f 0701 	mov.w	r7, #1
 800566a:	f300 809c 	bgt.w	80057a6 <_strtod_l+0x81e>
 800566e:	2500      	movs	r5, #0
 8005670:	fa07 f303 	lsl.w	r3, r7, r3
 8005674:	930f      	str	r3, [sp, #60]	; 0x3c
 8005676:	18b7      	adds	r7, r6, r2
 8005678:	9b05      	ldr	r3, [sp, #20]
 800567a:	42be      	cmp	r6, r7
 800567c:	4414      	add	r4, r2
 800567e:	441c      	add	r4, r3
 8005680:	4633      	mov	r3, r6
 8005682:	bfa8      	it	ge
 8005684:	463b      	movge	r3, r7
 8005686:	42a3      	cmp	r3, r4
 8005688:	bfa8      	it	ge
 800568a:	4623      	movge	r3, r4
 800568c:	2b00      	cmp	r3, #0
 800568e:	bfc2      	ittt	gt
 8005690:	1aff      	subgt	r7, r7, r3
 8005692:	1ae4      	subgt	r4, r4, r3
 8005694:	1af6      	subgt	r6, r6, r3
 8005696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005698:	b1bb      	cbz	r3, 80056ca <_strtod_l+0x742>
 800569a:	461a      	mov	r2, r3
 800569c:	9904      	ldr	r1, [sp, #16]
 800569e:	4658      	mov	r0, fp
 80056a0:	f001 fece 	bl	8007440 <__pow5mult>
 80056a4:	9004      	str	r0, [sp, #16]
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f43f ae90 	beq.w	80053cc <_strtod_l+0x444>
 80056ac:	4601      	mov	r1, r0
 80056ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056b0:	4658      	mov	r0, fp
 80056b2:	f001 fe2f 	bl	8007314 <__multiply>
 80056b6:	9009      	str	r0, [sp, #36]	; 0x24
 80056b8:	2800      	cmp	r0, #0
 80056ba:	f43f ae87 	beq.w	80053cc <_strtod_l+0x444>
 80056be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80056c0:	4658      	mov	r0, fp
 80056c2:	f001 fd40 	bl	8007146 <_Bfree>
 80056c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c8:	931c      	str	r3, [sp, #112]	; 0x70
 80056ca:	2f00      	cmp	r7, #0
 80056cc:	dc7a      	bgt.n	80057c4 <_strtod_l+0x83c>
 80056ce:	9b07      	ldr	r3, [sp, #28]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	dd08      	ble.n	80056e6 <_strtod_l+0x75e>
 80056d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80056d6:	9906      	ldr	r1, [sp, #24]
 80056d8:	4658      	mov	r0, fp
 80056da:	f001 feb1 	bl	8007440 <__pow5mult>
 80056de:	9006      	str	r0, [sp, #24]
 80056e0:	2800      	cmp	r0, #0
 80056e2:	f43f ae73 	beq.w	80053cc <_strtod_l+0x444>
 80056e6:	2c00      	cmp	r4, #0
 80056e8:	dd08      	ble.n	80056fc <_strtod_l+0x774>
 80056ea:	4622      	mov	r2, r4
 80056ec:	9906      	ldr	r1, [sp, #24]
 80056ee:	4658      	mov	r0, fp
 80056f0:	f001 fef4 	bl	80074dc <__lshift>
 80056f4:	9006      	str	r0, [sp, #24]
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f43f ae68 	beq.w	80053cc <_strtod_l+0x444>
 80056fc:	2e00      	cmp	r6, #0
 80056fe:	dd08      	ble.n	8005712 <_strtod_l+0x78a>
 8005700:	4632      	mov	r2, r6
 8005702:	9904      	ldr	r1, [sp, #16]
 8005704:	4658      	mov	r0, fp
 8005706:	f001 fee9 	bl	80074dc <__lshift>
 800570a:	9004      	str	r0, [sp, #16]
 800570c:	2800      	cmp	r0, #0
 800570e:	f43f ae5d 	beq.w	80053cc <_strtod_l+0x444>
 8005712:	9a06      	ldr	r2, [sp, #24]
 8005714:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005716:	4658      	mov	r0, fp
 8005718:	f001 ff4e 	bl	80075b8 <__mdiff>
 800571c:	4680      	mov	r8, r0
 800571e:	2800      	cmp	r0, #0
 8005720:	f43f ae54 	beq.w	80053cc <_strtod_l+0x444>
 8005724:	2400      	movs	r4, #0
 8005726:	68c3      	ldr	r3, [r0, #12]
 8005728:	9904      	ldr	r1, [sp, #16]
 800572a:	60c4      	str	r4, [r0, #12]
 800572c:	930c      	str	r3, [sp, #48]	; 0x30
 800572e:	f001 ff29 	bl	8007584 <__mcmp>
 8005732:	42a0      	cmp	r0, r4
 8005734:	da54      	bge.n	80057e0 <_strtod_l+0x858>
 8005736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005738:	b9f3      	cbnz	r3, 8005778 <_strtod_l+0x7f0>
 800573a:	f1b9 0f00 	cmp.w	r9, #0
 800573e:	d11b      	bne.n	8005778 <_strtod_l+0x7f0>
 8005740:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005744:	b9c3      	cbnz	r3, 8005778 <_strtod_l+0x7f0>
 8005746:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800574a:	0d1b      	lsrs	r3, r3, #20
 800574c:	051b      	lsls	r3, r3, #20
 800574e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005752:	d911      	bls.n	8005778 <_strtod_l+0x7f0>
 8005754:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005758:	b91b      	cbnz	r3, 8005762 <_strtod_l+0x7da>
 800575a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800575e:	2b01      	cmp	r3, #1
 8005760:	dd0a      	ble.n	8005778 <_strtod_l+0x7f0>
 8005762:	4641      	mov	r1, r8
 8005764:	2201      	movs	r2, #1
 8005766:	4658      	mov	r0, fp
 8005768:	f001 feb8 	bl	80074dc <__lshift>
 800576c:	9904      	ldr	r1, [sp, #16]
 800576e:	4680      	mov	r8, r0
 8005770:	f001 ff08 	bl	8007584 <__mcmp>
 8005774:	2800      	cmp	r0, #0
 8005776:	dc68      	bgt.n	800584a <_strtod_l+0x8c2>
 8005778:	9b05      	ldr	r3, [sp, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d172      	bne.n	8005864 <_strtod_l+0x8dc>
 800577e:	e630      	b.n	80053e2 <_strtod_l+0x45a>
 8005780:	f018 0f01 	tst.w	r8, #1
 8005784:	d004      	beq.n	8005790 <_strtod_l+0x808>
 8005786:	e9d5 2300 	ldrd	r2, r3, [r5]
 800578a:	f7fa feaf 	bl	80004ec <__aeabi_dmul>
 800578e:	2301      	movs	r3, #1
 8005790:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005794:	3508      	adds	r5, #8
 8005796:	e6dc      	b.n	8005552 <_strtod_l+0x5ca>
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	ea03 0909 	and.w	r9, r3, r9
 80057a4:	e6f6      	b.n	8005594 <_strtod_l+0x60c>
 80057a6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80057aa:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80057ae:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80057b2:	35e2      	adds	r5, #226	; 0xe2
 80057b4:	fa07 f505 	lsl.w	r5, r7, r5
 80057b8:	970f      	str	r7, [sp, #60]	; 0x3c
 80057ba:	e75c      	b.n	8005676 <_strtod_l+0x6ee>
 80057bc:	2301      	movs	r3, #1
 80057be:	2500      	movs	r5, #0
 80057c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80057c2:	e758      	b.n	8005676 <_strtod_l+0x6ee>
 80057c4:	463a      	mov	r2, r7
 80057c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057c8:	4658      	mov	r0, fp
 80057ca:	f001 fe87 	bl	80074dc <__lshift>
 80057ce:	901c      	str	r0, [sp, #112]	; 0x70
 80057d0:	2800      	cmp	r0, #0
 80057d2:	f47f af7c 	bne.w	80056ce <_strtod_l+0x746>
 80057d6:	e5f9      	b.n	80053cc <_strtod_l+0x444>
 80057d8:	08007fc0 	.word	0x08007fc0
 80057dc:	fffffc02 	.word	0xfffffc02
 80057e0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80057e4:	f040 8089 	bne.w	80058fa <_strtod_l+0x972>
 80057e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057ea:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80057ee:	b342      	cbz	r2, 8005842 <_strtod_l+0x8ba>
 80057f0:	4aaf      	ldr	r2, [pc, #700]	; (8005ab0 <_strtod_l+0xb28>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d156      	bne.n	80058a4 <_strtod_l+0x91c>
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	4648      	mov	r0, r9
 80057fa:	b1eb      	cbz	r3, 8005838 <_strtod_l+0x8b0>
 80057fc:	4653      	mov	r3, sl
 80057fe:	4aad      	ldr	r2, [pc, #692]	; (8005ab4 <_strtod_l+0xb2c>)
 8005800:	f04f 31ff 	mov.w	r1, #4294967295
 8005804:	401a      	ands	r2, r3
 8005806:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800580a:	d818      	bhi.n	800583e <_strtod_l+0x8b6>
 800580c:	0d12      	lsrs	r2, r2, #20
 800580e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	4298      	cmp	r0, r3
 8005818:	d144      	bne.n	80058a4 <_strtod_l+0x91c>
 800581a:	4ba7      	ldr	r3, [pc, #668]	; (8005ab8 <_strtod_l+0xb30>)
 800581c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800581e:	429a      	cmp	r2, r3
 8005820:	d102      	bne.n	8005828 <_strtod_l+0x8a0>
 8005822:	3001      	adds	r0, #1
 8005824:	f43f add2 	beq.w	80053cc <_strtod_l+0x444>
 8005828:	4ba2      	ldr	r3, [pc, #648]	; (8005ab4 <_strtod_l+0xb2c>)
 800582a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800582c:	f04f 0900 	mov.w	r9, #0
 8005830:	401a      	ands	r2, r3
 8005832:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8005836:	e79f      	b.n	8005778 <_strtod_l+0x7f0>
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	e7eb      	b.n	8005816 <_strtod_l+0x88e>
 800583e:	460b      	mov	r3, r1
 8005840:	e7e9      	b.n	8005816 <_strtod_l+0x88e>
 8005842:	bb7b      	cbnz	r3, 80058a4 <_strtod_l+0x91c>
 8005844:	f1b9 0f00 	cmp.w	r9, #0
 8005848:	d12c      	bne.n	80058a4 <_strtod_l+0x91c>
 800584a:	9905      	ldr	r1, [sp, #20]
 800584c:	4653      	mov	r3, sl
 800584e:	4a99      	ldr	r2, [pc, #612]	; (8005ab4 <_strtod_l+0xb2c>)
 8005850:	b1f1      	cbz	r1, 8005890 <_strtod_l+0x908>
 8005852:	ea02 010a 	and.w	r1, r2, sl
 8005856:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800585a:	dc19      	bgt.n	8005890 <_strtod_l+0x908>
 800585c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005860:	f77f ae51 	ble.w	8005506 <_strtod_l+0x57e>
 8005864:	2300      	movs	r3, #0
 8005866:	4a95      	ldr	r2, [pc, #596]	; (8005abc <_strtod_l+0xb34>)
 8005868:	4648      	mov	r0, r9
 800586a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800586e:	4651      	mov	r1, sl
 8005870:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005874:	f7fa fe3a 	bl	80004ec <__aeabi_dmul>
 8005878:	4681      	mov	r9, r0
 800587a:	468a      	mov	sl, r1
 800587c:	2900      	cmp	r1, #0
 800587e:	f47f adb0 	bne.w	80053e2 <_strtod_l+0x45a>
 8005882:	2800      	cmp	r0, #0
 8005884:	f47f adad 	bne.w	80053e2 <_strtod_l+0x45a>
 8005888:	2322      	movs	r3, #34	; 0x22
 800588a:	f8cb 3000 	str.w	r3, [fp]
 800588e:	e5a8      	b.n	80053e2 <_strtod_l+0x45a>
 8005890:	4013      	ands	r3, r2
 8005892:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005896:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800589a:	f04f 39ff 	mov.w	r9, #4294967295
 800589e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80058a2:	e769      	b.n	8005778 <_strtod_l+0x7f0>
 80058a4:	b19d      	cbz	r5, 80058ce <_strtod_l+0x946>
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	421d      	tst	r5, r3
 80058aa:	f43f af65 	beq.w	8005778 <_strtod_l+0x7f0>
 80058ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058b0:	9a05      	ldr	r2, [sp, #20]
 80058b2:	4648      	mov	r0, r9
 80058b4:	4651      	mov	r1, sl
 80058b6:	b173      	cbz	r3, 80058d6 <_strtod_l+0x94e>
 80058b8:	f7ff fb42 	bl	8004f40 <sulp>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058c4:	f7fa fc5c 	bl	8000180 <__adddf3>
 80058c8:	4681      	mov	r9, r0
 80058ca:	468a      	mov	sl, r1
 80058cc:	e754      	b.n	8005778 <_strtod_l+0x7f0>
 80058ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058d0:	ea13 0f09 	tst.w	r3, r9
 80058d4:	e7e9      	b.n	80058aa <_strtod_l+0x922>
 80058d6:	f7ff fb33 	bl	8004f40 <sulp>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058e2:	f7fa fc4b 	bl	800017c <__aeabi_dsub>
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4681      	mov	r9, r0
 80058ec:	468a      	mov	sl, r1
 80058ee:	f7fb f865 	bl	80009bc <__aeabi_dcmpeq>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f47f ae07 	bne.w	8005506 <_strtod_l+0x57e>
 80058f8:	e73e      	b.n	8005778 <_strtod_l+0x7f0>
 80058fa:	9904      	ldr	r1, [sp, #16]
 80058fc:	4640      	mov	r0, r8
 80058fe:	f001 ff7e 	bl	80077fe <__ratio>
 8005902:	2200      	movs	r2, #0
 8005904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005908:	4606      	mov	r6, r0
 800590a:	460f      	mov	r7, r1
 800590c:	f7fb f86a 	bl	80009e4 <__aeabi_dcmple>
 8005910:	2800      	cmp	r0, #0
 8005912:	d075      	beq.n	8005a00 <_strtod_l+0xa78>
 8005914:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005916:	2b00      	cmp	r3, #0
 8005918:	d047      	beq.n	80059aa <_strtod_l+0xa22>
 800591a:	2600      	movs	r6, #0
 800591c:	4f68      	ldr	r7, [pc, #416]	; (8005ac0 <_strtod_l+0xb38>)
 800591e:	4d68      	ldr	r5, [pc, #416]	; (8005ac0 <_strtod_l+0xb38>)
 8005920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005922:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005926:	0d1b      	lsrs	r3, r3, #20
 8005928:	051b      	lsls	r3, r3, #20
 800592a:	930f      	str	r3, [sp, #60]	; 0x3c
 800592c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800592e:	4b65      	ldr	r3, [pc, #404]	; (8005ac4 <_strtod_l+0xb3c>)
 8005930:	429a      	cmp	r2, r3
 8005932:	f040 80cf 	bne.w	8005ad4 <_strtod_l+0xb4c>
 8005936:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800593a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005940:	4648      	mov	r0, r9
 8005942:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8005946:	4651      	mov	r1, sl
 8005948:	f001 fe94 	bl	8007674 <__ulp>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fa fdca 	bl	80004ec <__aeabi_dmul>
 8005958:	464a      	mov	r2, r9
 800595a:	4653      	mov	r3, sl
 800595c:	f7fa fc10 	bl	8000180 <__adddf3>
 8005960:	460b      	mov	r3, r1
 8005962:	4954      	ldr	r1, [pc, #336]	; (8005ab4 <_strtod_l+0xb2c>)
 8005964:	4a58      	ldr	r2, [pc, #352]	; (8005ac8 <_strtod_l+0xb40>)
 8005966:	4019      	ands	r1, r3
 8005968:	4291      	cmp	r1, r2
 800596a:	4681      	mov	r9, r0
 800596c:	d95e      	bls.n	8005a2c <_strtod_l+0xaa4>
 800596e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005970:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005974:	4293      	cmp	r3, r2
 8005976:	d103      	bne.n	8005980 <_strtod_l+0x9f8>
 8005978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597a:	3301      	adds	r3, #1
 800597c:	f43f ad26 	beq.w	80053cc <_strtod_l+0x444>
 8005980:	f04f 39ff 	mov.w	r9, #4294967295
 8005984:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005ab8 <_strtod_l+0xb30>
 8005988:	991c      	ldr	r1, [sp, #112]	; 0x70
 800598a:	4658      	mov	r0, fp
 800598c:	f001 fbdb 	bl	8007146 <_Bfree>
 8005990:	9906      	ldr	r1, [sp, #24]
 8005992:	4658      	mov	r0, fp
 8005994:	f001 fbd7 	bl	8007146 <_Bfree>
 8005998:	9904      	ldr	r1, [sp, #16]
 800599a:	4658      	mov	r0, fp
 800599c:	f001 fbd3 	bl	8007146 <_Bfree>
 80059a0:	4641      	mov	r1, r8
 80059a2:	4658      	mov	r0, fp
 80059a4:	f001 fbcf 	bl	8007146 <_Bfree>
 80059a8:	e617      	b.n	80055da <_strtod_l+0x652>
 80059aa:	f1b9 0f00 	cmp.w	r9, #0
 80059ae:	d119      	bne.n	80059e4 <_strtod_l+0xa5c>
 80059b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059b6:	b9e3      	cbnz	r3, 80059f2 <_strtod_l+0xa6a>
 80059b8:	2200      	movs	r2, #0
 80059ba:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <_strtod_l+0xb38>)
 80059bc:	4630      	mov	r0, r6
 80059be:	4639      	mov	r1, r7
 80059c0:	f7fb f806 	bl	80009d0 <__aeabi_dcmplt>
 80059c4:	b9c8      	cbnz	r0, 80059fa <_strtod_l+0xa72>
 80059c6:	2200      	movs	r2, #0
 80059c8:	4b40      	ldr	r3, [pc, #256]	; (8005acc <_strtod_l+0xb44>)
 80059ca:	4630      	mov	r0, r6
 80059cc:	4639      	mov	r1, r7
 80059ce:	f7fa fd8d 	bl	80004ec <__aeabi_dmul>
 80059d2:	4604      	mov	r4, r0
 80059d4:	460d      	mov	r5, r1
 80059d6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80059da:	9418      	str	r4, [sp, #96]	; 0x60
 80059dc:	9319      	str	r3, [sp, #100]	; 0x64
 80059de:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80059e2:	e79d      	b.n	8005920 <_strtod_l+0x998>
 80059e4:	f1b9 0f01 	cmp.w	r9, #1
 80059e8:	d103      	bne.n	80059f2 <_strtod_l+0xa6a>
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f43f ad8a 	beq.w	8005506 <_strtod_l+0x57e>
 80059f2:	2600      	movs	r6, #0
 80059f4:	4f36      	ldr	r7, [pc, #216]	; (8005ad0 <_strtod_l+0xb48>)
 80059f6:	2400      	movs	r4, #0
 80059f8:	e791      	b.n	800591e <_strtod_l+0x996>
 80059fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80059fc:	4d33      	ldr	r5, [pc, #204]	; (8005acc <_strtod_l+0xb44>)
 80059fe:	e7ea      	b.n	80059d6 <_strtod_l+0xa4e>
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <_strtod_l+0xb44>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	4630      	mov	r0, r6
 8005a06:	4639      	mov	r1, r7
 8005a08:	f7fa fd70 	bl	80004ec <__aeabi_dmul>
 8005a0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a0e:	4604      	mov	r4, r0
 8005a10:	460d      	mov	r5, r1
 8005a12:	b933      	cbnz	r3, 8005a22 <_strtod_l+0xa9a>
 8005a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a18:	9010      	str	r0, [sp, #64]	; 0x40
 8005a1a:	9311      	str	r3, [sp, #68]	; 0x44
 8005a1c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a20:	e77e      	b.n	8005920 <_strtod_l+0x998>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005a2a:	e7f7      	b.n	8005a1c <_strtod_l+0xa94>
 8005a2c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005a30:	9b05      	ldr	r3, [sp, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1a8      	bne.n	8005988 <_strtod_l+0xa00>
 8005a36:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a3a:	0d1b      	lsrs	r3, r3, #20
 8005a3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a3e:	051b      	lsls	r3, r3, #20
 8005a40:	429a      	cmp	r2, r3
 8005a42:	4656      	mov	r6, sl
 8005a44:	d1a0      	bne.n	8005988 <_strtod_l+0xa00>
 8005a46:	4629      	mov	r1, r5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7fa ffff 	bl	8000a4c <__aeabi_d2iz>
 8005a4e:	f7fa fce3 	bl	8000418 <__aeabi_i2d>
 8005a52:	460b      	mov	r3, r1
 8005a54:	4602      	mov	r2, r0
 8005a56:	4629      	mov	r1, r5
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f7fa fb8f 	bl	800017c <__aeabi_dsub>
 8005a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a60:	4604      	mov	r4, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	b933      	cbnz	r3, 8005a74 <_strtod_l+0xaec>
 8005a66:	f1b9 0f00 	cmp.w	r9, #0
 8005a6a:	d103      	bne.n	8005a74 <_strtod_l+0xaec>
 8005a6c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005a70:	2e00      	cmp	r6, #0
 8005a72:	d06a      	beq.n	8005b4a <_strtod_l+0xbc2>
 8005a74:	a30a      	add	r3, pc, #40	; (adr r3, 8005aa0 <_strtod_l+0xb18>)
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	4629      	mov	r1, r5
 8005a7e:	f7fa ffa7 	bl	80009d0 <__aeabi_dcmplt>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	f47f acad 	bne.w	80053e2 <_strtod_l+0x45a>
 8005a88:	a307      	add	r3, pc, #28	; (adr r3, 8005aa8 <_strtod_l+0xb20>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4629      	mov	r1, r5
 8005a92:	f7fa ffbb 	bl	8000a0c <__aeabi_dcmpgt>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f43f af76 	beq.w	8005988 <_strtod_l+0xa00>
 8005a9c:	e4a1      	b.n	80053e2 <_strtod_l+0x45a>
 8005a9e:	bf00      	nop
 8005aa0:	94a03595 	.word	0x94a03595
 8005aa4:	3fdfffff 	.word	0x3fdfffff
 8005aa8:	35afe535 	.word	0x35afe535
 8005aac:	3fe00000 	.word	0x3fe00000
 8005ab0:	000fffff 	.word	0x000fffff
 8005ab4:	7ff00000 	.word	0x7ff00000
 8005ab8:	7fefffff 	.word	0x7fefffff
 8005abc:	39500000 	.word	0x39500000
 8005ac0:	3ff00000 	.word	0x3ff00000
 8005ac4:	7fe00000 	.word	0x7fe00000
 8005ac8:	7c9fffff 	.word	0x7c9fffff
 8005acc:	3fe00000 	.word	0x3fe00000
 8005ad0:	bff00000 	.word	0xbff00000
 8005ad4:	9b05      	ldr	r3, [sp, #20]
 8005ad6:	b313      	cbz	r3, 8005b1e <_strtod_l+0xb96>
 8005ad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ada:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005ade:	d81e      	bhi.n	8005b1e <_strtod_l+0xb96>
 8005ae0:	a325      	add	r3, pc, #148	; (adr r3, 8005b78 <_strtod_l+0xbf0>)
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	f7fa ff7b 	bl	80009e4 <__aeabi_dcmple>
 8005aee:	b190      	cbz	r0, 8005b16 <_strtod_l+0xb8e>
 8005af0:	4629      	mov	r1, r5
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7fa ffd2 	bl	8000a9c <__aeabi_d2uiz>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	bf08      	it	eq
 8005afc:	2001      	moveq	r0, #1
 8005afe:	f7fa fc7b 	bl	80003f8 <__aeabi_ui2d>
 8005b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b04:	4604      	mov	r4, r0
 8005b06:	460d      	mov	r5, r1
 8005b08:	b9d3      	cbnz	r3, 8005b40 <_strtod_l+0xbb8>
 8005b0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b0e:	9012      	str	r0, [sp, #72]	; 0x48
 8005b10:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b12:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005b16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b18:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005b1c:	1a9f      	subs	r7, r3, r2
 8005b1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b22:	f001 fda7 	bl	8007674 <__ulp>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fcdd 	bl	80004ec <__aeabi_dmul>
 8005b32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b36:	f7fa fb23 	bl	8000180 <__adddf3>
 8005b3a:	4681      	mov	r9, r0
 8005b3c:	468a      	mov	sl, r1
 8005b3e:	e777      	b.n	8005a30 <_strtod_l+0xaa8>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005b48:	e7e3      	b.n	8005b12 <_strtod_l+0xb8a>
 8005b4a:	a30d      	add	r3, pc, #52	; (adr r3, 8005b80 <_strtod_l+0xbf8>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa ff3e 	bl	80009d0 <__aeabi_dcmplt>
 8005b54:	e79f      	b.n	8005a96 <_strtod_l+0xb0e>
 8005b56:	2300      	movs	r3, #0
 8005b58:	930d      	str	r3, [sp, #52]	; 0x34
 8005b5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b5e:	6013      	str	r3, [r2, #0]
 8005b60:	f7ff ba55 	b.w	800500e <_strtod_l+0x86>
 8005b64:	2b65      	cmp	r3, #101	; 0x65
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f43f ab42 	beq.w	80051f2 <_strtod_l+0x26a>
 8005b6e:	2101      	movs	r1, #1
 8005b70:	4614      	mov	r4, r2
 8005b72:	9105      	str	r1, [sp, #20]
 8005b74:	f7ff babf 	b.w	80050f6 <_strtod_l+0x16e>
 8005b78:	ffc00000 	.word	0xffc00000
 8005b7c:	41dfffff 	.word	0x41dfffff
 8005b80:	94a03595 	.word	0x94a03595
 8005b84:	3fcfffff 	.word	0x3fcfffff

08005b88 <strtod>:
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <strtod+0x1c>)
 8005b8a:	b410      	push	{r4}
 8005b8c:	681c      	ldr	r4, [r3, #0]
 8005b8e:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <strtod+0x20>)
 8005b90:	6a23      	ldr	r3, [r4, #32]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	bf08      	it	eq
 8005b96:	4613      	moveq	r3, r2
 8005b98:	460a      	mov	r2, r1
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	bc10      	pop	{r4}
 8005ba0:	f7ff b9f2 	b.w	8004f88 <_strtod_l>
 8005ba4:	2000002c 	.word	0x2000002c
 8005ba8:	20000090 	.word	0x20000090

08005bac <strtok>:
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <strtok+0x50>)
 8005bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb2:	681d      	ldr	r5, [r3, #0]
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005bb8:	460f      	mov	r7, r1
 8005bba:	b9b4      	cbnz	r4, 8005bea <strtok+0x3e>
 8005bbc:	2050      	movs	r0, #80	; 0x50
 8005bbe:	f001 fa5b 	bl	8007078 <malloc>
 8005bc2:	65a8      	str	r0, [r5, #88]	; 0x58
 8005bc4:	e9c0 4400 	strd	r4, r4, [r0]
 8005bc8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005bcc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005bd0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005bd4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005bd8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005bdc:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005be0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005be4:	6184      	str	r4, [r0, #24]
 8005be6:	7704      	strb	r4, [r0, #28]
 8005be8:	6244      	str	r4, [r0, #36]	; 0x24
 8005bea:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005bec:	4639      	mov	r1, r7
 8005bee:	4630      	mov	r0, r6
 8005bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f000 b803 	b.w	8005c00 <__strtok_r>
 8005bfa:	bf00      	nop
 8005bfc:	2000002c 	.word	0x2000002c

08005c00 <__strtok_r>:
 8005c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c02:	b918      	cbnz	r0, 8005c0c <__strtok_r+0xc>
 8005c04:	6810      	ldr	r0, [r2, #0]
 8005c06:	b908      	cbnz	r0, 8005c0c <__strtok_r+0xc>
 8005c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	460f      	mov	r7, r1
 8005c10:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005c14:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c18:	b91e      	cbnz	r6, 8005c22 <__strtok_r+0x22>
 8005c1a:	b96d      	cbnz	r5, 8005c38 <__strtok_r+0x38>
 8005c1c:	6015      	str	r5, [r2, #0]
 8005c1e:	4628      	mov	r0, r5
 8005c20:	e7f2      	b.n	8005c08 <__strtok_r+0x8>
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d1f6      	bne.n	8005c14 <__strtok_r+0x14>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1ef      	bne.n	8005c0a <__strtok_r+0xa>
 8005c2a:	6014      	str	r4, [r2, #0]
 8005c2c:	7003      	strb	r3, [r0, #0]
 8005c2e:	e7eb      	b.n	8005c08 <__strtok_r+0x8>
 8005c30:	462b      	mov	r3, r5
 8005c32:	e00d      	b.n	8005c50 <__strtok_r+0x50>
 8005c34:	b926      	cbnz	r6, 8005c40 <__strtok_r+0x40>
 8005c36:	461c      	mov	r4, r3
 8005c38:	4623      	mov	r3, r4
 8005c3a:	460f      	mov	r7, r1
 8005c3c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005c40:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c44:	42b5      	cmp	r5, r6
 8005c46:	d1f5      	bne.n	8005c34 <__strtok_r+0x34>
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d0f1      	beq.n	8005c30 <__strtok_r+0x30>
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	7021      	strb	r1, [r4, #0]
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	e7d9      	b.n	8005c08 <__strtok_r+0x8>

08005c54 <_strtol_l.isra.0>:
 8005c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c58:	4680      	mov	r8, r0
 8005c5a:	4689      	mov	r9, r1
 8005c5c:	4692      	mov	sl, r2
 8005c5e:	461e      	mov	r6, r3
 8005c60:	460f      	mov	r7, r1
 8005c62:	463d      	mov	r5, r7
 8005c64:	9808      	ldr	r0, [sp, #32]
 8005c66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c6a:	f001 f9f1 	bl	8007050 <__locale_ctype_ptr_l>
 8005c6e:	4420      	add	r0, r4
 8005c70:	7843      	ldrb	r3, [r0, #1]
 8005c72:	f013 0308 	ands.w	r3, r3, #8
 8005c76:	d132      	bne.n	8005cde <_strtol_l.isra.0+0x8a>
 8005c78:	2c2d      	cmp	r4, #45	; 0x2d
 8005c7a:	d132      	bne.n	8005ce2 <_strtol_l.isra.0+0x8e>
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	787c      	ldrb	r4, [r7, #1]
 8005c80:	1cbd      	adds	r5, r7, #2
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	d05d      	beq.n	8005d42 <_strtol_l.isra.0+0xee>
 8005c86:	2e10      	cmp	r6, #16
 8005c88:	d109      	bne.n	8005c9e <_strtol_l.isra.0+0x4a>
 8005c8a:	2c30      	cmp	r4, #48	; 0x30
 8005c8c:	d107      	bne.n	8005c9e <_strtol_l.isra.0+0x4a>
 8005c8e:	782b      	ldrb	r3, [r5, #0]
 8005c90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c94:	2b58      	cmp	r3, #88	; 0x58
 8005c96:	d14f      	bne.n	8005d38 <_strtol_l.isra.0+0xe4>
 8005c98:	2610      	movs	r6, #16
 8005c9a:	786c      	ldrb	r4, [r5, #1]
 8005c9c:	3502      	adds	r5, #2
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	bf14      	ite	ne
 8005ca2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005ca6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005caa:	2700      	movs	r7, #0
 8005cac:	fbb1 fcf6 	udiv	ip, r1, r6
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005cb6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005cba:	2b09      	cmp	r3, #9
 8005cbc:	d817      	bhi.n	8005cee <_strtol_l.isra.0+0x9a>
 8005cbe:	461c      	mov	r4, r3
 8005cc0:	42a6      	cmp	r6, r4
 8005cc2:	dd23      	ble.n	8005d0c <_strtol_l.isra.0+0xb8>
 8005cc4:	1c7b      	adds	r3, r7, #1
 8005cc6:	d007      	beq.n	8005cd8 <_strtol_l.isra.0+0x84>
 8005cc8:	4584      	cmp	ip, r0
 8005cca:	d31c      	bcc.n	8005d06 <_strtol_l.isra.0+0xb2>
 8005ccc:	d101      	bne.n	8005cd2 <_strtol_l.isra.0+0x7e>
 8005cce:	45a6      	cmp	lr, r4
 8005cd0:	db19      	blt.n	8005d06 <_strtol_l.isra.0+0xb2>
 8005cd2:	2701      	movs	r7, #1
 8005cd4:	fb00 4006 	mla	r0, r0, r6, r4
 8005cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cdc:	e7eb      	b.n	8005cb6 <_strtol_l.isra.0+0x62>
 8005cde:	462f      	mov	r7, r5
 8005ce0:	e7bf      	b.n	8005c62 <_strtol_l.isra.0+0xe>
 8005ce2:	2c2b      	cmp	r4, #43	; 0x2b
 8005ce4:	bf04      	itt	eq
 8005ce6:	1cbd      	addeq	r5, r7, #2
 8005ce8:	787c      	ldrbeq	r4, [r7, #1]
 8005cea:	461a      	mov	r2, r3
 8005cec:	e7c9      	b.n	8005c82 <_strtol_l.isra.0+0x2e>
 8005cee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005cf2:	2b19      	cmp	r3, #25
 8005cf4:	d801      	bhi.n	8005cfa <_strtol_l.isra.0+0xa6>
 8005cf6:	3c37      	subs	r4, #55	; 0x37
 8005cf8:	e7e2      	b.n	8005cc0 <_strtol_l.isra.0+0x6c>
 8005cfa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005cfe:	2b19      	cmp	r3, #25
 8005d00:	d804      	bhi.n	8005d0c <_strtol_l.isra.0+0xb8>
 8005d02:	3c57      	subs	r4, #87	; 0x57
 8005d04:	e7dc      	b.n	8005cc0 <_strtol_l.isra.0+0x6c>
 8005d06:	f04f 37ff 	mov.w	r7, #4294967295
 8005d0a:	e7e5      	b.n	8005cd8 <_strtol_l.isra.0+0x84>
 8005d0c:	1c7b      	adds	r3, r7, #1
 8005d0e:	d108      	bne.n	8005d22 <_strtol_l.isra.0+0xce>
 8005d10:	2322      	movs	r3, #34	; 0x22
 8005d12:	4608      	mov	r0, r1
 8005d14:	f8c8 3000 	str.w	r3, [r8]
 8005d18:	f1ba 0f00 	cmp.w	sl, #0
 8005d1c:	d107      	bne.n	8005d2e <_strtol_l.isra.0+0xda>
 8005d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d22:	b102      	cbz	r2, 8005d26 <_strtol_l.isra.0+0xd2>
 8005d24:	4240      	negs	r0, r0
 8005d26:	f1ba 0f00 	cmp.w	sl, #0
 8005d2a:	d0f8      	beq.n	8005d1e <_strtol_l.isra.0+0xca>
 8005d2c:	b10f      	cbz	r7, 8005d32 <_strtol_l.isra.0+0xde>
 8005d2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8005d32:	f8ca 9000 	str.w	r9, [sl]
 8005d36:	e7f2      	b.n	8005d1e <_strtol_l.isra.0+0xca>
 8005d38:	2430      	movs	r4, #48	; 0x30
 8005d3a:	2e00      	cmp	r6, #0
 8005d3c:	d1af      	bne.n	8005c9e <_strtol_l.isra.0+0x4a>
 8005d3e:	2608      	movs	r6, #8
 8005d40:	e7ad      	b.n	8005c9e <_strtol_l.isra.0+0x4a>
 8005d42:	2c30      	cmp	r4, #48	; 0x30
 8005d44:	d0a3      	beq.n	8005c8e <_strtol_l.isra.0+0x3a>
 8005d46:	260a      	movs	r6, #10
 8005d48:	e7a9      	b.n	8005c9e <_strtol_l.isra.0+0x4a>
	...

08005d4c <strtol>:
 8005d4c:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <strtol+0x24>)
 8005d4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d50:	681c      	ldr	r4, [r3, #0]
 8005d52:	4d08      	ldr	r5, [pc, #32]	; (8005d74 <strtol+0x28>)
 8005d54:	6a23      	ldr	r3, [r4, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf08      	it	eq
 8005d5a:	462b      	moveq	r3, r5
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	460a      	mov	r2, r1
 8005d62:	4601      	mov	r1, r0
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7ff ff75 	bl	8005c54 <_strtol_l.isra.0>
 8005d6a:	b003      	add	sp, #12
 8005d6c:	bd30      	pop	{r4, r5, pc}
 8005d6e:	bf00      	nop
 8005d70:	2000002c 	.word	0x2000002c
 8005d74:	20000090 	.word	0x20000090

08005d78 <quorem>:
 8005d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	6903      	ldr	r3, [r0, #16]
 8005d7e:	690c      	ldr	r4, [r1, #16]
 8005d80:	4680      	mov	r8, r0
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	f2c0 8084 	blt.w	8005e90 <quorem+0x118>
 8005d88:	3c01      	subs	r4, #1
 8005d8a:	f101 0714 	add.w	r7, r1, #20
 8005d8e:	f100 0614 	add.w	r6, r0, #20
 8005d92:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d9a:	3501      	adds	r5, #1
 8005d9c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005da0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005da4:	eb06 030c 	add.w	r3, r6, ip
 8005da8:	eb07 090c 	add.w	r9, r7, ip
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	b39d      	cbz	r5, 8005e18 <quorem+0xa0>
 8005db0:	f04f 0a00 	mov.w	sl, #0
 8005db4:	4638      	mov	r0, r7
 8005db6:	46b6      	mov	lr, r6
 8005db8:	46d3      	mov	fp, sl
 8005dba:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dbe:	b293      	uxth	r3, r2
 8005dc0:	fb05 a303 	mla	r3, r5, r3, sl
 8005dc4:	0c12      	lsrs	r2, r2, #16
 8005dc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dca:	fb05 a202 	mla	r2, r5, r2, sl
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ebab 0303 	sub.w	r3, fp, r3
 8005dd4:	f8de b000 	ldr.w	fp, [lr]
 8005dd8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005ddc:	fa1f fb8b 	uxth.w	fp, fp
 8005de0:	445b      	add	r3, fp
 8005de2:	fa1f fb82 	uxth.w	fp, r2
 8005de6:	f8de 2000 	ldr.w	r2, [lr]
 8005dea:	4581      	cmp	r9, r0
 8005dec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dfa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005dfe:	f84e 3b04 	str.w	r3, [lr], #4
 8005e02:	d2da      	bcs.n	8005dba <quorem+0x42>
 8005e04:	f856 300c 	ldr.w	r3, [r6, ip]
 8005e08:	b933      	cbnz	r3, 8005e18 <quorem+0xa0>
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	429e      	cmp	r6, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	d331      	bcc.n	8005e78 <quorem+0x100>
 8005e14:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e18:	4640      	mov	r0, r8
 8005e1a:	f001 fbb3 	bl	8007584 <__mcmp>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	db26      	blt.n	8005e70 <quorem+0xf8>
 8005e22:	4630      	mov	r0, r6
 8005e24:	f04f 0c00 	mov.w	ip, #0
 8005e28:	3501      	adds	r5, #1
 8005e2a:	f857 1b04 	ldr.w	r1, [r7], #4
 8005e2e:	f8d0 e000 	ldr.w	lr, [r0]
 8005e32:	b28b      	uxth	r3, r1
 8005e34:	ebac 0303 	sub.w	r3, ip, r3
 8005e38:	fa1f f28e 	uxth.w	r2, lr
 8005e3c:	4413      	add	r3, r2
 8005e3e:	0c0a      	lsrs	r2, r1, #16
 8005e40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e4e:	45b9      	cmp	r9, r7
 8005e50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e54:	f840 3b04 	str.w	r3, [r0], #4
 8005e58:	d2e7      	bcs.n	8005e2a <quorem+0xb2>
 8005e5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005e5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005e62:	b92a      	cbnz	r2, 8005e70 <quorem+0xf8>
 8005e64:	3b04      	subs	r3, #4
 8005e66:	429e      	cmp	r6, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	d30b      	bcc.n	8005e84 <quorem+0x10c>
 8005e6c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e70:	4628      	mov	r0, r5
 8005e72:	b003      	add	sp, #12
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	3b04      	subs	r3, #4
 8005e7c:	2a00      	cmp	r2, #0
 8005e7e:	d1c9      	bne.n	8005e14 <quorem+0x9c>
 8005e80:	3c01      	subs	r4, #1
 8005e82:	e7c4      	b.n	8005e0e <quorem+0x96>
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	3b04      	subs	r3, #4
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	d1ef      	bne.n	8005e6c <quorem+0xf4>
 8005e8c:	3c01      	subs	r4, #1
 8005e8e:	e7ea      	b.n	8005e66 <quorem+0xee>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e7ee      	b.n	8005e72 <quorem+0xfa>
 8005e94:	0000      	movs	r0, r0
	...

08005e98 <_dtoa_r>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	4616      	mov	r6, r2
 8005e9e:	461f      	mov	r7, r3
 8005ea0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ea2:	b095      	sub	sp, #84	; 0x54
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005eaa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005eae:	b93d      	cbnz	r5, 8005ec0 <_dtoa_r+0x28>
 8005eb0:	2010      	movs	r0, #16
 8005eb2:	f001 f8e1 	bl	8007078 <malloc>
 8005eb6:	6260      	str	r0, [r4, #36]	; 0x24
 8005eb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ebc:	6005      	str	r5, [r0, #0]
 8005ebe:	60c5      	str	r5, [r0, #12]
 8005ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	b151      	cbz	r1, 8005edc <_dtoa_r+0x44>
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	2301      	movs	r3, #1
 8005eca:	4093      	lsls	r3, r2
 8005ecc:	604a      	str	r2, [r1, #4]
 8005ece:	608b      	str	r3, [r1, #8]
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f001 f938 	bl	8007146 <_Bfree>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	1e3b      	subs	r3, r7, #0
 8005ede:	bfaf      	iteee	ge
 8005ee0:	2300      	movge	r3, #0
 8005ee2:	2201      	movlt	r2, #1
 8005ee4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ee8:	9303      	strlt	r3, [sp, #12]
 8005eea:	bfac      	ite	ge
 8005eec:	f8c8 3000 	strge.w	r3, [r8]
 8005ef0:	f8c8 2000 	strlt.w	r2, [r8]
 8005ef4:	4bae      	ldr	r3, [pc, #696]	; (80061b0 <_dtoa_r+0x318>)
 8005ef6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005efa:	ea33 0308 	bics.w	r3, r3, r8
 8005efe:	d11b      	bne.n	8005f38 <_dtoa_r+0xa0>
 8005f00:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	9b02      	ldr	r3, [sp, #8]
 8005f0a:	b923      	cbnz	r3, 8005f16 <_dtoa_r+0x7e>
 8005f0c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f000 8545 	beq.w	80069a0 <_dtoa_r+0xb08>
 8005f16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f18:	b953      	cbnz	r3, 8005f30 <_dtoa_r+0x98>
 8005f1a:	4ba6      	ldr	r3, [pc, #664]	; (80061b4 <_dtoa_r+0x31c>)
 8005f1c:	e021      	b.n	8005f62 <_dtoa_r+0xca>
 8005f1e:	4ba6      	ldr	r3, [pc, #664]	; (80061b8 <_dtoa_r+0x320>)
 8005f20:	9306      	str	r3, [sp, #24]
 8005f22:	3308      	adds	r3, #8
 8005f24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	9806      	ldr	r0, [sp, #24]
 8005f2a:	b015      	add	sp, #84	; 0x54
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	4ba0      	ldr	r3, [pc, #640]	; (80061b4 <_dtoa_r+0x31c>)
 8005f32:	9306      	str	r3, [sp, #24]
 8005f34:	3303      	adds	r3, #3
 8005f36:	e7f5      	b.n	8005f24 <_dtoa_r+0x8c>
 8005f38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	4630      	mov	r0, r6
 8005f42:	4639      	mov	r1, r7
 8005f44:	f7fa fd3a 	bl	80009bc <__aeabi_dcmpeq>
 8005f48:	4682      	mov	sl, r0
 8005f4a:	b160      	cbz	r0, 8005f66 <_dtoa_r+0xce>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8520 	beq.w	800699a <_dtoa_r+0xb02>
 8005f5a:	4b98      	ldr	r3, [pc, #608]	; (80061bc <_dtoa_r+0x324>)
 8005f5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	9306      	str	r3, [sp, #24]
 8005f64:	e7e0      	b.n	8005f28 <_dtoa_r+0x90>
 8005f66:	ab12      	add	r3, sp, #72	; 0x48
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	ab13      	add	r3, sp, #76	; 0x4c
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	4632      	mov	r2, r6
 8005f70:	463b      	mov	r3, r7
 8005f72:	4620      	mov	r0, r4
 8005f74:	f001 fbf4 	bl	8007760 <__d2b>
 8005f78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f7c:	4683      	mov	fp, r0
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	d07d      	beq.n	800607e <_dtoa_r+0x1e6>
 8005f82:	46b0      	mov	r8, r6
 8005f84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f88:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005f8c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005f90:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f94:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005f98:	2200      	movs	r2, #0
 8005f9a:	4b89      	ldr	r3, [pc, #548]	; (80061c0 <_dtoa_r+0x328>)
 8005f9c:	4640      	mov	r0, r8
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	f7fa f8ec 	bl	800017c <__aeabi_dsub>
 8005fa4:	a37c      	add	r3, pc, #496	; (adr r3, 8006198 <_dtoa_r+0x300>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f7fa fa9f 	bl	80004ec <__aeabi_dmul>
 8005fae:	a37c      	add	r3, pc, #496	; (adr r3, 80061a0 <_dtoa_r+0x308>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa f8e4 	bl	8000180 <__adddf3>
 8005fb8:	4606      	mov	r6, r0
 8005fba:	4628      	mov	r0, r5
 8005fbc:	460f      	mov	r7, r1
 8005fbe:	f7fa fa2b 	bl	8000418 <__aeabi_i2d>
 8005fc2:	a379      	add	r3, pc, #484	; (adr r3, 80061a8 <_dtoa_r+0x310>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa fa90 	bl	80004ec <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	4639      	mov	r1, r7
 8005fd4:	f7fa f8d4 	bl	8000180 <__adddf3>
 8005fd8:	4606      	mov	r6, r0
 8005fda:	460f      	mov	r7, r1
 8005fdc:	f7fa fd36 	bl	8000a4c <__aeabi_d2iz>
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4682      	mov	sl, r0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4639      	mov	r1, r7
 8005fea:	f7fa fcf1 	bl	80009d0 <__aeabi_dcmplt>
 8005fee:	b148      	cbz	r0, 8006004 <_dtoa_r+0x16c>
 8005ff0:	4650      	mov	r0, sl
 8005ff2:	f7fa fa11 	bl	8000418 <__aeabi_i2d>
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	463b      	mov	r3, r7
 8005ffa:	f7fa fcdf 	bl	80009bc <__aeabi_dcmpeq>
 8005ffe:	b908      	cbnz	r0, 8006004 <_dtoa_r+0x16c>
 8006000:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006004:	f1ba 0f16 	cmp.w	sl, #22
 8006008:	d85a      	bhi.n	80060c0 <_dtoa_r+0x228>
 800600a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800600e:	496d      	ldr	r1, [pc, #436]	; (80061c4 <_dtoa_r+0x32c>)
 8006010:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006018:	f7fa fcf8 	bl	8000a0c <__aeabi_dcmpgt>
 800601c:	2800      	cmp	r0, #0
 800601e:	d051      	beq.n	80060c4 <_dtoa_r+0x22c>
 8006020:	2300      	movs	r3, #0
 8006022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006026:	930d      	str	r3, [sp, #52]	; 0x34
 8006028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800602a:	1b5d      	subs	r5, r3, r5
 800602c:	1e6b      	subs	r3, r5, #1
 800602e:	9307      	str	r3, [sp, #28]
 8006030:	bf43      	ittte	mi
 8006032:	2300      	movmi	r3, #0
 8006034:	f1c5 0901 	rsbmi	r9, r5, #1
 8006038:	9307      	strmi	r3, [sp, #28]
 800603a:	f04f 0900 	movpl.w	r9, #0
 800603e:	f1ba 0f00 	cmp.w	sl, #0
 8006042:	db41      	blt.n	80060c8 <_dtoa_r+0x230>
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800604a:	4453      	add	r3, sl
 800604c:	9307      	str	r3, [sp, #28]
 800604e:	2300      	movs	r3, #0
 8006050:	9308      	str	r3, [sp, #32]
 8006052:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006054:	2b09      	cmp	r3, #9
 8006056:	f200 808f 	bhi.w	8006178 <_dtoa_r+0x2e0>
 800605a:	2b05      	cmp	r3, #5
 800605c:	bfc4      	itt	gt
 800605e:	3b04      	subgt	r3, #4
 8006060:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006062:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006064:	bfc8      	it	gt
 8006066:	2500      	movgt	r5, #0
 8006068:	f1a3 0302 	sub.w	r3, r3, #2
 800606c:	bfd8      	it	le
 800606e:	2501      	movle	r5, #1
 8006070:	2b03      	cmp	r3, #3
 8006072:	f200 808d 	bhi.w	8006190 <_dtoa_r+0x2f8>
 8006076:	e8df f003 	tbb	[pc, r3]
 800607a:	7d7b      	.short	0x7d7b
 800607c:	6f2f      	.short	0x6f2f
 800607e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006082:	441d      	add	r5, r3
 8006084:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006088:	2820      	cmp	r0, #32
 800608a:	dd13      	ble.n	80060b4 <_dtoa_r+0x21c>
 800608c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	fa08 f800 	lsl.w	r8, r8, r0
 8006096:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800609a:	fa23 f000 	lsr.w	r0, r3, r0
 800609e:	ea48 0000 	orr.w	r0, r8, r0
 80060a2:	f7fa f9a9 	bl	80003f8 <__aeabi_ui2d>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4680      	mov	r8, r0
 80060aa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80060ae:	3d01      	subs	r5, #1
 80060b0:	9310      	str	r3, [sp, #64]	; 0x40
 80060b2:	e771      	b.n	8005f98 <_dtoa_r+0x100>
 80060b4:	9b02      	ldr	r3, [sp, #8]
 80060b6:	f1c0 0020 	rsb	r0, r0, #32
 80060ba:	fa03 f000 	lsl.w	r0, r3, r0
 80060be:	e7f0      	b.n	80060a2 <_dtoa_r+0x20a>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e7b0      	b.n	8006026 <_dtoa_r+0x18e>
 80060c4:	900d      	str	r0, [sp, #52]	; 0x34
 80060c6:	e7af      	b.n	8006028 <_dtoa_r+0x190>
 80060c8:	f1ca 0300 	rsb	r3, sl, #0
 80060cc:	9308      	str	r3, [sp, #32]
 80060ce:	2300      	movs	r3, #0
 80060d0:	eba9 090a 	sub.w	r9, r9, sl
 80060d4:	930c      	str	r3, [sp, #48]	; 0x30
 80060d6:	e7bc      	b.n	8006052 <_dtoa_r+0x1ba>
 80060d8:	2301      	movs	r3, #1
 80060da:	9309      	str	r3, [sp, #36]	; 0x24
 80060dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd74      	ble.n	80061cc <_dtoa_r+0x334>
 80060e2:	4698      	mov	r8, r3
 80060e4:	9304      	str	r3, [sp, #16]
 80060e6:	2200      	movs	r2, #0
 80060e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060ea:	6072      	str	r2, [r6, #4]
 80060ec:	2204      	movs	r2, #4
 80060ee:	f102 0014 	add.w	r0, r2, #20
 80060f2:	4298      	cmp	r0, r3
 80060f4:	6871      	ldr	r1, [r6, #4]
 80060f6:	d96e      	bls.n	80061d6 <_dtoa_r+0x33e>
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fff0 	bl	80070de <_Balloc>
 80060fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006100:	6030      	str	r0, [r6, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f1b8 0f0e 	cmp.w	r8, #14
 8006108:	9306      	str	r3, [sp, #24]
 800610a:	f200 80ed 	bhi.w	80062e8 <_dtoa_r+0x450>
 800610e:	2d00      	cmp	r5, #0
 8006110:	f000 80ea 	beq.w	80062e8 <_dtoa_r+0x450>
 8006114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006118:	f1ba 0f00 	cmp.w	sl, #0
 800611c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006120:	dd77      	ble.n	8006212 <_dtoa_r+0x37a>
 8006122:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <_dtoa_r+0x32c>)
 8006124:	f00a 030f 	and.w	r3, sl, #15
 8006128:	ea4f 162a 	mov.w	r6, sl, asr #4
 800612c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006130:	06f0      	lsls	r0, r6, #27
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800613a:	d568      	bpl.n	800620e <_dtoa_r+0x376>
 800613c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006140:	4b21      	ldr	r3, [pc, #132]	; (80061c8 <_dtoa_r+0x330>)
 8006142:	2503      	movs	r5, #3
 8006144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006148:	f7fa fafa 	bl	8000740 <__aeabi_ddiv>
 800614c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006150:	f006 060f 	and.w	r6, r6, #15
 8006154:	4f1c      	ldr	r7, [pc, #112]	; (80061c8 <_dtoa_r+0x330>)
 8006156:	e04f      	b.n	80061f8 <_dtoa_r+0x360>
 8006158:	2301      	movs	r3, #1
 800615a:	9309      	str	r3, [sp, #36]	; 0x24
 800615c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800615e:	4453      	add	r3, sl
 8006160:	f103 0801 	add.w	r8, r3, #1
 8006164:	9304      	str	r3, [sp, #16]
 8006166:	4643      	mov	r3, r8
 8006168:	2b01      	cmp	r3, #1
 800616a:	bfb8      	it	lt
 800616c:	2301      	movlt	r3, #1
 800616e:	e7ba      	b.n	80060e6 <_dtoa_r+0x24e>
 8006170:	2300      	movs	r3, #0
 8006172:	e7b2      	b.n	80060da <_dtoa_r+0x242>
 8006174:	2300      	movs	r3, #0
 8006176:	e7f0      	b.n	800615a <_dtoa_r+0x2c2>
 8006178:	2501      	movs	r5, #1
 800617a:	2300      	movs	r3, #0
 800617c:	9509      	str	r5, [sp, #36]	; 0x24
 800617e:	931e      	str	r3, [sp, #120]	; 0x78
 8006180:	f04f 33ff 	mov.w	r3, #4294967295
 8006184:	2200      	movs	r2, #0
 8006186:	9304      	str	r3, [sp, #16]
 8006188:	4698      	mov	r8, r3
 800618a:	2312      	movs	r3, #18
 800618c:	921f      	str	r2, [sp, #124]	; 0x7c
 800618e:	e7aa      	b.n	80060e6 <_dtoa_r+0x24e>
 8006190:	2301      	movs	r3, #1
 8006192:	9309      	str	r3, [sp, #36]	; 0x24
 8006194:	e7f4      	b.n	8006180 <_dtoa_r+0x2e8>
 8006196:	bf00      	nop
 8006198:	636f4361 	.word	0x636f4361
 800619c:	3fd287a7 	.word	0x3fd287a7
 80061a0:	8b60c8b3 	.word	0x8b60c8b3
 80061a4:	3fc68a28 	.word	0x3fc68a28
 80061a8:	509f79fb 	.word	0x509f79fb
 80061ac:	3fd34413 	.word	0x3fd34413
 80061b0:	7ff00000 	.word	0x7ff00000
 80061b4:	08007ff1 	.word	0x08007ff1
 80061b8:	08007fe8 	.word	0x08007fe8
 80061bc:	08007f71 	.word	0x08007f71
 80061c0:	3ff80000 	.word	0x3ff80000
 80061c4:	08008028 	.word	0x08008028
 80061c8:	08008000 	.word	0x08008000
 80061cc:	2301      	movs	r3, #1
 80061ce:	9304      	str	r3, [sp, #16]
 80061d0:	4698      	mov	r8, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	e7da      	b.n	800618c <_dtoa_r+0x2f4>
 80061d6:	3101      	adds	r1, #1
 80061d8:	6071      	str	r1, [r6, #4]
 80061da:	0052      	lsls	r2, r2, #1
 80061dc:	e787      	b.n	80060ee <_dtoa_r+0x256>
 80061de:	07f1      	lsls	r1, r6, #31
 80061e0:	d508      	bpl.n	80061f4 <_dtoa_r+0x35c>
 80061e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061ea:	f7fa f97f 	bl	80004ec <__aeabi_dmul>
 80061ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061f2:	3501      	adds	r5, #1
 80061f4:	1076      	asrs	r6, r6, #1
 80061f6:	3708      	adds	r7, #8
 80061f8:	2e00      	cmp	r6, #0
 80061fa:	d1f0      	bne.n	80061de <_dtoa_r+0x346>
 80061fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006204:	f7fa fa9c 	bl	8000740 <__aeabi_ddiv>
 8006208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800620c:	e01b      	b.n	8006246 <_dtoa_r+0x3ae>
 800620e:	2502      	movs	r5, #2
 8006210:	e7a0      	b.n	8006154 <_dtoa_r+0x2bc>
 8006212:	f000 80a4 	beq.w	800635e <_dtoa_r+0x4c6>
 8006216:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800621a:	f1ca 0600 	rsb	r6, sl, #0
 800621e:	4ba0      	ldr	r3, [pc, #640]	; (80064a0 <_dtoa_r+0x608>)
 8006220:	f006 020f 	and.w	r2, r6, #15
 8006224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa f95e 	bl	80004ec <__aeabi_dmul>
 8006230:	2502      	movs	r5, #2
 8006232:	2300      	movs	r3, #0
 8006234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006238:	4f9a      	ldr	r7, [pc, #616]	; (80064a4 <_dtoa_r+0x60c>)
 800623a:	1136      	asrs	r6, r6, #4
 800623c:	2e00      	cmp	r6, #0
 800623e:	f040 8083 	bne.w	8006348 <_dtoa_r+0x4b0>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e0      	bne.n	8006208 <_dtoa_r+0x370>
 8006246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 808a 	beq.w	8006362 <_dtoa_r+0x4ca>
 800624e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006252:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800625a:	2200      	movs	r2, #0
 800625c:	4b92      	ldr	r3, [pc, #584]	; (80064a8 <_dtoa_r+0x610>)
 800625e:	f7fa fbb7 	bl	80009d0 <__aeabi_dcmplt>
 8006262:	2800      	cmp	r0, #0
 8006264:	d07d      	beq.n	8006362 <_dtoa_r+0x4ca>
 8006266:	f1b8 0f00 	cmp.w	r8, #0
 800626a:	d07a      	beq.n	8006362 <_dtoa_r+0x4ca>
 800626c:	9b04      	ldr	r3, [sp, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	dd36      	ble.n	80062e0 <_dtoa_r+0x448>
 8006272:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006276:	2200      	movs	r2, #0
 8006278:	4b8c      	ldr	r3, [pc, #560]	; (80064ac <_dtoa_r+0x614>)
 800627a:	f7fa f937 	bl	80004ec <__aeabi_dmul>
 800627e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006282:	9e04      	ldr	r6, [sp, #16]
 8006284:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006288:	3501      	adds	r5, #1
 800628a:	4628      	mov	r0, r5
 800628c:	f7fa f8c4 	bl	8000418 <__aeabi_i2d>
 8006290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006294:	f7fa f92a 	bl	80004ec <__aeabi_dmul>
 8006298:	2200      	movs	r2, #0
 800629a:	4b85      	ldr	r3, [pc, #532]	; (80064b0 <_dtoa_r+0x618>)
 800629c:	f7f9 ff70 	bl	8000180 <__adddf3>
 80062a0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80062a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062a8:	950b      	str	r5, [sp, #44]	; 0x2c
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	d15c      	bne.n	8006368 <_dtoa_r+0x4d0>
 80062ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	4b7f      	ldr	r3, [pc, #508]	; (80064b4 <_dtoa_r+0x61c>)
 80062b6:	f7f9 ff61 	bl	800017c <__aeabi_dsub>
 80062ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062bc:	462b      	mov	r3, r5
 80062be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062c2:	f7fa fba3 	bl	8000a0c <__aeabi_dcmpgt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 8281 	bne.w	80067ce <_dtoa_r+0x936>
 80062cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80062d6:	f7fa fb7b 	bl	80009d0 <__aeabi_dcmplt>
 80062da:	2800      	cmp	r0, #0
 80062dc:	f040 8275 	bne.w	80067ca <_dtoa_r+0x932>
 80062e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80062e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f2c0 814b 	blt.w	8006586 <_dtoa_r+0x6ee>
 80062f0:	f1ba 0f0e 	cmp.w	sl, #14
 80062f4:	f300 8147 	bgt.w	8006586 <_dtoa_r+0x6ee>
 80062f8:	4b69      	ldr	r3, [pc, #420]	; (80064a0 <_dtoa_r+0x608>)
 80062fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006306:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006308:	2b00      	cmp	r3, #0
 800630a:	f280 80d7 	bge.w	80064bc <_dtoa_r+0x624>
 800630e:	f1b8 0f00 	cmp.w	r8, #0
 8006312:	f300 80d3 	bgt.w	80064bc <_dtoa_r+0x624>
 8006316:	f040 8257 	bne.w	80067c8 <_dtoa_r+0x930>
 800631a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800631e:	2200      	movs	r2, #0
 8006320:	4b64      	ldr	r3, [pc, #400]	; (80064b4 <_dtoa_r+0x61c>)
 8006322:	f7fa f8e3 	bl	80004ec <__aeabi_dmul>
 8006326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800632a:	f7fa fb65 	bl	80009f8 <__aeabi_dcmpge>
 800632e:	4646      	mov	r6, r8
 8006330:	4647      	mov	r7, r8
 8006332:	2800      	cmp	r0, #0
 8006334:	f040 822d 	bne.w	8006792 <_dtoa_r+0x8fa>
 8006338:	9b06      	ldr	r3, [sp, #24]
 800633a:	9a06      	ldr	r2, [sp, #24]
 800633c:	1c5d      	adds	r5, r3, #1
 800633e:	2331      	movs	r3, #49	; 0x31
 8006340:	f10a 0a01 	add.w	sl, sl, #1
 8006344:	7013      	strb	r3, [r2, #0]
 8006346:	e228      	b.n	800679a <_dtoa_r+0x902>
 8006348:	07f2      	lsls	r2, r6, #31
 800634a:	d505      	bpl.n	8006358 <_dtoa_r+0x4c0>
 800634c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006350:	f7fa f8cc 	bl	80004ec <__aeabi_dmul>
 8006354:	2301      	movs	r3, #1
 8006356:	3501      	adds	r5, #1
 8006358:	1076      	asrs	r6, r6, #1
 800635a:	3708      	adds	r7, #8
 800635c:	e76e      	b.n	800623c <_dtoa_r+0x3a4>
 800635e:	2502      	movs	r5, #2
 8006360:	e771      	b.n	8006246 <_dtoa_r+0x3ae>
 8006362:	4657      	mov	r7, sl
 8006364:	4646      	mov	r6, r8
 8006366:	e790      	b.n	800628a <_dtoa_r+0x3f2>
 8006368:	4b4d      	ldr	r3, [pc, #308]	; (80064a0 <_dtoa_r+0x608>)
 800636a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800636e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	d048      	beq.n	800640a <_dtoa_r+0x572>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	2000      	movs	r0, #0
 800637e:	494e      	ldr	r1, [pc, #312]	; (80064b8 <_dtoa_r+0x620>)
 8006380:	f7fa f9de 	bl	8000740 <__aeabi_ddiv>
 8006384:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006388:	f7f9 fef8 	bl	800017c <__aeabi_dsub>
 800638c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006390:	9d06      	ldr	r5, [sp, #24]
 8006392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006396:	f7fa fb59 	bl	8000a4c <__aeabi_d2iz>
 800639a:	9011      	str	r0, [sp, #68]	; 0x44
 800639c:	f7fa f83c 	bl	8000418 <__aeabi_i2d>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a8:	f7f9 fee8 	bl	800017c <__aeabi_dsub>
 80063ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063b2:	3330      	adds	r3, #48	; 0x30
 80063b4:	f805 3b01 	strb.w	r3, [r5], #1
 80063b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063bc:	f7fa fb08 	bl	80009d0 <__aeabi_dcmplt>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d163      	bne.n	800648c <_dtoa_r+0x5f4>
 80063c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c8:	2000      	movs	r0, #0
 80063ca:	4937      	ldr	r1, [pc, #220]	; (80064a8 <_dtoa_r+0x610>)
 80063cc:	f7f9 fed6 	bl	800017c <__aeabi_dsub>
 80063d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063d4:	f7fa fafc 	bl	80009d0 <__aeabi_dcmplt>
 80063d8:	2800      	cmp	r0, #0
 80063da:	f040 80b5 	bne.w	8006548 <_dtoa_r+0x6b0>
 80063de:	9b06      	ldr	r3, [sp, #24]
 80063e0:	1aeb      	subs	r3, r5, r3
 80063e2:	429e      	cmp	r6, r3
 80063e4:	f77f af7c 	ble.w	80062e0 <_dtoa_r+0x448>
 80063e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063ec:	2200      	movs	r2, #0
 80063ee:	4b2f      	ldr	r3, [pc, #188]	; (80064ac <_dtoa_r+0x614>)
 80063f0:	f7fa f87c 	bl	80004ec <__aeabi_dmul>
 80063f4:	2200      	movs	r2, #0
 80063f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063fe:	4b2b      	ldr	r3, [pc, #172]	; (80064ac <_dtoa_r+0x614>)
 8006400:	f7fa f874 	bl	80004ec <__aeabi_dmul>
 8006404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006408:	e7c3      	b.n	8006392 <_dtoa_r+0x4fa>
 800640a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800640e:	f7fa f86d 	bl	80004ec <__aeabi_dmul>
 8006412:	9b06      	ldr	r3, [sp, #24]
 8006414:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006418:	199d      	adds	r5, r3, r6
 800641a:	461e      	mov	r6, r3
 800641c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006420:	f7fa fb14 	bl	8000a4c <__aeabi_d2iz>
 8006424:	9011      	str	r0, [sp, #68]	; 0x44
 8006426:	f7f9 fff7 	bl	8000418 <__aeabi_i2d>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006432:	f7f9 fea3 	bl	800017c <__aeabi_dsub>
 8006436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800643c:	3330      	adds	r3, #48	; 0x30
 800643e:	f806 3b01 	strb.w	r3, [r6], #1
 8006442:	42ae      	cmp	r6, r5
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	d124      	bne.n	8006494 <_dtoa_r+0x5fc>
 800644a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800644e:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <_dtoa_r+0x620>)
 8006450:	f7f9 fe96 	bl	8000180 <__adddf3>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645c:	f7fa fad6 	bl	8000a0c <__aeabi_dcmpgt>
 8006460:	2800      	cmp	r0, #0
 8006462:	d171      	bne.n	8006548 <_dtoa_r+0x6b0>
 8006464:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006468:	2000      	movs	r0, #0
 800646a:	4913      	ldr	r1, [pc, #76]	; (80064b8 <_dtoa_r+0x620>)
 800646c:	f7f9 fe86 	bl	800017c <__aeabi_dsub>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006478:	f7fa faaa 	bl	80009d0 <__aeabi_dcmplt>
 800647c:	2800      	cmp	r0, #0
 800647e:	f43f af2f 	beq.w	80062e0 <_dtoa_r+0x448>
 8006482:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006486:	1e6a      	subs	r2, r5, #1
 8006488:	2b30      	cmp	r3, #48	; 0x30
 800648a:	d001      	beq.n	8006490 <_dtoa_r+0x5f8>
 800648c:	46ba      	mov	sl, r7
 800648e:	e04a      	b.n	8006526 <_dtoa_r+0x68e>
 8006490:	4615      	mov	r5, r2
 8006492:	e7f6      	b.n	8006482 <_dtoa_r+0x5ea>
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <_dtoa_r+0x614>)
 8006496:	f7fa f829 	bl	80004ec <__aeabi_dmul>
 800649a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800649e:	e7bd      	b.n	800641c <_dtoa_r+0x584>
 80064a0:	08008028 	.word	0x08008028
 80064a4:	08008000 	.word	0x08008000
 80064a8:	3ff00000 	.word	0x3ff00000
 80064ac:	40240000 	.word	0x40240000
 80064b0:	401c0000 	.word	0x401c0000
 80064b4:	40140000 	.word	0x40140000
 80064b8:	3fe00000 	.word	0x3fe00000
 80064bc:	9d06      	ldr	r5, [sp, #24]
 80064be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064c6:	4630      	mov	r0, r6
 80064c8:	4639      	mov	r1, r7
 80064ca:	f7fa f939 	bl	8000740 <__aeabi_ddiv>
 80064ce:	f7fa fabd 	bl	8000a4c <__aeabi_d2iz>
 80064d2:	4681      	mov	r9, r0
 80064d4:	f7f9 ffa0 	bl	8000418 <__aeabi_i2d>
 80064d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064dc:	f7fa f806 	bl	80004ec <__aeabi_dmul>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4630      	mov	r0, r6
 80064e6:	4639      	mov	r1, r7
 80064e8:	f7f9 fe48 	bl	800017c <__aeabi_dsub>
 80064ec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80064f0:	f805 6b01 	strb.w	r6, [r5], #1
 80064f4:	9e06      	ldr	r6, [sp, #24]
 80064f6:	4602      	mov	r2, r0
 80064f8:	1bae      	subs	r6, r5, r6
 80064fa:	45b0      	cmp	r8, r6
 80064fc:	460b      	mov	r3, r1
 80064fe:	d135      	bne.n	800656c <_dtoa_r+0x6d4>
 8006500:	f7f9 fe3e 	bl	8000180 <__adddf3>
 8006504:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006508:	4606      	mov	r6, r0
 800650a:	460f      	mov	r7, r1
 800650c:	f7fa fa7e 	bl	8000a0c <__aeabi_dcmpgt>
 8006510:	b9c8      	cbnz	r0, 8006546 <_dtoa_r+0x6ae>
 8006512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7fa fa4f 	bl	80009bc <__aeabi_dcmpeq>
 800651e:	b110      	cbz	r0, 8006526 <_dtoa_r+0x68e>
 8006520:	f019 0f01 	tst.w	r9, #1
 8006524:	d10f      	bne.n	8006546 <_dtoa_r+0x6ae>
 8006526:	4659      	mov	r1, fp
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fe0c 	bl	8007146 <_Bfree>
 800652e:	2300      	movs	r3, #0
 8006530:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006532:	702b      	strb	r3, [r5, #0]
 8006534:	f10a 0301 	add.w	r3, sl, #1
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800653c:	2b00      	cmp	r3, #0
 800653e:	f43f acf3 	beq.w	8005f28 <_dtoa_r+0x90>
 8006542:	601d      	str	r5, [r3, #0]
 8006544:	e4f0      	b.n	8005f28 <_dtoa_r+0x90>
 8006546:	4657      	mov	r7, sl
 8006548:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800654c:	1e6b      	subs	r3, r5, #1
 800654e:	2a39      	cmp	r2, #57	; 0x39
 8006550:	d106      	bne.n	8006560 <_dtoa_r+0x6c8>
 8006552:	9a06      	ldr	r2, [sp, #24]
 8006554:	429a      	cmp	r2, r3
 8006556:	d107      	bne.n	8006568 <_dtoa_r+0x6d0>
 8006558:	2330      	movs	r3, #48	; 0x30
 800655a:	7013      	strb	r3, [r2, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	3701      	adds	r7, #1
 8006560:	781a      	ldrb	r2, [r3, #0]
 8006562:	3201      	adds	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	e791      	b.n	800648c <_dtoa_r+0x5f4>
 8006568:	461d      	mov	r5, r3
 800656a:	e7ed      	b.n	8006548 <_dtoa_r+0x6b0>
 800656c:	2200      	movs	r2, #0
 800656e:	4b99      	ldr	r3, [pc, #612]	; (80067d4 <_dtoa_r+0x93c>)
 8006570:	f7f9 ffbc 	bl	80004ec <__aeabi_dmul>
 8006574:	2200      	movs	r2, #0
 8006576:	2300      	movs	r3, #0
 8006578:	4606      	mov	r6, r0
 800657a:	460f      	mov	r7, r1
 800657c:	f7fa fa1e 	bl	80009bc <__aeabi_dcmpeq>
 8006580:	2800      	cmp	r0, #0
 8006582:	d09e      	beq.n	80064c2 <_dtoa_r+0x62a>
 8006584:	e7cf      	b.n	8006526 <_dtoa_r+0x68e>
 8006586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006588:	2a00      	cmp	r2, #0
 800658a:	f000 8088 	beq.w	800669e <_dtoa_r+0x806>
 800658e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006590:	2a01      	cmp	r2, #1
 8006592:	dc6d      	bgt.n	8006670 <_dtoa_r+0x7d8>
 8006594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006596:	2a00      	cmp	r2, #0
 8006598:	d066      	beq.n	8006668 <_dtoa_r+0x7d0>
 800659a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800659e:	464d      	mov	r5, r9
 80065a0:	9e08      	ldr	r6, [sp, #32]
 80065a2:	9a07      	ldr	r2, [sp, #28]
 80065a4:	2101      	movs	r1, #1
 80065a6:	441a      	add	r2, r3
 80065a8:	4620      	mov	r0, r4
 80065aa:	4499      	add	r9, r3
 80065ac:	9207      	str	r2, [sp, #28]
 80065ae:	f000 fea8 	bl	8007302 <__i2b>
 80065b2:	4607      	mov	r7, r0
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	dd0b      	ble.n	80065d0 <_dtoa_r+0x738>
 80065b8:	9b07      	ldr	r3, [sp, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dd08      	ble.n	80065d0 <_dtoa_r+0x738>
 80065be:	42ab      	cmp	r3, r5
 80065c0:	bfa8      	it	ge
 80065c2:	462b      	movge	r3, r5
 80065c4:	9a07      	ldr	r2, [sp, #28]
 80065c6:	eba9 0903 	sub.w	r9, r9, r3
 80065ca:	1aed      	subs	r5, r5, r3
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	9307      	str	r3, [sp, #28]
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	b1eb      	cbz	r3, 8006610 <_dtoa_r+0x778>
 80065d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d065      	beq.n	80066a6 <_dtoa_r+0x80e>
 80065da:	b18e      	cbz	r6, 8006600 <_dtoa_r+0x768>
 80065dc:	4639      	mov	r1, r7
 80065de:	4632      	mov	r2, r6
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 ff2d 	bl	8007440 <__pow5mult>
 80065e6:	465a      	mov	r2, fp
 80065e8:	4601      	mov	r1, r0
 80065ea:	4607      	mov	r7, r0
 80065ec:	4620      	mov	r0, r4
 80065ee:	f000 fe91 	bl	8007314 <__multiply>
 80065f2:	4659      	mov	r1, fp
 80065f4:	900a      	str	r0, [sp, #40]	; 0x28
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 fda5 	bl	8007146 <_Bfree>
 80065fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fe:	469b      	mov	fp, r3
 8006600:	9b08      	ldr	r3, [sp, #32]
 8006602:	1b9a      	subs	r2, r3, r6
 8006604:	d004      	beq.n	8006610 <_dtoa_r+0x778>
 8006606:	4659      	mov	r1, fp
 8006608:	4620      	mov	r0, r4
 800660a:	f000 ff19 	bl	8007440 <__pow5mult>
 800660e:	4683      	mov	fp, r0
 8006610:	2101      	movs	r1, #1
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fe75 	bl	8007302 <__i2b>
 8006618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800661a:	4606      	mov	r6, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 81c6 	beq.w	80069ae <_dtoa_r+0xb16>
 8006622:	461a      	mov	r2, r3
 8006624:	4601      	mov	r1, r0
 8006626:	4620      	mov	r0, r4
 8006628:	f000 ff0a 	bl	8007440 <__pow5mult>
 800662c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800662e:	4606      	mov	r6, r0
 8006630:	2b01      	cmp	r3, #1
 8006632:	dc3e      	bgt.n	80066b2 <_dtoa_r+0x81a>
 8006634:	9b02      	ldr	r3, [sp, #8]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d137      	bne.n	80066aa <_dtoa_r+0x812>
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006640:	2b00      	cmp	r3, #0
 8006642:	d134      	bne.n	80066ae <_dtoa_r+0x816>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800664a:	0d1b      	lsrs	r3, r3, #20
 800664c:	051b      	lsls	r3, r3, #20
 800664e:	b12b      	cbz	r3, 800665c <_dtoa_r+0x7c4>
 8006650:	9b07      	ldr	r3, [sp, #28]
 8006652:	f109 0901 	add.w	r9, r9, #1
 8006656:	3301      	adds	r3, #1
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	2301      	movs	r3, #1
 800665c:	9308      	str	r3, [sp, #32]
 800665e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006660:	2b00      	cmp	r3, #0
 8006662:	d128      	bne.n	80066b6 <_dtoa_r+0x81e>
 8006664:	2001      	movs	r0, #1
 8006666:	e02e      	b.n	80066c6 <_dtoa_r+0x82e>
 8006668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800666a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800666e:	e796      	b.n	800659e <_dtoa_r+0x706>
 8006670:	9b08      	ldr	r3, [sp, #32]
 8006672:	f108 36ff 	add.w	r6, r8, #4294967295
 8006676:	42b3      	cmp	r3, r6
 8006678:	bfb7      	itett	lt
 800667a:	9b08      	ldrlt	r3, [sp, #32]
 800667c:	1b9e      	subge	r6, r3, r6
 800667e:	1af2      	sublt	r2, r6, r3
 8006680:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006682:	bfbf      	itttt	lt
 8006684:	9608      	strlt	r6, [sp, #32]
 8006686:	189b      	addlt	r3, r3, r2
 8006688:	930c      	strlt	r3, [sp, #48]	; 0x30
 800668a:	2600      	movlt	r6, #0
 800668c:	f1b8 0f00 	cmp.w	r8, #0
 8006690:	bfb9      	ittee	lt
 8006692:	eba9 0508 	sublt.w	r5, r9, r8
 8006696:	2300      	movlt	r3, #0
 8006698:	464d      	movge	r5, r9
 800669a:	4643      	movge	r3, r8
 800669c:	e781      	b.n	80065a2 <_dtoa_r+0x70a>
 800669e:	9e08      	ldr	r6, [sp, #32]
 80066a0:	464d      	mov	r5, r9
 80066a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066a4:	e786      	b.n	80065b4 <_dtoa_r+0x71c>
 80066a6:	9a08      	ldr	r2, [sp, #32]
 80066a8:	e7ad      	b.n	8006606 <_dtoa_r+0x76e>
 80066aa:	2300      	movs	r3, #0
 80066ac:	e7d6      	b.n	800665c <_dtoa_r+0x7c4>
 80066ae:	9b02      	ldr	r3, [sp, #8]
 80066b0:	e7d4      	b.n	800665c <_dtoa_r+0x7c4>
 80066b2:	2300      	movs	r3, #0
 80066b4:	9308      	str	r3, [sp, #32]
 80066b6:	6933      	ldr	r3, [r6, #16]
 80066b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066bc:	6918      	ldr	r0, [r3, #16]
 80066be:	f000 fdd2 	bl	8007266 <__hi0bits>
 80066c2:	f1c0 0020 	rsb	r0, r0, #32
 80066c6:	9b07      	ldr	r3, [sp, #28]
 80066c8:	4418      	add	r0, r3
 80066ca:	f010 001f 	ands.w	r0, r0, #31
 80066ce:	d047      	beq.n	8006760 <_dtoa_r+0x8c8>
 80066d0:	f1c0 0320 	rsb	r3, r0, #32
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	dd3b      	ble.n	8006750 <_dtoa_r+0x8b8>
 80066d8:	9b07      	ldr	r3, [sp, #28]
 80066da:	f1c0 001c 	rsb	r0, r0, #28
 80066de:	4481      	add	r9, r0
 80066e0:	4405      	add	r5, r0
 80066e2:	4403      	add	r3, r0
 80066e4:	9307      	str	r3, [sp, #28]
 80066e6:	f1b9 0f00 	cmp.w	r9, #0
 80066ea:	dd05      	ble.n	80066f8 <_dtoa_r+0x860>
 80066ec:	4659      	mov	r1, fp
 80066ee:	464a      	mov	r2, r9
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fef3 	bl	80074dc <__lshift>
 80066f6:	4683      	mov	fp, r0
 80066f8:	9b07      	ldr	r3, [sp, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd05      	ble.n	800670a <_dtoa_r+0x872>
 80066fe:	4631      	mov	r1, r6
 8006700:	461a      	mov	r2, r3
 8006702:	4620      	mov	r0, r4
 8006704:	f000 feea 	bl	80074dc <__lshift>
 8006708:	4606      	mov	r6, r0
 800670a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800670c:	b353      	cbz	r3, 8006764 <_dtoa_r+0x8cc>
 800670e:	4631      	mov	r1, r6
 8006710:	4658      	mov	r0, fp
 8006712:	f000 ff37 	bl	8007584 <__mcmp>
 8006716:	2800      	cmp	r0, #0
 8006718:	da24      	bge.n	8006764 <_dtoa_r+0x8cc>
 800671a:	2300      	movs	r3, #0
 800671c:	4659      	mov	r1, fp
 800671e:	220a      	movs	r2, #10
 8006720:	4620      	mov	r0, r4
 8006722:	f000 fd27 	bl	8007174 <__multadd>
 8006726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006728:	f10a 3aff 	add.w	sl, sl, #4294967295
 800672c:	4683      	mov	fp, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8144 	beq.w	80069bc <_dtoa_r+0xb24>
 8006734:	2300      	movs	r3, #0
 8006736:	4639      	mov	r1, r7
 8006738:	220a      	movs	r2, #10
 800673a:	4620      	mov	r0, r4
 800673c:	f000 fd1a 	bl	8007174 <__multadd>
 8006740:	9b04      	ldr	r3, [sp, #16]
 8006742:	4607      	mov	r7, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	dc4d      	bgt.n	80067e4 <_dtoa_r+0x94c>
 8006748:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800674a:	2b02      	cmp	r3, #2
 800674c:	dd4a      	ble.n	80067e4 <_dtoa_r+0x94c>
 800674e:	e011      	b.n	8006774 <_dtoa_r+0x8dc>
 8006750:	d0c9      	beq.n	80066e6 <_dtoa_r+0x84e>
 8006752:	9a07      	ldr	r2, [sp, #28]
 8006754:	331c      	adds	r3, #28
 8006756:	441a      	add	r2, r3
 8006758:	4499      	add	r9, r3
 800675a:	441d      	add	r5, r3
 800675c:	4613      	mov	r3, r2
 800675e:	e7c1      	b.n	80066e4 <_dtoa_r+0x84c>
 8006760:	4603      	mov	r3, r0
 8006762:	e7f6      	b.n	8006752 <_dtoa_r+0x8ba>
 8006764:	f1b8 0f00 	cmp.w	r8, #0
 8006768:	dc36      	bgt.n	80067d8 <_dtoa_r+0x940>
 800676a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800676c:	2b02      	cmp	r3, #2
 800676e:	dd33      	ble.n	80067d8 <_dtoa_r+0x940>
 8006770:	f8cd 8010 	str.w	r8, [sp, #16]
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	b963      	cbnz	r3, 8006792 <_dtoa_r+0x8fa>
 8006778:	4631      	mov	r1, r6
 800677a:	2205      	movs	r2, #5
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fcf9 	bl	8007174 <__multadd>
 8006782:	4601      	mov	r1, r0
 8006784:	4606      	mov	r6, r0
 8006786:	4658      	mov	r0, fp
 8006788:	f000 fefc 	bl	8007584 <__mcmp>
 800678c:	2800      	cmp	r0, #0
 800678e:	f73f add3 	bgt.w	8006338 <_dtoa_r+0x4a0>
 8006792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006794:	9d06      	ldr	r5, [sp, #24]
 8006796:	ea6f 0a03 	mvn.w	sl, r3
 800679a:	f04f 0900 	mov.w	r9, #0
 800679e:	4631      	mov	r1, r6
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fcd0 	bl	8007146 <_Bfree>
 80067a6:	2f00      	cmp	r7, #0
 80067a8:	f43f aebd 	beq.w	8006526 <_dtoa_r+0x68e>
 80067ac:	f1b9 0f00 	cmp.w	r9, #0
 80067b0:	d005      	beq.n	80067be <_dtoa_r+0x926>
 80067b2:	45b9      	cmp	r9, r7
 80067b4:	d003      	beq.n	80067be <_dtoa_r+0x926>
 80067b6:	4649      	mov	r1, r9
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fcc4 	bl	8007146 <_Bfree>
 80067be:	4639      	mov	r1, r7
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 fcc0 	bl	8007146 <_Bfree>
 80067c6:	e6ae      	b.n	8006526 <_dtoa_r+0x68e>
 80067c8:	2600      	movs	r6, #0
 80067ca:	4637      	mov	r7, r6
 80067cc:	e7e1      	b.n	8006792 <_dtoa_r+0x8fa>
 80067ce:	46ba      	mov	sl, r7
 80067d0:	4637      	mov	r7, r6
 80067d2:	e5b1      	b.n	8006338 <_dtoa_r+0x4a0>
 80067d4:	40240000 	.word	0x40240000
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	f8cd 8010 	str.w	r8, [sp, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80f3 	beq.w	80069ca <_dtoa_r+0xb32>
 80067e4:	2d00      	cmp	r5, #0
 80067e6:	dd05      	ble.n	80067f4 <_dtoa_r+0x95c>
 80067e8:	4639      	mov	r1, r7
 80067ea:	462a      	mov	r2, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fe75 	bl	80074dc <__lshift>
 80067f2:	4607      	mov	r7, r0
 80067f4:	9b08      	ldr	r3, [sp, #32]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04c      	beq.n	8006894 <_dtoa_r+0x9fc>
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 fc6e 	bl	80070de <_Balloc>
 8006802:	4605      	mov	r5, r0
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	f107 010c 	add.w	r1, r7, #12
 800680a:	3202      	adds	r2, #2
 800680c:	0092      	lsls	r2, r2, #2
 800680e:	300c      	adds	r0, #12
 8006810:	f000 fc5a 	bl	80070c8 <memcpy>
 8006814:	2201      	movs	r2, #1
 8006816:	4629      	mov	r1, r5
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fe5f 	bl	80074dc <__lshift>
 800681e:	46b9      	mov	r9, r7
 8006820:	4607      	mov	r7, r0
 8006822:	9b06      	ldr	r3, [sp, #24]
 8006824:	9307      	str	r3, [sp, #28]
 8006826:	9b02      	ldr	r3, [sp, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	9308      	str	r3, [sp, #32]
 800682e:	4631      	mov	r1, r6
 8006830:	4658      	mov	r0, fp
 8006832:	f7ff faa1 	bl	8005d78 <quorem>
 8006836:	4649      	mov	r1, r9
 8006838:	4605      	mov	r5, r0
 800683a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800683e:	4658      	mov	r0, fp
 8006840:	f000 fea0 	bl	8007584 <__mcmp>
 8006844:	463a      	mov	r2, r7
 8006846:	9002      	str	r0, [sp, #8]
 8006848:	4631      	mov	r1, r6
 800684a:	4620      	mov	r0, r4
 800684c:	f000 feb4 	bl	80075b8 <__mdiff>
 8006850:	68c3      	ldr	r3, [r0, #12]
 8006852:	4602      	mov	r2, r0
 8006854:	bb03      	cbnz	r3, 8006898 <_dtoa_r+0xa00>
 8006856:	4601      	mov	r1, r0
 8006858:	9009      	str	r0, [sp, #36]	; 0x24
 800685a:	4658      	mov	r0, fp
 800685c:	f000 fe92 	bl	8007584 <__mcmp>
 8006860:	4603      	mov	r3, r0
 8006862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006864:	4611      	mov	r1, r2
 8006866:	4620      	mov	r0, r4
 8006868:	9309      	str	r3, [sp, #36]	; 0x24
 800686a:	f000 fc6c 	bl	8007146 <_Bfree>
 800686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006870:	b9a3      	cbnz	r3, 800689c <_dtoa_r+0xa04>
 8006872:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006874:	b992      	cbnz	r2, 800689c <_dtoa_r+0xa04>
 8006876:	9a08      	ldr	r2, [sp, #32]
 8006878:	b982      	cbnz	r2, 800689c <_dtoa_r+0xa04>
 800687a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800687e:	d029      	beq.n	80068d4 <_dtoa_r+0xa3c>
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dd01      	ble.n	800688a <_dtoa_r+0x9f2>
 8006886:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800688a:	9b07      	ldr	r3, [sp, #28]
 800688c:	1c5d      	adds	r5, r3, #1
 800688e:	f883 8000 	strb.w	r8, [r3]
 8006892:	e784      	b.n	800679e <_dtoa_r+0x906>
 8006894:	4638      	mov	r0, r7
 8006896:	e7c2      	b.n	800681e <_dtoa_r+0x986>
 8006898:	2301      	movs	r3, #1
 800689a:	e7e3      	b.n	8006864 <_dtoa_r+0x9cc>
 800689c:	9a02      	ldr	r2, [sp, #8]
 800689e:	2a00      	cmp	r2, #0
 80068a0:	db04      	blt.n	80068ac <_dtoa_r+0xa14>
 80068a2:	d123      	bne.n	80068ec <_dtoa_r+0xa54>
 80068a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068a6:	bb0a      	cbnz	r2, 80068ec <_dtoa_r+0xa54>
 80068a8:	9a08      	ldr	r2, [sp, #32]
 80068aa:	b9fa      	cbnz	r2, 80068ec <_dtoa_r+0xa54>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	ddec      	ble.n	800688a <_dtoa_r+0x9f2>
 80068b0:	4659      	mov	r1, fp
 80068b2:	2201      	movs	r2, #1
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fe11 	bl	80074dc <__lshift>
 80068ba:	4631      	mov	r1, r6
 80068bc:	4683      	mov	fp, r0
 80068be:	f000 fe61 	bl	8007584 <__mcmp>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	dc03      	bgt.n	80068ce <_dtoa_r+0xa36>
 80068c6:	d1e0      	bne.n	800688a <_dtoa_r+0x9f2>
 80068c8:	f018 0f01 	tst.w	r8, #1
 80068cc:	d0dd      	beq.n	800688a <_dtoa_r+0x9f2>
 80068ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068d2:	d1d8      	bne.n	8006886 <_dtoa_r+0x9ee>
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	9a07      	ldr	r2, [sp, #28]
 80068d8:	1c5d      	adds	r5, r3, #1
 80068da:	2339      	movs	r3, #57	; 0x39
 80068dc:	7013      	strb	r3, [r2, #0]
 80068de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068e2:	1e6a      	subs	r2, r5, #1
 80068e4:	2b39      	cmp	r3, #57	; 0x39
 80068e6:	d04d      	beq.n	8006984 <_dtoa_r+0xaec>
 80068e8:	3301      	adds	r3, #1
 80068ea:	e052      	b.n	8006992 <_dtoa_r+0xafa>
 80068ec:	9a07      	ldr	r2, [sp, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f102 0501 	add.w	r5, r2, #1
 80068f4:	dd06      	ble.n	8006904 <_dtoa_r+0xa6c>
 80068f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068fa:	d0eb      	beq.n	80068d4 <_dtoa_r+0xa3c>
 80068fc:	f108 0801 	add.w	r8, r8, #1
 8006900:	9b07      	ldr	r3, [sp, #28]
 8006902:	e7c4      	b.n	800688e <_dtoa_r+0x9f6>
 8006904:	9b06      	ldr	r3, [sp, #24]
 8006906:	9a04      	ldr	r2, [sp, #16]
 8006908:	1aeb      	subs	r3, r5, r3
 800690a:	4293      	cmp	r3, r2
 800690c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006910:	d021      	beq.n	8006956 <_dtoa_r+0xabe>
 8006912:	4659      	mov	r1, fp
 8006914:	2300      	movs	r3, #0
 8006916:	220a      	movs	r2, #10
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fc2b 	bl	8007174 <__multadd>
 800691e:	45b9      	cmp	r9, r7
 8006920:	4683      	mov	fp, r0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	f04f 020a 	mov.w	r2, #10
 800692a:	4649      	mov	r1, r9
 800692c:	4620      	mov	r0, r4
 800692e:	d105      	bne.n	800693c <_dtoa_r+0xaa4>
 8006930:	f000 fc20 	bl	8007174 <__multadd>
 8006934:	4681      	mov	r9, r0
 8006936:	4607      	mov	r7, r0
 8006938:	9507      	str	r5, [sp, #28]
 800693a:	e778      	b.n	800682e <_dtoa_r+0x996>
 800693c:	f000 fc1a 	bl	8007174 <__multadd>
 8006940:	4639      	mov	r1, r7
 8006942:	4681      	mov	r9, r0
 8006944:	2300      	movs	r3, #0
 8006946:	220a      	movs	r2, #10
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fc13 	bl	8007174 <__multadd>
 800694e:	4607      	mov	r7, r0
 8006950:	e7f2      	b.n	8006938 <_dtoa_r+0xaa0>
 8006952:	f04f 0900 	mov.w	r9, #0
 8006956:	4659      	mov	r1, fp
 8006958:	2201      	movs	r2, #1
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fdbe 	bl	80074dc <__lshift>
 8006960:	4631      	mov	r1, r6
 8006962:	4683      	mov	fp, r0
 8006964:	f000 fe0e 	bl	8007584 <__mcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	dcb8      	bgt.n	80068de <_dtoa_r+0xa46>
 800696c:	d102      	bne.n	8006974 <_dtoa_r+0xadc>
 800696e:	f018 0f01 	tst.w	r8, #1
 8006972:	d1b4      	bne.n	80068de <_dtoa_r+0xa46>
 8006974:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006978:	1e6a      	subs	r2, r5, #1
 800697a:	2b30      	cmp	r3, #48	; 0x30
 800697c:	f47f af0f 	bne.w	800679e <_dtoa_r+0x906>
 8006980:	4615      	mov	r5, r2
 8006982:	e7f7      	b.n	8006974 <_dtoa_r+0xadc>
 8006984:	9b06      	ldr	r3, [sp, #24]
 8006986:	4293      	cmp	r3, r2
 8006988:	d105      	bne.n	8006996 <_dtoa_r+0xafe>
 800698a:	2331      	movs	r3, #49	; 0x31
 800698c:	9a06      	ldr	r2, [sp, #24]
 800698e:	f10a 0a01 	add.w	sl, sl, #1
 8006992:	7013      	strb	r3, [r2, #0]
 8006994:	e703      	b.n	800679e <_dtoa_r+0x906>
 8006996:	4615      	mov	r5, r2
 8006998:	e7a1      	b.n	80068de <_dtoa_r+0xa46>
 800699a:	4b17      	ldr	r3, [pc, #92]	; (80069f8 <_dtoa_r+0xb60>)
 800699c:	f7ff bae1 	b.w	8005f62 <_dtoa_r+0xca>
 80069a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f47f aabb 	bne.w	8005f1e <_dtoa_r+0x86>
 80069a8:	4b14      	ldr	r3, [pc, #80]	; (80069fc <_dtoa_r+0xb64>)
 80069aa:	f7ff bada 	b.w	8005f62 <_dtoa_r+0xca>
 80069ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f77f ae3f 	ble.w	8006634 <_dtoa_r+0x79c>
 80069b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069b8:	9308      	str	r3, [sp, #32]
 80069ba:	e653      	b.n	8006664 <_dtoa_r+0x7cc>
 80069bc:	9b04      	ldr	r3, [sp, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dc03      	bgt.n	80069ca <_dtoa_r+0xb32>
 80069c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	f73f aed5 	bgt.w	8006774 <_dtoa_r+0x8dc>
 80069ca:	9d06      	ldr	r5, [sp, #24]
 80069cc:	4631      	mov	r1, r6
 80069ce:	4658      	mov	r0, fp
 80069d0:	f7ff f9d2 	bl	8005d78 <quorem>
 80069d4:	9b06      	ldr	r3, [sp, #24]
 80069d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069da:	f805 8b01 	strb.w	r8, [r5], #1
 80069de:	9a04      	ldr	r2, [sp, #16]
 80069e0:	1aeb      	subs	r3, r5, r3
 80069e2:	429a      	cmp	r2, r3
 80069e4:	ddb5      	ble.n	8006952 <_dtoa_r+0xaba>
 80069e6:	4659      	mov	r1, fp
 80069e8:	2300      	movs	r3, #0
 80069ea:	220a      	movs	r2, #10
 80069ec:	4620      	mov	r0, r4
 80069ee:	f000 fbc1 	bl	8007174 <__multadd>
 80069f2:	4683      	mov	fp, r0
 80069f4:	e7ea      	b.n	80069cc <_dtoa_r+0xb34>
 80069f6:	bf00      	nop
 80069f8:	08007f70 	.word	0x08007f70
 80069fc:	08007fe8 	.word	0x08007fe8

08006a00 <rshift>:
 8006a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a02:	6906      	ldr	r6, [r0, #16]
 8006a04:	114b      	asrs	r3, r1, #5
 8006a06:	429e      	cmp	r6, r3
 8006a08:	f100 0414 	add.w	r4, r0, #20
 8006a0c:	dd31      	ble.n	8006a72 <rshift+0x72>
 8006a0e:	f011 011f 	ands.w	r1, r1, #31
 8006a12:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006a16:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006a1a:	d108      	bne.n	8006a2e <rshift+0x2e>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	42b2      	cmp	r2, r6
 8006a20:	460b      	mov	r3, r1
 8006a22:	d211      	bcs.n	8006a48 <rshift+0x48>
 8006a24:	f852 3b04 	ldr.w	r3, [r2], #4
 8006a28:	f841 3b04 	str.w	r3, [r1], #4
 8006a2c:	e7f7      	b.n	8006a1e <rshift+0x1e>
 8006a2e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006a32:	4623      	mov	r3, r4
 8006a34:	f1c1 0c20 	rsb	ip, r1, #32
 8006a38:	40cd      	lsrs	r5, r1
 8006a3a:	3204      	adds	r2, #4
 8006a3c:	42b2      	cmp	r2, r6
 8006a3e:	4617      	mov	r7, r2
 8006a40:	d30d      	bcc.n	8006a5e <rshift+0x5e>
 8006a42:	601d      	str	r5, [r3, #0]
 8006a44:	b105      	cbz	r5, 8006a48 <rshift+0x48>
 8006a46:	3304      	adds	r3, #4
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	eba3 0204 	sub.w	r2, r3, r4
 8006a4e:	bf08      	it	eq
 8006a50:	2300      	moveq	r3, #0
 8006a52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006a56:	6102      	str	r2, [r0, #16]
 8006a58:	bf08      	it	eq
 8006a5a:	6143      	streq	r3, [r0, #20]
 8006a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5e:	683f      	ldr	r7, [r7, #0]
 8006a60:	fa07 f70c 	lsl.w	r7, r7, ip
 8006a64:	433d      	orrs	r5, r7
 8006a66:	f843 5b04 	str.w	r5, [r3], #4
 8006a6a:	f852 5b04 	ldr.w	r5, [r2], #4
 8006a6e:	40cd      	lsrs	r5, r1
 8006a70:	e7e4      	b.n	8006a3c <rshift+0x3c>
 8006a72:	4623      	mov	r3, r4
 8006a74:	e7e8      	b.n	8006a48 <rshift+0x48>

08006a76 <__hexdig_fun>:
 8006a76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	d802      	bhi.n	8006a84 <__hexdig_fun+0xe>
 8006a7e:	3820      	subs	r0, #32
 8006a80:	b2c0      	uxtb	r0, r0
 8006a82:	4770      	bx	lr
 8006a84:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	d801      	bhi.n	8006a90 <__hexdig_fun+0x1a>
 8006a8c:	3847      	subs	r0, #71	; 0x47
 8006a8e:	e7f7      	b.n	8006a80 <__hexdig_fun+0xa>
 8006a90:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006a94:	2b05      	cmp	r3, #5
 8006a96:	d801      	bhi.n	8006a9c <__hexdig_fun+0x26>
 8006a98:	3827      	subs	r0, #39	; 0x27
 8006a9a:	e7f1      	b.n	8006a80 <__hexdig_fun+0xa>
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	4770      	bx	lr

08006aa0 <__gethex>:
 8006aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa4:	b08b      	sub	sp, #44	; 0x2c
 8006aa6:	9002      	str	r0, [sp, #8]
 8006aa8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006aaa:	468a      	mov	sl, r1
 8006aac:	4690      	mov	r8, r2
 8006aae:	9306      	str	r3, [sp, #24]
 8006ab0:	f000 fad1 	bl	8007056 <__localeconv_l>
 8006ab4:	6803      	ldr	r3, [r0, #0]
 8006ab6:	f04f 0b00 	mov.w	fp, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	9303      	str	r3, [sp, #12]
 8006abe:	f7f9 fb51 	bl	8000164 <strlen>
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	9001      	str	r0, [sp, #4]
 8006ac6:	4403      	add	r3, r0
 8006ac8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006acc:	9307      	str	r3, [sp, #28]
 8006ace:	f8da 3000 	ldr.w	r3, [sl]
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	461f      	mov	r7, r3
 8006ad6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006ada:	2830      	cmp	r0, #48	; 0x30
 8006adc:	d06c      	beq.n	8006bb8 <__gethex+0x118>
 8006ade:	f7ff ffca 	bl	8006a76 <__hexdig_fun>
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d16a      	bne.n	8006bbe <__gethex+0x11e>
 8006ae8:	9a01      	ldr	r2, [sp, #4]
 8006aea:	9903      	ldr	r1, [sp, #12]
 8006aec:	4638      	mov	r0, r7
 8006aee:	f001 f905 	bl	8007cfc <strncmp>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d166      	bne.n	8006bc4 <__gethex+0x124>
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	5cf8      	ldrb	r0, [r7, r3]
 8006afa:	18fe      	adds	r6, r7, r3
 8006afc:	f7ff ffbb 	bl	8006a76 <__hexdig_fun>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d062      	beq.n	8006bca <__gethex+0x12a>
 8006b04:	4633      	mov	r3, r6
 8006b06:	7818      	ldrb	r0, [r3, #0]
 8006b08:	461f      	mov	r7, r3
 8006b0a:	2830      	cmp	r0, #48	; 0x30
 8006b0c:	f103 0301 	add.w	r3, r3, #1
 8006b10:	d0f9      	beq.n	8006b06 <__gethex+0x66>
 8006b12:	f7ff ffb0 	bl	8006a76 <__hexdig_fun>
 8006b16:	fab0 f580 	clz	r5, r0
 8006b1a:	4634      	mov	r4, r6
 8006b1c:	f04f 0b01 	mov.w	fp, #1
 8006b20:	096d      	lsrs	r5, r5, #5
 8006b22:	463a      	mov	r2, r7
 8006b24:	4616      	mov	r6, r2
 8006b26:	7830      	ldrb	r0, [r6, #0]
 8006b28:	3201      	adds	r2, #1
 8006b2a:	f7ff ffa4 	bl	8006a76 <__hexdig_fun>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d1f8      	bne.n	8006b24 <__gethex+0x84>
 8006b32:	9a01      	ldr	r2, [sp, #4]
 8006b34:	9903      	ldr	r1, [sp, #12]
 8006b36:	4630      	mov	r0, r6
 8006b38:	f001 f8e0 	bl	8007cfc <strncmp>
 8006b3c:	b950      	cbnz	r0, 8006b54 <__gethex+0xb4>
 8006b3e:	b954      	cbnz	r4, 8006b56 <__gethex+0xb6>
 8006b40:	9b01      	ldr	r3, [sp, #4]
 8006b42:	18f4      	adds	r4, r6, r3
 8006b44:	4622      	mov	r2, r4
 8006b46:	4616      	mov	r6, r2
 8006b48:	7830      	ldrb	r0, [r6, #0]
 8006b4a:	3201      	adds	r2, #1
 8006b4c:	f7ff ff93 	bl	8006a76 <__hexdig_fun>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d1f8      	bne.n	8006b46 <__gethex+0xa6>
 8006b54:	b10c      	cbz	r4, 8006b5a <__gethex+0xba>
 8006b56:	1ba4      	subs	r4, r4, r6
 8006b58:	00a4      	lsls	r4, r4, #2
 8006b5a:	7833      	ldrb	r3, [r6, #0]
 8006b5c:	2b50      	cmp	r3, #80	; 0x50
 8006b5e:	d001      	beq.n	8006b64 <__gethex+0xc4>
 8006b60:	2b70      	cmp	r3, #112	; 0x70
 8006b62:	d140      	bne.n	8006be6 <__gethex+0x146>
 8006b64:	7873      	ldrb	r3, [r6, #1]
 8006b66:	2b2b      	cmp	r3, #43	; 0x2b
 8006b68:	d031      	beq.n	8006bce <__gethex+0x12e>
 8006b6a:	2b2d      	cmp	r3, #45	; 0x2d
 8006b6c:	d033      	beq.n	8006bd6 <__gethex+0x136>
 8006b6e:	f04f 0900 	mov.w	r9, #0
 8006b72:	1c71      	adds	r1, r6, #1
 8006b74:	7808      	ldrb	r0, [r1, #0]
 8006b76:	f7ff ff7e 	bl	8006a76 <__hexdig_fun>
 8006b7a:	1e43      	subs	r3, r0, #1
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b18      	cmp	r3, #24
 8006b80:	d831      	bhi.n	8006be6 <__gethex+0x146>
 8006b82:	f1a0 0210 	sub.w	r2, r0, #16
 8006b86:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b8a:	f7ff ff74 	bl	8006a76 <__hexdig_fun>
 8006b8e:	1e43      	subs	r3, r0, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b18      	cmp	r3, #24
 8006b94:	d922      	bls.n	8006bdc <__gethex+0x13c>
 8006b96:	f1b9 0f00 	cmp.w	r9, #0
 8006b9a:	d000      	beq.n	8006b9e <__gethex+0xfe>
 8006b9c:	4252      	negs	r2, r2
 8006b9e:	4414      	add	r4, r2
 8006ba0:	f8ca 1000 	str.w	r1, [sl]
 8006ba4:	b30d      	cbz	r5, 8006bea <__gethex+0x14a>
 8006ba6:	f1bb 0f00 	cmp.w	fp, #0
 8006baa:	bf0c      	ite	eq
 8006bac:	2706      	moveq	r7, #6
 8006bae:	2700      	movne	r7, #0
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	b00b      	add	sp, #44	; 0x2c
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb8:	f10b 0b01 	add.w	fp, fp, #1
 8006bbc:	e78a      	b.n	8006ad4 <__gethex+0x34>
 8006bbe:	2500      	movs	r5, #0
 8006bc0:	462c      	mov	r4, r5
 8006bc2:	e7ae      	b.n	8006b22 <__gethex+0x82>
 8006bc4:	463e      	mov	r6, r7
 8006bc6:	2501      	movs	r5, #1
 8006bc8:	e7c7      	b.n	8006b5a <__gethex+0xba>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	e7fb      	b.n	8006bc6 <__gethex+0x126>
 8006bce:	f04f 0900 	mov.w	r9, #0
 8006bd2:	1cb1      	adds	r1, r6, #2
 8006bd4:	e7ce      	b.n	8006b74 <__gethex+0xd4>
 8006bd6:	f04f 0901 	mov.w	r9, #1
 8006bda:	e7fa      	b.n	8006bd2 <__gethex+0x132>
 8006bdc:	230a      	movs	r3, #10
 8006bde:	fb03 0202 	mla	r2, r3, r2, r0
 8006be2:	3a10      	subs	r2, #16
 8006be4:	e7cf      	b.n	8006b86 <__gethex+0xe6>
 8006be6:	4631      	mov	r1, r6
 8006be8:	e7da      	b.n	8006ba0 <__gethex+0x100>
 8006bea:	4629      	mov	r1, r5
 8006bec:	1bf3      	subs	r3, r6, r7
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b07      	cmp	r3, #7
 8006bf2:	dc49      	bgt.n	8006c88 <__gethex+0x1e8>
 8006bf4:	9802      	ldr	r0, [sp, #8]
 8006bf6:	f000 fa72 	bl	80070de <_Balloc>
 8006bfa:	f04f 0b00 	mov.w	fp, #0
 8006bfe:	4605      	mov	r5, r0
 8006c00:	46da      	mov	sl, fp
 8006c02:	9b01      	ldr	r3, [sp, #4]
 8006c04:	f100 0914 	add.w	r9, r0, #20
 8006c08:	f1c3 0301 	rsb	r3, r3, #1
 8006c0c:	f8cd 9010 	str.w	r9, [sp, #16]
 8006c10:	9308      	str	r3, [sp, #32]
 8006c12:	42b7      	cmp	r7, r6
 8006c14:	d33b      	bcc.n	8006c8e <__gethex+0x1ee>
 8006c16:	9804      	ldr	r0, [sp, #16]
 8006c18:	f840 ab04 	str.w	sl, [r0], #4
 8006c1c:	eba0 0009 	sub.w	r0, r0, r9
 8006c20:	1080      	asrs	r0, r0, #2
 8006c22:	6128      	str	r0, [r5, #16]
 8006c24:	0147      	lsls	r7, r0, #5
 8006c26:	4650      	mov	r0, sl
 8006c28:	f000 fb1d 	bl	8007266 <__hi0bits>
 8006c2c:	f8d8 6000 	ldr.w	r6, [r8]
 8006c30:	1a3f      	subs	r7, r7, r0
 8006c32:	42b7      	cmp	r7, r6
 8006c34:	dd64      	ble.n	8006d00 <__gethex+0x260>
 8006c36:	1bbf      	subs	r7, r7, r6
 8006c38:	4639      	mov	r1, r7
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f000 fe27 	bl	800788e <__any_on>
 8006c40:	4682      	mov	sl, r0
 8006c42:	b178      	cbz	r0, 8006c64 <__gethex+0x1c4>
 8006c44:	f04f 0a01 	mov.w	sl, #1
 8006c48:	1e7b      	subs	r3, r7, #1
 8006c4a:	1159      	asrs	r1, r3, #5
 8006c4c:	f003 021f 	and.w	r2, r3, #31
 8006c50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006c54:	fa0a f202 	lsl.w	r2, sl, r2
 8006c58:	420a      	tst	r2, r1
 8006c5a:	d003      	beq.n	8006c64 <__gethex+0x1c4>
 8006c5c:	4553      	cmp	r3, sl
 8006c5e:	dc46      	bgt.n	8006cee <__gethex+0x24e>
 8006c60:	f04f 0a02 	mov.w	sl, #2
 8006c64:	4639      	mov	r1, r7
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7ff feca 	bl	8006a00 <rshift>
 8006c6c:	443c      	add	r4, r7
 8006c6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	da52      	bge.n	8006d1c <__gethex+0x27c>
 8006c76:	4629      	mov	r1, r5
 8006c78:	9802      	ldr	r0, [sp, #8]
 8006c7a:	f000 fa64 	bl	8007146 <_Bfree>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c82:	27a3      	movs	r7, #163	; 0xa3
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e793      	b.n	8006bb0 <__gethex+0x110>
 8006c88:	3101      	adds	r1, #1
 8006c8a:	105b      	asrs	r3, r3, #1
 8006c8c:	e7b0      	b.n	8006bf0 <__gethex+0x150>
 8006c8e:	1e73      	subs	r3, r6, #1
 8006c90:	9305      	str	r3, [sp, #20]
 8006c92:	9a07      	ldr	r2, [sp, #28]
 8006c94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d018      	beq.n	8006cce <__gethex+0x22e>
 8006c9c:	f1bb 0f20 	cmp.w	fp, #32
 8006ca0:	d107      	bne.n	8006cb2 <__gethex+0x212>
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	f8c3 a000 	str.w	sl, [r3]
 8006ca8:	f04f 0a00 	mov.w	sl, #0
 8006cac:	46d3      	mov	fp, sl
 8006cae:	3304      	adds	r3, #4
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006cb6:	f7ff fede 	bl	8006a76 <__hexdig_fun>
 8006cba:	f000 000f 	and.w	r0, r0, #15
 8006cbe:	fa00 f00b 	lsl.w	r0, r0, fp
 8006cc2:	ea4a 0a00 	orr.w	sl, sl, r0
 8006cc6:	f10b 0b04 	add.w	fp, fp, #4
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	e00d      	b.n	8006cea <__gethex+0x24a>
 8006cce:	9b05      	ldr	r3, [sp, #20]
 8006cd0:	9a08      	ldr	r2, [sp, #32]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	42bb      	cmp	r3, r7
 8006cd6:	d3e1      	bcc.n	8006c9c <__gethex+0x1fc>
 8006cd8:	4618      	mov	r0, r3
 8006cda:	9a01      	ldr	r2, [sp, #4]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce0:	f001 f80c 	bl	8007cfc <strncmp>
 8006ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d1d8      	bne.n	8006c9c <__gethex+0x1fc>
 8006cea:	461e      	mov	r6, r3
 8006cec:	e791      	b.n	8006c12 <__gethex+0x172>
 8006cee:	1eb9      	subs	r1, r7, #2
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	f000 fdcc 	bl	800788e <__any_on>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d0b2      	beq.n	8006c60 <__gethex+0x1c0>
 8006cfa:	f04f 0a03 	mov.w	sl, #3
 8006cfe:	e7b1      	b.n	8006c64 <__gethex+0x1c4>
 8006d00:	da09      	bge.n	8006d16 <__gethex+0x276>
 8006d02:	1bf7      	subs	r7, r6, r7
 8006d04:	4629      	mov	r1, r5
 8006d06:	463a      	mov	r2, r7
 8006d08:	9802      	ldr	r0, [sp, #8]
 8006d0a:	f000 fbe7 	bl	80074dc <__lshift>
 8006d0e:	4605      	mov	r5, r0
 8006d10:	1be4      	subs	r4, r4, r7
 8006d12:	f100 0914 	add.w	r9, r0, #20
 8006d16:	f04f 0a00 	mov.w	sl, #0
 8006d1a:	e7a8      	b.n	8006c6e <__gethex+0x1ce>
 8006d1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006d20:	42a0      	cmp	r0, r4
 8006d22:	dd6b      	ble.n	8006dfc <__gethex+0x35c>
 8006d24:	1b04      	subs	r4, r0, r4
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	dc2e      	bgt.n	8006d88 <__gethex+0x2e8>
 8006d2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d022      	beq.n	8006d78 <__gethex+0x2d8>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d024      	beq.n	8006d80 <__gethex+0x2e0>
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d115      	bne.n	8006d66 <__gethex+0x2c6>
 8006d3a:	42a6      	cmp	r6, r4
 8006d3c:	d113      	bne.n	8006d66 <__gethex+0x2c6>
 8006d3e:	2e01      	cmp	r6, #1
 8006d40:	dc0b      	bgt.n	8006d5a <__gethex+0x2ba>
 8006d42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d46:	9a06      	ldr	r2, [sp, #24]
 8006d48:	2762      	movs	r7, #98	; 0x62
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	612b      	str	r3, [r5, #16]
 8006d50:	f8c9 3000 	str.w	r3, [r9]
 8006d54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d56:	601d      	str	r5, [r3, #0]
 8006d58:	e72a      	b.n	8006bb0 <__gethex+0x110>
 8006d5a:	1e71      	subs	r1, r6, #1
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fd96 	bl	800788e <__any_on>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	d1ed      	bne.n	8006d42 <__gethex+0x2a2>
 8006d66:	4629      	mov	r1, r5
 8006d68:	9802      	ldr	r0, [sp, #8]
 8006d6a:	f000 f9ec 	bl	8007146 <_Bfree>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d72:	2750      	movs	r7, #80	; 0x50
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e71b      	b.n	8006bb0 <__gethex+0x110>
 8006d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0e1      	beq.n	8006d42 <__gethex+0x2a2>
 8006d7e:	e7f2      	b.n	8006d66 <__gethex+0x2c6>
 8006d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1dd      	bne.n	8006d42 <__gethex+0x2a2>
 8006d86:	e7ee      	b.n	8006d66 <__gethex+0x2c6>
 8006d88:	1e67      	subs	r7, r4, #1
 8006d8a:	f1ba 0f00 	cmp.w	sl, #0
 8006d8e:	d132      	bne.n	8006df6 <__gethex+0x356>
 8006d90:	b127      	cbz	r7, 8006d9c <__gethex+0x2fc>
 8006d92:	4639      	mov	r1, r7
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 fd7a 	bl	800788e <__any_on>
 8006d9a:	4682      	mov	sl, r0
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	117a      	asrs	r2, r7, #5
 8006da0:	f007 071f 	and.w	r7, r7, #31
 8006da4:	fa03 f707 	lsl.w	r7, r3, r7
 8006da8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006dac:	4621      	mov	r1, r4
 8006dae:	421f      	tst	r7, r3
 8006db0:	f04f 0702 	mov.w	r7, #2
 8006db4:	4628      	mov	r0, r5
 8006db6:	bf18      	it	ne
 8006db8:	f04a 0a02 	orrne.w	sl, sl, #2
 8006dbc:	1b36      	subs	r6, r6, r4
 8006dbe:	f7ff fe1f 	bl	8006a00 <rshift>
 8006dc2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006dc6:	f1ba 0f00 	cmp.w	sl, #0
 8006dca:	d048      	beq.n	8006e5e <__gethex+0x3be>
 8006dcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d015      	beq.n	8006e00 <__gethex+0x360>
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d017      	beq.n	8006e08 <__gethex+0x368>
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d109      	bne.n	8006df0 <__gethex+0x350>
 8006ddc:	f01a 0f02 	tst.w	sl, #2
 8006de0:	d006      	beq.n	8006df0 <__gethex+0x350>
 8006de2:	f8d9 3000 	ldr.w	r3, [r9]
 8006de6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006dea:	f01a 0f01 	tst.w	sl, #1
 8006dee:	d10e      	bne.n	8006e0e <__gethex+0x36e>
 8006df0:	f047 0710 	orr.w	r7, r7, #16
 8006df4:	e033      	b.n	8006e5e <__gethex+0x3be>
 8006df6:	f04f 0a01 	mov.w	sl, #1
 8006dfa:	e7cf      	b.n	8006d9c <__gethex+0x2fc>
 8006dfc:	2701      	movs	r7, #1
 8006dfe:	e7e2      	b.n	8006dc6 <__gethex+0x326>
 8006e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e02:	f1c3 0301 	rsb	r3, r3, #1
 8006e06:	9315      	str	r3, [sp, #84]	; 0x54
 8006e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0f0      	beq.n	8006df0 <__gethex+0x350>
 8006e0e:	f04f 0c00 	mov.w	ip, #0
 8006e12:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006e16:	f105 0314 	add.w	r3, r5, #20
 8006e1a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006e1e:	eb03 010a 	add.w	r1, r3, sl
 8006e22:	4618      	mov	r0, r3
 8006e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e28:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006e2c:	d01c      	beq.n	8006e68 <__gethex+0x3c8>
 8006e2e:	3201      	adds	r2, #1
 8006e30:	6002      	str	r2, [r0, #0]
 8006e32:	2f02      	cmp	r7, #2
 8006e34:	f105 0314 	add.w	r3, r5, #20
 8006e38:	d138      	bne.n	8006eac <__gethex+0x40c>
 8006e3a:	f8d8 2000 	ldr.w	r2, [r8]
 8006e3e:	3a01      	subs	r2, #1
 8006e40:	42b2      	cmp	r2, r6
 8006e42:	d10a      	bne.n	8006e5a <__gethex+0x3ba>
 8006e44:	2201      	movs	r2, #1
 8006e46:	1171      	asrs	r1, r6, #5
 8006e48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e4c:	f006 061f 	and.w	r6, r6, #31
 8006e50:	fa02 f606 	lsl.w	r6, r2, r6
 8006e54:	421e      	tst	r6, r3
 8006e56:	bf18      	it	ne
 8006e58:	4617      	movne	r7, r2
 8006e5a:	f047 0720 	orr.w	r7, r7, #32
 8006e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e60:	601d      	str	r5, [r3, #0]
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	601c      	str	r4, [r3, #0]
 8006e66:	e6a3      	b.n	8006bb0 <__gethex+0x110>
 8006e68:	4299      	cmp	r1, r3
 8006e6a:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e6e:	d8d8      	bhi.n	8006e22 <__gethex+0x382>
 8006e70:	68ab      	ldr	r3, [r5, #8]
 8006e72:	4599      	cmp	r9, r3
 8006e74:	db12      	blt.n	8006e9c <__gethex+0x3fc>
 8006e76:	6869      	ldr	r1, [r5, #4]
 8006e78:	9802      	ldr	r0, [sp, #8]
 8006e7a:	3101      	adds	r1, #1
 8006e7c:	f000 f92f 	bl	80070de <_Balloc>
 8006e80:	4683      	mov	fp, r0
 8006e82:	692a      	ldr	r2, [r5, #16]
 8006e84:	f105 010c 	add.w	r1, r5, #12
 8006e88:	3202      	adds	r2, #2
 8006e8a:	0092      	lsls	r2, r2, #2
 8006e8c:	300c      	adds	r0, #12
 8006e8e:	f000 f91b 	bl	80070c8 <memcpy>
 8006e92:	4629      	mov	r1, r5
 8006e94:	9802      	ldr	r0, [sp, #8]
 8006e96:	f000 f956 	bl	8007146 <_Bfree>
 8006e9a:	465d      	mov	r5, fp
 8006e9c:	692b      	ldr	r3, [r5, #16]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	612a      	str	r2, [r5, #16]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006ea8:	615a      	str	r2, [r3, #20]
 8006eaa:	e7c2      	b.n	8006e32 <__gethex+0x392>
 8006eac:	692a      	ldr	r2, [r5, #16]
 8006eae:	454a      	cmp	r2, r9
 8006eb0:	dd0b      	ble.n	8006eca <__gethex+0x42a>
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f7ff fda3 	bl	8006a00 <rshift>
 8006eba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	f6ff aed8 	blt.w	8006c76 <__gethex+0x1d6>
 8006ec6:	2701      	movs	r7, #1
 8006ec8:	e7c7      	b.n	8006e5a <__gethex+0x3ba>
 8006eca:	f016 061f 	ands.w	r6, r6, #31
 8006ece:	d0fa      	beq.n	8006ec6 <__gethex+0x426>
 8006ed0:	449a      	add	sl, r3
 8006ed2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006ed6:	f000 f9c6 	bl	8007266 <__hi0bits>
 8006eda:	f1c6 0620 	rsb	r6, r6, #32
 8006ede:	42b0      	cmp	r0, r6
 8006ee0:	dbe7      	blt.n	8006eb2 <__gethex+0x412>
 8006ee2:	e7f0      	b.n	8006ec6 <__gethex+0x426>

08006ee4 <L_shift>:
 8006ee4:	f1c2 0208 	rsb	r2, r2, #8
 8006ee8:	0092      	lsls	r2, r2, #2
 8006eea:	b570      	push	{r4, r5, r6, lr}
 8006eec:	f1c2 0620 	rsb	r6, r2, #32
 8006ef0:	6843      	ldr	r3, [r0, #4]
 8006ef2:	6804      	ldr	r4, [r0, #0]
 8006ef4:	fa03 f506 	lsl.w	r5, r3, r6
 8006ef8:	432c      	orrs	r4, r5
 8006efa:	40d3      	lsrs	r3, r2
 8006efc:	6004      	str	r4, [r0, #0]
 8006efe:	f840 3f04 	str.w	r3, [r0, #4]!
 8006f02:	4288      	cmp	r0, r1
 8006f04:	d3f4      	bcc.n	8006ef0 <L_shift+0xc>
 8006f06:	bd70      	pop	{r4, r5, r6, pc}

08006f08 <__match>:
 8006f08:	b530      	push	{r4, r5, lr}
 8006f0a:	6803      	ldr	r3, [r0, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f12:	b914      	cbnz	r4, 8006f1a <__match+0x12>
 8006f14:	6003      	str	r3, [r0, #0]
 8006f16:	2001      	movs	r0, #1
 8006f18:	bd30      	pop	{r4, r5, pc}
 8006f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006f22:	2d19      	cmp	r5, #25
 8006f24:	bf98      	it	ls
 8006f26:	3220      	addls	r2, #32
 8006f28:	42a2      	cmp	r2, r4
 8006f2a:	d0f0      	beq.n	8006f0e <__match+0x6>
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	e7f3      	b.n	8006f18 <__match+0x10>

08006f30 <__hexnan>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	2500      	movs	r5, #0
 8006f36:	680b      	ldr	r3, [r1, #0]
 8006f38:	4682      	mov	sl, r0
 8006f3a:	115f      	asrs	r7, r3, #5
 8006f3c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006f40:	f013 031f 	ands.w	r3, r3, #31
 8006f44:	bf18      	it	ne
 8006f46:	3704      	addne	r7, #4
 8006f48:	1f3e      	subs	r6, r7, #4
 8006f4a:	4690      	mov	r8, r2
 8006f4c:	46b1      	mov	r9, r6
 8006f4e:	4634      	mov	r4, r6
 8006f50:	46ab      	mov	fp, r5
 8006f52:	b087      	sub	sp, #28
 8006f54:	6801      	ldr	r1, [r0, #0]
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	f847 5c04 	str.w	r5, [r7, #-4]
 8006f5c:	9502      	str	r5, [sp, #8]
 8006f5e:	784a      	ldrb	r2, [r1, #1]
 8006f60:	1c4b      	adds	r3, r1, #1
 8006f62:	9303      	str	r3, [sp, #12]
 8006f64:	b342      	cbz	r2, 8006fb8 <__hexnan+0x88>
 8006f66:	4610      	mov	r0, r2
 8006f68:	9105      	str	r1, [sp, #20]
 8006f6a:	9204      	str	r2, [sp, #16]
 8006f6c:	f7ff fd83 	bl	8006a76 <__hexdig_fun>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	d143      	bne.n	8006ffc <__hexnan+0xcc>
 8006f74:	9a04      	ldr	r2, [sp, #16]
 8006f76:	9905      	ldr	r1, [sp, #20]
 8006f78:	2a20      	cmp	r2, #32
 8006f7a:	d818      	bhi.n	8006fae <__hexnan+0x7e>
 8006f7c:	9b02      	ldr	r3, [sp, #8]
 8006f7e:	459b      	cmp	fp, r3
 8006f80:	dd13      	ble.n	8006faa <__hexnan+0x7a>
 8006f82:	454c      	cmp	r4, r9
 8006f84:	d206      	bcs.n	8006f94 <__hexnan+0x64>
 8006f86:	2d07      	cmp	r5, #7
 8006f88:	dc04      	bgt.n	8006f94 <__hexnan+0x64>
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f7ff ffa8 	bl	8006ee4 <L_shift>
 8006f94:	4544      	cmp	r4, r8
 8006f96:	d944      	bls.n	8007022 <__hexnan+0xf2>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f1a4 0904 	sub.w	r9, r4, #4
 8006f9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fa2:	461d      	mov	r5, r3
 8006fa4:	464c      	mov	r4, r9
 8006fa6:	f8cd b008 	str.w	fp, [sp, #8]
 8006faa:	9903      	ldr	r1, [sp, #12]
 8006fac:	e7d7      	b.n	8006f5e <__hexnan+0x2e>
 8006fae:	2a29      	cmp	r2, #41	; 0x29
 8006fb0:	d14a      	bne.n	8007048 <__hexnan+0x118>
 8006fb2:	3102      	adds	r1, #2
 8006fb4:	f8ca 1000 	str.w	r1, [sl]
 8006fb8:	f1bb 0f00 	cmp.w	fp, #0
 8006fbc:	d044      	beq.n	8007048 <__hexnan+0x118>
 8006fbe:	454c      	cmp	r4, r9
 8006fc0:	d206      	bcs.n	8006fd0 <__hexnan+0xa0>
 8006fc2:	2d07      	cmp	r5, #7
 8006fc4:	dc04      	bgt.n	8006fd0 <__hexnan+0xa0>
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff ff8a 	bl	8006ee4 <L_shift>
 8006fd0:	4544      	cmp	r4, r8
 8006fd2:	d928      	bls.n	8007026 <__hexnan+0xf6>
 8006fd4:	4643      	mov	r3, r8
 8006fd6:	f854 2b04 	ldr.w	r2, [r4], #4
 8006fda:	42a6      	cmp	r6, r4
 8006fdc:	f843 2b04 	str.w	r2, [r3], #4
 8006fe0:	d2f9      	bcs.n	8006fd6 <__hexnan+0xa6>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f843 2b04 	str.w	r2, [r3], #4
 8006fe8:	429e      	cmp	r6, r3
 8006fea:	d2fb      	bcs.n	8006fe4 <__hexnan+0xb4>
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	b91b      	cbnz	r3, 8006ff8 <__hexnan+0xc8>
 8006ff0:	4546      	cmp	r6, r8
 8006ff2:	d127      	bne.n	8007044 <__hexnan+0x114>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	2005      	movs	r0, #5
 8006ffa:	e026      	b.n	800704a <__hexnan+0x11a>
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	2d08      	cmp	r5, #8
 8007000:	f10b 0b01 	add.w	fp, fp, #1
 8007004:	dd06      	ble.n	8007014 <__hexnan+0xe4>
 8007006:	4544      	cmp	r4, r8
 8007008:	d9cf      	bls.n	8006faa <__hexnan+0x7a>
 800700a:	2300      	movs	r3, #0
 800700c:	2501      	movs	r5, #1
 800700e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007012:	3c04      	subs	r4, #4
 8007014:	6822      	ldr	r2, [r4, #0]
 8007016:	f000 000f 	and.w	r0, r0, #15
 800701a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800701e:	6020      	str	r0, [r4, #0]
 8007020:	e7c3      	b.n	8006faa <__hexnan+0x7a>
 8007022:	2508      	movs	r5, #8
 8007024:	e7c1      	b.n	8006faa <__hexnan+0x7a>
 8007026:	9b01      	ldr	r3, [sp, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0df      	beq.n	8006fec <__hexnan+0xbc>
 800702c:	f04f 32ff 	mov.w	r2, #4294967295
 8007030:	f1c3 0320 	rsb	r3, r3, #32
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800703c:	401a      	ands	r2, r3
 800703e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007042:	e7d3      	b.n	8006fec <__hexnan+0xbc>
 8007044:	3e04      	subs	r6, #4
 8007046:	e7d1      	b.n	8006fec <__hexnan+0xbc>
 8007048:	2004      	movs	r0, #4
 800704a:	b007      	add	sp, #28
 800704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007050 <__locale_ctype_ptr_l>:
 8007050:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007054:	4770      	bx	lr

08007056 <__localeconv_l>:
 8007056:	30f0      	adds	r0, #240	; 0xf0
 8007058:	4770      	bx	lr
	...

0800705c <_localeconv_r>:
 800705c:	4b04      	ldr	r3, [pc, #16]	; (8007070 <_localeconv_r+0x14>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a18      	ldr	r0, [r3, #32]
 8007062:	4b04      	ldr	r3, [pc, #16]	; (8007074 <_localeconv_r+0x18>)
 8007064:	2800      	cmp	r0, #0
 8007066:	bf08      	it	eq
 8007068:	4618      	moveq	r0, r3
 800706a:	30f0      	adds	r0, #240	; 0xf0
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000002c 	.word	0x2000002c
 8007074:	20000090 	.word	0x20000090

08007078 <malloc>:
 8007078:	4b02      	ldr	r3, [pc, #8]	; (8007084 <malloc+0xc>)
 800707a:	4601      	mov	r1, r0
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	f000 bc81 	b.w	8007984 <_malloc_r>
 8007082:	bf00      	nop
 8007084:	2000002c 	.word	0x2000002c

08007088 <__ascii_mbtowc>:
 8007088:	b082      	sub	sp, #8
 800708a:	b901      	cbnz	r1, 800708e <__ascii_mbtowc+0x6>
 800708c:	a901      	add	r1, sp, #4
 800708e:	b142      	cbz	r2, 80070a2 <__ascii_mbtowc+0x1a>
 8007090:	b14b      	cbz	r3, 80070a6 <__ascii_mbtowc+0x1e>
 8007092:	7813      	ldrb	r3, [r2, #0]
 8007094:	600b      	str	r3, [r1, #0]
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	1c10      	adds	r0, r2, #0
 800709a:	bf18      	it	ne
 800709c:	2001      	movne	r0, #1
 800709e:	b002      	add	sp, #8
 80070a0:	4770      	bx	lr
 80070a2:	4610      	mov	r0, r2
 80070a4:	e7fb      	b.n	800709e <__ascii_mbtowc+0x16>
 80070a6:	f06f 0001 	mvn.w	r0, #1
 80070aa:	e7f8      	b.n	800709e <__ascii_mbtowc+0x16>

080070ac <memchr>:
 80070ac:	b510      	push	{r4, lr}
 80070ae:	b2c9      	uxtb	r1, r1
 80070b0:	4402      	add	r2, r0
 80070b2:	4290      	cmp	r0, r2
 80070b4:	4603      	mov	r3, r0
 80070b6:	d101      	bne.n	80070bc <memchr+0x10>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e003      	b.n	80070c4 <memchr+0x18>
 80070bc:	781c      	ldrb	r4, [r3, #0]
 80070be:	3001      	adds	r0, #1
 80070c0:	428c      	cmp	r4, r1
 80070c2:	d1f6      	bne.n	80070b2 <memchr+0x6>
 80070c4:	4618      	mov	r0, r3
 80070c6:	bd10      	pop	{r4, pc}

080070c8 <memcpy>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	1e43      	subs	r3, r0, #1
 80070cc:	440a      	add	r2, r1
 80070ce:	4291      	cmp	r1, r2
 80070d0:	d100      	bne.n	80070d4 <memcpy+0xc>
 80070d2:	bd10      	pop	{r4, pc}
 80070d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070dc:	e7f7      	b.n	80070ce <memcpy+0x6>

080070de <_Balloc>:
 80070de:	b570      	push	{r4, r5, r6, lr}
 80070e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070e2:	4604      	mov	r4, r0
 80070e4:	460e      	mov	r6, r1
 80070e6:	b93d      	cbnz	r5, 80070f8 <_Balloc+0x1a>
 80070e8:	2010      	movs	r0, #16
 80070ea:	f7ff ffc5 	bl	8007078 <malloc>
 80070ee:	6260      	str	r0, [r4, #36]	; 0x24
 80070f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070f4:	6005      	str	r5, [r0, #0]
 80070f6:	60c5      	str	r5, [r0, #12]
 80070f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070fa:	68eb      	ldr	r3, [r5, #12]
 80070fc:	b183      	cbz	r3, 8007120 <_Balloc+0x42>
 80070fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007106:	b9b8      	cbnz	r0, 8007138 <_Balloc+0x5a>
 8007108:	2101      	movs	r1, #1
 800710a:	fa01 f506 	lsl.w	r5, r1, r6
 800710e:	1d6a      	adds	r2, r5, #5
 8007110:	0092      	lsls	r2, r2, #2
 8007112:	4620      	mov	r0, r4
 8007114:	f000 fbdc 	bl	80078d0 <_calloc_r>
 8007118:	b160      	cbz	r0, 8007134 <_Balloc+0x56>
 800711a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800711e:	e00e      	b.n	800713e <_Balloc+0x60>
 8007120:	2221      	movs	r2, #33	; 0x21
 8007122:	2104      	movs	r1, #4
 8007124:	4620      	mov	r0, r4
 8007126:	f000 fbd3 	bl	80078d0 <_calloc_r>
 800712a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800712c:	60e8      	str	r0, [r5, #12]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e4      	bne.n	80070fe <_Balloc+0x20>
 8007134:	2000      	movs	r0, #0
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	6802      	ldr	r2, [r0, #0]
 800713a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800713e:	2300      	movs	r3, #0
 8007140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007144:	e7f7      	b.n	8007136 <_Balloc+0x58>

08007146 <_Bfree>:
 8007146:	b570      	push	{r4, r5, r6, lr}
 8007148:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800714a:	4606      	mov	r6, r0
 800714c:	460d      	mov	r5, r1
 800714e:	b93c      	cbnz	r4, 8007160 <_Bfree+0x1a>
 8007150:	2010      	movs	r0, #16
 8007152:	f7ff ff91 	bl	8007078 <malloc>
 8007156:	6270      	str	r0, [r6, #36]	; 0x24
 8007158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800715c:	6004      	str	r4, [r0, #0]
 800715e:	60c4      	str	r4, [r0, #12]
 8007160:	b13d      	cbz	r5, 8007172 <_Bfree+0x2c>
 8007162:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007164:	686a      	ldr	r2, [r5, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800716c:	6029      	str	r1, [r5, #0]
 800716e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007172:	bd70      	pop	{r4, r5, r6, pc}

08007174 <__multadd>:
 8007174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007178:	461f      	mov	r7, r3
 800717a:	4606      	mov	r6, r0
 800717c:	460c      	mov	r4, r1
 800717e:	2300      	movs	r3, #0
 8007180:	690d      	ldr	r5, [r1, #16]
 8007182:	f101 0c14 	add.w	ip, r1, #20
 8007186:	f8dc 0000 	ldr.w	r0, [ip]
 800718a:	3301      	adds	r3, #1
 800718c:	b281      	uxth	r1, r0
 800718e:	fb02 7101 	mla	r1, r2, r1, r7
 8007192:	0c00      	lsrs	r0, r0, #16
 8007194:	0c0f      	lsrs	r7, r1, #16
 8007196:	fb02 7000 	mla	r0, r2, r0, r7
 800719a:	b289      	uxth	r1, r1
 800719c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80071a0:	429d      	cmp	r5, r3
 80071a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80071a6:	f84c 1b04 	str.w	r1, [ip], #4
 80071aa:	dcec      	bgt.n	8007186 <__multadd+0x12>
 80071ac:	b1d7      	cbz	r7, 80071e4 <__multadd+0x70>
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	42ab      	cmp	r3, r5
 80071b2:	dc12      	bgt.n	80071da <__multadd+0x66>
 80071b4:	6861      	ldr	r1, [r4, #4]
 80071b6:	4630      	mov	r0, r6
 80071b8:	3101      	adds	r1, #1
 80071ba:	f7ff ff90 	bl	80070de <_Balloc>
 80071be:	4680      	mov	r8, r0
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	f104 010c 	add.w	r1, r4, #12
 80071c6:	3202      	adds	r2, #2
 80071c8:	0092      	lsls	r2, r2, #2
 80071ca:	300c      	adds	r0, #12
 80071cc:	f7ff ff7c 	bl	80070c8 <memcpy>
 80071d0:	4621      	mov	r1, r4
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff ffb7 	bl	8007146 <_Bfree>
 80071d8:	4644      	mov	r4, r8
 80071da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071de:	3501      	adds	r5, #1
 80071e0:	615f      	str	r7, [r3, #20]
 80071e2:	6125      	str	r5, [r4, #16]
 80071e4:	4620      	mov	r0, r4
 80071e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071ea <__s2b>:
 80071ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ee:	4615      	mov	r5, r2
 80071f0:	2209      	movs	r2, #9
 80071f2:	461f      	mov	r7, r3
 80071f4:	3308      	adds	r3, #8
 80071f6:	460c      	mov	r4, r1
 80071f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071fc:	4606      	mov	r6, r0
 80071fe:	2201      	movs	r2, #1
 8007200:	2100      	movs	r1, #0
 8007202:	429a      	cmp	r2, r3
 8007204:	db20      	blt.n	8007248 <__s2b+0x5e>
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff ff69 	bl	80070de <_Balloc>
 800720c:	9b08      	ldr	r3, [sp, #32]
 800720e:	2d09      	cmp	r5, #9
 8007210:	6143      	str	r3, [r0, #20]
 8007212:	f04f 0301 	mov.w	r3, #1
 8007216:	6103      	str	r3, [r0, #16]
 8007218:	dd19      	ble.n	800724e <__s2b+0x64>
 800721a:	f104 0809 	add.w	r8, r4, #9
 800721e:	46c1      	mov	r9, r8
 8007220:	442c      	add	r4, r5
 8007222:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007226:	4601      	mov	r1, r0
 8007228:	3b30      	subs	r3, #48	; 0x30
 800722a:	220a      	movs	r2, #10
 800722c:	4630      	mov	r0, r6
 800722e:	f7ff ffa1 	bl	8007174 <__multadd>
 8007232:	45a1      	cmp	r9, r4
 8007234:	d1f5      	bne.n	8007222 <__s2b+0x38>
 8007236:	eb08 0405 	add.w	r4, r8, r5
 800723a:	3c08      	subs	r4, #8
 800723c:	1b2d      	subs	r5, r5, r4
 800723e:	1963      	adds	r3, r4, r5
 8007240:	42bb      	cmp	r3, r7
 8007242:	db07      	blt.n	8007254 <__s2b+0x6a>
 8007244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007248:	0052      	lsls	r2, r2, #1
 800724a:	3101      	adds	r1, #1
 800724c:	e7d9      	b.n	8007202 <__s2b+0x18>
 800724e:	340a      	adds	r4, #10
 8007250:	2509      	movs	r5, #9
 8007252:	e7f3      	b.n	800723c <__s2b+0x52>
 8007254:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007258:	4601      	mov	r1, r0
 800725a:	3b30      	subs	r3, #48	; 0x30
 800725c:	220a      	movs	r2, #10
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff ff88 	bl	8007174 <__multadd>
 8007264:	e7eb      	b.n	800723e <__s2b+0x54>

08007266 <__hi0bits>:
 8007266:	0c02      	lsrs	r2, r0, #16
 8007268:	0412      	lsls	r2, r2, #16
 800726a:	4603      	mov	r3, r0
 800726c:	b9b2      	cbnz	r2, 800729c <__hi0bits+0x36>
 800726e:	0403      	lsls	r3, r0, #16
 8007270:	2010      	movs	r0, #16
 8007272:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007276:	bf04      	itt	eq
 8007278:	021b      	lsleq	r3, r3, #8
 800727a:	3008      	addeq	r0, #8
 800727c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007280:	bf04      	itt	eq
 8007282:	011b      	lsleq	r3, r3, #4
 8007284:	3004      	addeq	r0, #4
 8007286:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800728a:	bf04      	itt	eq
 800728c:	009b      	lsleq	r3, r3, #2
 800728e:	3002      	addeq	r0, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	db06      	blt.n	80072a2 <__hi0bits+0x3c>
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	d503      	bpl.n	80072a0 <__hi0bits+0x3a>
 8007298:	3001      	adds	r0, #1
 800729a:	4770      	bx	lr
 800729c:	2000      	movs	r0, #0
 800729e:	e7e8      	b.n	8007272 <__hi0bits+0xc>
 80072a0:	2020      	movs	r0, #32
 80072a2:	4770      	bx	lr

080072a4 <__lo0bits>:
 80072a4:	6803      	ldr	r3, [r0, #0]
 80072a6:	4601      	mov	r1, r0
 80072a8:	f013 0207 	ands.w	r2, r3, #7
 80072ac:	d00b      	beq.n	80072c6 <__lo0bits+0x22>
 80072ae:	07da      	lsls	r2, r3, #31
 80072b0:	d423      	bmi.n	80072fa <__lo0bits+0x56>
 80072b2:	0798      	lsls	r0, r3, #30
 80072b4:	bf49      	itett	mi
 80072b6:	085b      	lsrmi	r3, r3, #1
 80072b8:	089b      	lsrpl	r3, r3, #2
 80072ba:	2001      	movmi	r0, #1
 80072bc:	600b      	strmi	r3, [r1, #0]
 80072be:	bf5c      	itt	pl
 80072c0:	600b      	strpl	r3, [r1, #0]
 80072c2:	2002      	movpl	r0, #2
 80072c4:	4770      	bx	lr
 80072c6:	b298      	uxth	r0, r3
 80072c8:	b9a8      	cbnz	r0, 80072f6 <__lo0bits+0x52>
 80072ca:	2010      	movs	r0, #16
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072d2:	bf04      	itt	eq
 80072d4:	0a1b      	lsreq	r3, r3, #8
 80072d6:	3008      	addeq	r0, #8
 80072d8:	071a      	lsls	r2, r3, #28
 80072da:	bf04      	itt	eq
 80072dc:	091b      	lsreq	r3, r3, #4
 80072de:	3004      	addeq	r0, #4
 80072e0:	079a      	lsls	r2, r3, #30
 80072e2:	bf04      	itt	eq
 80072e4:	089b      	lsreq	r3, r3, #2
 80072e6:	3002      	addeq	r0, #2
 80072e8:	07da      	lsls	r2, r3, #31
 80072ea:	d402      	bmi.n	80072f2 <__lo0bits+0x4e>
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	d006      	beq.n	80072fe <__lo0bits+0x5a>
 80072f0:	3001      	adds	r0, #1
 80072f2:	600b      	str	r3, [r1, #0]
 80072f4:	4770      	bx	lr
 80072f6:	4610      	mov	r0, r2
 80072f8:	e7e9      	b.n	80072ce <__lo0bits+0x2a>
 80072fa:	2000      	movs	r0, #0
 80072fc:	4770      	bx	lr
 80072fe:	2020      	movs	r0, #32
 8007300:	4770      	bx	lr

08007302 <__i2b>:
 8007302:	b510      	push	{r4, lr}
 8007304:	460c      	mov	r4, r1
 8007306:	2101      	movs	r1, #1
 8007308:	f7ff fee9 	bl	80070de <_Balloc>
 800730c:	2201      	movs	r2, #1
 800730e:	6144      	str	r4, [r0, #20]
 8007310:	6102      	str	r2, [r0, #16]
 8007312:	bd10      	pop	{r4, pc}

08007314 <__multiply>:
 8007314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	4614      	mov	r4, r2
 800731a:	690a      	ldr	r2, [r1, #16]
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	4688      	mov	r8, r1
 8007320:	429a      	cmp	r2, r3
 8007322:	bfbe      	ittt	lt
 8007324:	460b      	movlt	r3, r1
 8007326:	46a0      	movlt	r8, r4
 8007328:	461c      	movlt	r4, r3
 800732a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800732e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007336:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800733a:	eb07 0609 	add.w	r6, r7, r9
 800733e:	42b3      	cmp	r3, r6
 8007340:	bfb8      	it	lt
 8007342:	3101      	addlt	r1, #1
 8007344:	f7ff fecb 	bl	80070de <_Balloc>
 8007348:	f100 0514 	add.w	r5, r0, #20
 800734c:	462b      	mov	r3, r5
 800734e:	2200      	movs	r2, #0
 8007350:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007354:	4573      	cmp	r3, lr
 8007356:	d316      	bcc.n	8007386 <__multiply+0x72>
 8007358:	f104 0214 	add.w	r2, r4, #20
 800735c:	f108 0114 	add.w	r1, r8, #20
 8007360:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007364:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	9201      	str	r2, [sp, #4]
 800736e:	4293      	cmp	r3, r2
 8007370:	d80c      	bhi.n	800738c <__multiply+0x78>
 8007372:	2e00      	cmp	r6, #0
 8007374:	dd03      	ble.n	800737e <__multiply+0x6a>
 8007376:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800737a:	2b00      	cmp	r3, #0
 800737c:	d05d      	beq.n	800743a <__multiply+0x126>
 800737e:	6106      	str	r6, [r0, #16]
 8007380:	b003      	add	sp, #12
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007386:	f843 2b04 	str.w	r2, [r3], #4
 800738a:	e7e3      	b.n	8007354 <__multiply+0x40>
 800738c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007390:	f1bb 0f00 	cmp.w	fp, #0
 8007394:	d023      	beq.n	80073de <__multiply+0xca>
 8007396:	4689      	mov	r9, r1
 8007398:	46ac      	mov	ip, r5
 800739a:	f04f 0800 	mov.w	r8, #0
 800739e:	f859 4b04 	ldr.w	r4, [r9], #4
 80073a2:	f8dc a000 	ldr.w	sl, [ip]
 80073a6:	b2a3      	uxth	r3, r4
 80073a8:	fa1f fa8a 	uxth.w	sl, sl
 80073ac:	fb0b a303 	mla	r3, fp, r3, sl
 80073b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073b4:	f8dc 4000 	ldr.w	r4, [ip]
 80073b8:	4443      	add	r3, r8
 80073ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073be:	fb0b 840a 	mla	r4, fp, sl, r8
 80073c2:	46e2      	mov	sl, ip
 80073c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073ce:	454f      	cmp	r7, r9
 80073d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80073d4:	f84a 3b04 	str.w	r3, [sl], #4
 80073d8:	d82b      	bhi.n	8007432 <__multiply+0x11e>
 80073da:	f8cc 8004 	str.w	r8, [ip, #4]
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	3204      	adds	r2, #4
 80073e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80073e6:	f1ba 0f00 	cmp.w	sl, #0
 80073ea:	d020      	beq.n	800742e <__multiply+0x11a>
 80073ec:	4689      	mov	r9, r1
 80073ee:	46a8      	mov	r8, r5
 80073f0:	f04f 0b00 	mov.w	fp, #0
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	f8b9 c000 	ldrh.w	ip, [r9]
 80073fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	fb0a 440c 	mla	r4, sl, ip, r4
 8007404:	46c4      	mov	ip, r8
 8007406:	445c      	add	r4, fp
 8007408:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800740c:	f84c 3b04 	str.w	r3, [ip], #4
 8007410:	f859 3b04 	ldr.w	r3, [r9], #4
 8007414:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	fb0a b303 	mla	r3, sl, r3, fp
 800741e:	454f      	cmp	r7, r9
 8007420:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007424:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007428:	d805      	bhi.n	8007436 <__multiply+0x122>
 800742a:	f8c8 3004 	str.w	r3, [r8, #4]
 800742e:	3504      	adds	r5, #4
 8007430:	e79b      	b.n	800736a <__multiply+0x56>
 8007432:	46d4      	mov	ip, sl
 8007434:	e7b3      	b.n	800739e <__multiply+0x8a>
 8007436:	46e0      	mov	r8, ip
 8007438:	e7dd      	b.n	80073f6 <__multiply+0xe2>
 800743a:	3e01      	subs	r6, #1
 800743c:	e799      	b.n	8007372 <__multiply+0x5e>
	...

08007440 <__pow5mult>:
 8007440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007444:	4615      	mov	r5, r2
 8007446:	f012 0203 	ands.w	r2, r2, #3
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	d007      	beq.n	8007460 <__pow5mult+0x20>
 8007450:	4c21      	ldr	r4, [pc, #132]	; (80074d8 <__pow5mult+0x98>)
 8007452:	3a01      	subs	r2, #1
 8007454:	2300      	movs	r3, #0
 8007456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800745a:	f7ff fe8b 	bl	8007174 <__multadd>
 800745e:	4607      	mov	r7, r0
 8007460:	10ad      	asrs	r5, r5, #2
 8007462:	d035      	beq.n	80074d0 <__pow5mult+0x90>
 8007464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007466:	b93c      	cbnz	r4, 8007478 <__pow5mult+0x38>
 8007468:	2010      	movs	r0, #16
 800746a:	f7ff fe05 	bl	8007078 <malloc>
 800746e:	6270      	str	r0, [r6, #36]	; 0x24
 8007470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007474:	6004      	str	r4, [r0, #0]
 8007476:	60c4      	str	r4, [r0, #12]
 8007478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800747c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007480:	b94c      	cbnz	r4, 8007496 <__pow5mult+0x56>
 8007482:	f240 2171 	movw	r1, #625	; 0x271
 8007486:	4630      	mov	r0, r6
 8007488:	f7ff ff3b 	bl	8007302 <__i2b>
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	f8c8 0008 	str.w	r0, [r8, #8]
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	f04f 0800 	mov.w	r8, #0
 800749a:	07eb      	lsls	r3, r5, #31
 800749c:	d50a      	bpl.n	80074b4 <__pow5mult+0x74>
 800749e:	4639      	mov	r1, r7
 80074a0:	4622      	mov	r2, r4
 80074a2:	4630      	mov	r0, r6
 80074a4:	f7ff ff36 	bl	8007314 <__multiply>
 80074a8:	4681      	mov	r9, r0
 80074aa:	4639      	mov	r1, r7
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff fe4a 	bl	8007146 <_Bfree>
 80074b2:	464f      	mov	r7, r9
 80074b4:	106d      	asrs	r5, r5, #1
 80074b6:	d00b      	beq.n	80074d0 <__pow5mult+0x90>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	b938      	cbnz	r0, 80074cc <__pow5mult+0x8c>
 80074bc:	4622      	mov	r2, r4
 80074be:	4621      	mov	r1, r4
 80074c0:	4630      	mov	r0, r6
 80074c2:	f7ff ff27 	bl	8007314 <__multiply>
 80074c6:	6020      	str	r0, [r4, #0]
 80074c8:	f8c0 8000 	str.w	r8, [r0]
 80074cc:	4604      	mov	r4, r0
 80074ce:	e7e4      	b.n	800749a <__pow5mult+0x5a>
 80074d0:	4638      	mov	r0, r7
 80074d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d6:	bf00      	nop
 80074d8:	080080f0 	.word	0x080080f0

080074dc <__lshift>:
 80074dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	4607      	mov	r7, r0
 80074e4:	4616      	mov	r6, r2
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074ec:	eb0a 0903 	add.w	r9, sl, r3
 80074f0:	6849      	ldr	r1, [r1, #4]
 80074f2:	68a3      	ldr	r3, [r4, #8]
 80074f4:	f109 0501 	add.w	r5, r9, #1
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	db32      	blt.n	8007562 <__lshift+0x86>
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff fdee 	bl	80070de <_Balloc>
 8007502:	2300      	movs	r3, #0
 8007504:	4680      	mov	r8, r0
 8007506:	461a      	mov	r2, r3
 8007508:	f100 0114 	add.w	r1, r0, #20
 800750c:	4553      	cmp	r3, sl
 800750e:	db2b      	blt.n	8007568 <__lshift+0x8c>
 8007510:	6920      	ldr	r0, [r4, #16]
 8007512:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007516:	f104 0314 	add.w	r3, r4, #20
 800751a:	f016 021f 	ands.w	r2, r6, #31
 800751e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007522:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007526:	d025      	beq.n	8007574 <__lshift+0x98>
 8007528:	2000      	movs	r0, #0
 800752a:	f1c2 0e20 	rsb	lr, r2, #32
 800752e:	468a      	mov	sl, r1
 8007530:	681e      	ldr	r6, [r3, #0]
 8007532:	4096      	lsls	r6, r2
 8007534:	4330      	orrs	r0, r6
 8007536:	f84a 0b04 	str.w	r0, [sl], #4
 800753a:	f853 0b04 	ldr.w	r0, [r3], #4
 800753e:	459c      	cmp	ip, r3
 8007540:	fa20 f00e 	lsr.w	r0, r0, lr
 8007544:	d814      	bhi.n	8007570 <__lshift+0x94>
 8007546:	6048      	str	r0, [r1, #4]
 8007548:	b108      	cbz	r0, 800754e <__lshift+0x72>
 800754a:	f109 0502 	add.w	r5, r9, #2
 800754e:	3d01      	subs	r5, #1
 8007550:	4638      	mov	r0, r7
 8007552:	f8c8 5010 	str.w	r5, [r8, #16]
 8007556:	4621      	mov	r1, r4
 8007558:	f7ff fdf5 	bl	8007146 <_Bfree>
 800755c:	4640      	mov	r0, r8
 800755e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007562:	3101      	adds	r1, #1
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	e7c7      	b.n	80074f8 <__lshift+0x1c>
 8007568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800756c:	3301      	adds	r3, #1
 800756e:	e7cd      	b.n	800750c <__lshift+0x30>
 8007570:	4651      	mov	r1, sl
 8007572:	e7dc      	b.n	800752e <__lshift+0x52>
 8007574:	3904      	subs	r1, #4
 8007576:	f853 2b04 	ldr.w	r2, [r3], #4
 800757a:	459c      	cmp	ip, r3
 800757c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007580:	d8f9      	bhi.n	8007576 <__lshift+0x9a>
 8007582:	e7e4      	b.n	800754e <__lshift+0x72>

08007584 <__mcmp>:
 8007584:	6903      	ldr	r3, [r0, #16]
 8007586:	690a      	ldr	r2, [r1, #16]
 8007588:	b530      	push	{r4, r5, lr}
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	d10c      	bne.n	80075a8 <__mcmp+0x24>
 800758e:	0092      	lsls	r2, r2, #2
 8007590:	3014      	adds	r0, #20
 8007592:	3114      	adds	r1, #20
 8007594:	1884      	adds	r4, r0, r2
 8007596:	4411      	add	r1, r2
 8007598:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800759c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075a0:	4295      	cmp	r5, r2
 80075a2:	d003      	beq.n	80075ac <__mcmp+0x28>
 80075a4:	d305      	bcc.n	80075b2 <__mcmp+0x2e>
 80075a6:	2301      	movs	r3, #1
 80075a8:	4618      	mov	r0, r3
 80075aa:	bd30      	pop	{r4, r5, pc}
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d3f3      	bcc.n	8007598 <__mcmp+0x14>
 80075b0:	e7fa      	b.n	80075a8 <__mcmp+0x24>
 80075b2:	f04f 33ff 	mov.w	r3, #4294967295
 80075b6:	e7f7      	b.n	80075a8 <__mcmp+0x24>

080075b8 <__mdiff>:
 80075b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075bc:	460d      	mov	r5, r1
 80075be:	4607      	mov	r7, r0
 80075c0:	4611      	mov	r1, r2
 80075c2:	4628      	mov	r0, r5
 80075c4:	4614      	mov	r4, r2
 80075c6:	f7ff ffdd 	bl	8007584 <__mcmp>
 80075ca:	1e06      	subs	r6, r0, #0
 80075cc:	d108      	bne.n	80075e0 <__mdiff+0x28>
 80075ce:	4631      	mov	r1, r6
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fd84 	bl	80070de <_Balloc>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80075dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075e0:	bfa4      	itt	ge
 80075e2:	4623      	movge	r3, r4
 80075e4:	462c      	movge	r4, r5
 80075e6:	4638      	mov	r0, r7
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	bfa6      	itte	ge
 80075ec:	461d      	movge	r5, r3
 80075ee:	2600      	movge	r6, #0
 80075f0:	2601      	movlt	r6, #1
 80075f2:	f7ff fd74 	bl	80070de <_Balloc>
 80075f6:	f04f 0e00 	mov.w	lr, #0
 80075fa:	60c6      	str	r6, [r0, #12]
 80075fc:	692b      	ldr	r3, [r5, #16]
 80075fe:	6926      	ldr	r6, [r4, #16]
 8007600:	f104 0214 	add.w	r2, r4, #20
 8007604:	f105 0914 	add.w	r9, r5, #20
 8007608:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800760c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007610:	f100 0114 	add.w	r1, r0, #20
 8007614:	f852 ab04 	ldr.w	sl, [r2], #4
 8007618:	f859 5b04 	ldr.w	r5, [r9], #4
 800761c:	fa1f f38a 	uxth.w	r3, sl
 8007620:	4473      	add	r3, lr
 8007622:	b2ac      	uxth	r4, r5
 8007624:	1b1b      	subs	r3, r3, r4
 8007626:	0c2c      	lsrs	r4, r5, #16
 8007628:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800762c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007630:	b29b      	uxth	r3, r3
 8007632:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007636:	45c8      	cmp	r8, r9
 8007638:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800763c:	4694      	mov	ip, r2
 800763e:	f841 4b04 	str.w	r4, [r1], #4
 8007642:	d8e7      	bhi.n	8007614 <__mdiff+0x5c>
 8007644:	45bc      	cmp	ip, r7
 8007646:	d304      	bcc.n	8007652 <__mdiff+0x9a>
 8007648:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800764c:	b183      	cbz	r3, 8007670 <__mdiff+0xb8>
 800764e:	6106      	str	r6, [r0, #16]
 8007650:	e7c4      	b.n	80075dc <__mdiff+0x24>
 8007652:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007656:	b2a2      	uxth	r2, r4
 8007658:	4472      	add	r2, lr
 800765a:	1413      	asrs	r3, r2, #16
 800765c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007660:	b292      	uxth	r2, r2
 8007662:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007666:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800766a:	f841 2b04 	str.w	r2, [r1], #4
 800766e:	e7e9      	b.n	8007644 <__mdiff+0x8c>
 8007670:	3e01      	subs	r6, #1
 8007672:	e7e9      	b.n	8007648 <__mdiff+0x90>

08007674 <__ulp>:
 8007674:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <__ulp+0x44>)
 8007676:	400b      	ands	r3, r1
 8007678:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800767c:	2b00      	cmp	r3, #0
 800767e:	dd02      	ble.n	8007686 <__ulp+0x12>
 8007680:	2000      	movs	r0, #0
 8007682:	4619      	mov	r1, r3
 8007684:	4770      	bx	lr
 8007686:	425b      	negs	r3, r3
 8007688:	151b      	asrs	r3, r3, #20
 800768a:	2b13      	cmp	r3, #19
 800768c:	f04f 0000 	mov.w	r0, #0
 8007690:	f04f 0100 	mov.w	r1, #0
 8007694:	dc04      	bgt.n	80076a0 <__ulp+0x2c>
 8007696:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800769a:	fa42 f103 	asr.w	r1, r2, r3
 800769e:	4770      	bx	lr
 80076a0:	2201      	movs	r2, #1
 80076a2:	3b14      	subs	r3, #20
 80076a4:	2b1e      	cmp	r3, #30
 80076a6:	bfce      	itee	gt
 80076a8:	4613      	movgt	r3, r2
 80076aa:	f1c3 031f 	rsble	r3, r3, #31
 80076ae:	fa02 f303 	lslle.w	r3, r2, r3
 80076b2:	4618      	mov	r0, r3
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	7ff00000 	.word	0x7ff00000

080076bc <__b2d>:
 80076bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	6907      	ldr	r7, [r0, #16]
 80076c2:	f100 0914 	add.w	r9, r0, #20
 80076c6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80076ca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80076ce:	f1a7 0804 	sub.w	r8, r7, #4
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7ff fdc7 	bl	8007266 <__hi0bits>
 80076d8:	f1c0 0320 	rsb	r3, r0, #32
 80076dc:	280a      	cmp	r0, #10
 80076de:	600b      	str	r3, [r1, #0]
 80076e0:	491e      	ldr	r1, [pc, #120]	; (800775c <__b2d+0xa0>)
 80076e2:	dc17      	bgt.n	8007714 <__b2d+0x58>
 80076e4:	45c1      	cmp	r9, r8
 80076e6:	bf28      	it	cs
 80076e8:	2200      	movcs	r2, #0
 80076ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80076ee:	fa26 f30c 	lsr.w	r3, r6, ip
 80076f2:	bf38      	it	cc
 80076f4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076f8:	ea43 0501 	orr.w	r5, r3, r1
 80076fc:	f100 0315 	add.w	r3, r0, #21
 8007700:	fa06 f303 	lsl.w	r3, r6, r3
 8007704:	fa22 f20c 	lsr.w	r2, r2, ip
 8007708:	ea43 0402 	orr.w	r4, r3, r2
 800770c:	4620      	mov	r0, r4
 800770e:	4629      	mov	r1, r5
 8007710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007714:	45c1      	cmp	r9, r8
 8007716:	bf3a      	itte	cc
 8007718:	f1a7 0808 	subcc.w	r8, r7, #8
 800771c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007720:	2200      	movcs	r2, #0
 8007722:	f1b0 030b 	subs.w	r3, r0, #11
 8007726:	d015      	beq.n	8007754 <__b2d+0x98>
 8007728:	409e      	lsls	r6, r3
 800772a:	f1c3 0720 	rsb	r7, r3, #32
 800772e:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8007732:	fa22 f107 	lsr.w	r1, r2, r7
 8007736:	45c8      	cmp	r8, r9
 8007738:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800773c:	ea46 0501 	orr.w	r5, r6, r1
 8007740:	bf94      	ite	ls
 8007742:	2100      	movls	r1, #0
 8007744:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007748:	fa02 f003 	lsl.w	r0, r2, r3
 800774c:	40f9      	lsrs	r1, r7
 800774e:	ea40 0401 	orr.w	r4, r0, r1
 8007752:	e7db      	b.n	800770c <__b2d+0x50>
 8007754:	ea46 0501 	orr.w	r5, r6, r1
 8007758:	4614      	mov	r4, r2
 800775a:	e7d7      	b.n	800770c <__b2d+0x50>
 800775c:	3ff00000 	.word	0x3ff00000

08007760 <__d2b>:
 8007760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007764:	461c      	mov	r4, r3
 8007766:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800776a:	2101      	movs	r1, #1
 800776c:	4690      	mov	r8, r2
 800776e:	f7ff fcb6 	bl	80070de <_Balloc>
 8007772:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007776:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800777a:	4607      	mov	r7, r0
 800777c:	bb34      	cbnz	r4, 80077cc <__d2b+0x6c>
 800777e:	9201      	str	r2, [sp, #4]
 8007780:	f1b8 0200 	subs.w	r2, r8, #0
 8007784:	d027      	beq.n	80077d6 <__d2b+0x76>
 8007786:	a802      	add	r0, sp, #8
 8007788:	f840 2d08 	str.w	r2, [r0, #-8]!
 800778c:	f7ff fd8a 	bl	80072a4 <__lo0bits>
 8007790:	9900      	ldr	r1, [sp, #0]
 8007792:	b1f0      	cbz	r0, 80077d2 <__d2b+0x72>
 8007794:	9a01      	ldr	r2, [sp, #4]
 8007796:	f1c0 0320 	rsb	r3, r0, #32
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	430b      	orrs	r3, r1
 80077a0:	40c2      	lsrs	r2, r0
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bf14      	ite	ne
 80077ac:	2102      	movne	r1, #2
 80077ae:	2101      	moveq	r1, #1
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	6139      	str	r1, [r7, #16]
 80077b4:	b1c4      	cbz	r4, 80077e8 <__d2b+0x88>
 80077b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80077ba:	4404      	add	r4, r0
 80077bc:	6034      	str	r4, [r6, #0]
 80077be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077c2:	6028      	str	r0, [r5, #0]
 80077c4:	4638      	mov	r0, r7
 80077c6:	b002      	add	sp, #8
 80077c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077d0:	e7d5      	b.n	800777e <__d2b+0x1e>
 80077d2:	6179      	str	r1, [r7, #20]
 80077d4:	e7e7      	b.n	80077a6 <__d2b+0x46>
 80077d6:	a801      	add	r0, sp, #4
 80077d8:	f7ff fd64 	bl	80072a4 <__lo0bits>
 80077dc:	2101      	movs	r1, #1
 80077de:	9b01      	ldr	r3, [sp, #4]
 80077e0:	6139      	str	r1, [r7, #16]
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	3020      	adds	r0, #32
 80077e6:	e7e5      	b.n	80077b4 <__d2b+0x54>
 80077e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80077f0:	6030      	str	r0, [r6, #0]
 80077f2:	6918      	ldr	r0, [r3, #16]
 80077f4:	f7ff fd37 	bl	8007266 <__hi0bits>
 80077f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077fc:	e7e1      	b.n	80077c2 <__d2b+0x62>

080077fe <__ratio>:
 80077fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007802:	4688      	mov	r8, r1
 8007804:	4669      	mov	r1, sp
 8007806:	4681      	mov	r9, r0
 8007808:	f7ff ff58 	bl	80076bc <__b2d>
 800780c:	468b      	mov	fp, r1
 800780e:	4606      	mov	r6, r0
 8007810:	460f      	mov	r7, r1
 8007812:	4640      	mov	r0, r8
 8007814:	a901      	add	r1, sp, #4
 8007816:	f7ff ff51 	bl	80076bc <__b2d>
 800781a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800781e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007822:	460d      	mov	r5, r1
 8007824:	eba3 0c02 	sub.w	ip, r3, r2
 8007828:	e9dd 3200 	ldrd	r3, r2, [sp]
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfd5      	itete	le
 8007836:	460a      	movle	r2, r1
 8007838:	463a      	movgt	r2, r7
 800783a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800783e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007842:	bfd8      	it	le
 8007844:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007848:	462b      	mov	r3, r5
 800784a:	4602      	mov	r2, r0
 800784c:	4659      	mov	r1, fp
 800784e:	4630      	mov	r0, r6
 8007850:	f7f8 ff76 	bl	8000740 <__aeabi_ddiv>
 8007854:	b003      	add	sp, #12
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800785a <__copybits>:
 800785a:	3901      	subs	r1, #1
 800785c:	b510      	push	{r4, lr}
 800785e:	1149      	asrs	r1, r1, #5
 8007860:	6914      	ldr	r4, [r2, #16]
 8007862:	3101      	adds	r1, #1
 8007864:	f102 0314 	add.w	r3, r2, #20
 8007868:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800786c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007870:	42a3      	cmp	r3, r4
 8007872:	4602      	mov	r2, r0
 8007874:	d303      	bcc.n	800787e <__copybits+0x24>
 8007876:	2300      	movs	r3, #0
 8007878:	428a      	cmp	r2, r1
 800787a:	d305      	bcc.n	8007888 <__copybits+0x2e>
 800787c:	bd10      	pop	{r4, pc}
 800787e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007882:	f840 2b04 	str.w	r2, [r0], #4
 8007886:	e7f3      	b.n	8007870 <__copybits+0x16>
 8007888:	f842 3b04 	str.w	r3, [r2], #4
 800788c:	e7f4      	b.n	8007878 <__copybits+0x1e>

0800788e <__any_on>:
 800788e:	f100 0214 	add.w	r2, r0, #20
 8007892:	6900      	ldr	r0, [r0, #16]
 8007894:	114b      	asrs	r3, r1, #5
 8007896:	4298      	cmp	r0, r3
 8007898:	b510      	push	{r4, lr}
 800789a:	db11      	blt.n	80078c0 <__any_on+0x32>
 800789c:	dd0a      	ble.n	80078b4 <__any_on+0x26>
 800789e:	f011 011f 	ands.w	r1, r1, #31
 80078a2:	d007      	beq.n	80078b4 <__any_on+0x26>
 80078a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80078a8:	fa24 f001 	lsr.w	r0, r4, r1
 80078ac:	fa00 f101 	lsl.w	r1, r0, r1
 80078b0:	428c      	cmp	r4, r1
 80078b2:	d10b      	bne.n	80078cc <__any_on+0x3e>
 80078b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d803      	bhi.n	80078c4 <__any_on+0x36>
 80078bc:	2000      	movs	r0, #0
 80078be:	bd10      	pop	{r4, pc}
 80078c0:	4603      	mov	r3, r0
 80078c2:	e7f7      	b.n	80078b4 <__any_on+0x26>
 80078c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d0f5      	beq.n	80078b8 <__any_on+0x2a>
 80078cc:	2001      	movs	r0, #1
 80078ce:	e7f6      	b.n	80078be <__any_on+0x30>

080078d0 <_calloc_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	fb02 f401 	mul.w	r4, r2, r1
 80078d6:	4621      	mov	r1, r4
 80078d8:	f000 f854 	bl	8007984 <_malloc_r>
 80078dc:	4605      	mov	r5, r0
 80078de:	b118      	cbz	r0, 80078e8 <_calloc_r+0x18>
 80078e0:	4622      	mov	r2, r4
 80078e2:	2100      	movs	r1, #0
 80078e4:	f7fc feac 	bl	8004640 <memset>
 80078e8:	4628      	mov	r0, r5
 80078ea:	bd38      	pop	{r3, r4, r5, pc}

080078ec <_free_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4605      	mov	r5, r0
 80078f0:	2900      	cmp	r1, #0
 80078f2:	d043      	beq.n	800797c <_free_r+0x90>
 80078f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f8:	1f0c      	subs	r4, r1, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bfb8      	it	lt
 80078fe:	18e4      	addlt	r4, r4, r3
 8007900:	f000 fa34 	bl	8007d6c <__malloc_lock>
 8007904:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <_free_r+0x94>)
 8007906:	6813      	ldr	r3, [r2, #0]
 8007908:	4610      	mov	r0, r2
 800790a:	b933      	cbnz	r3, 800791a <_free_r+0x2e>
 800790c:	6063      	str	r3, [r4, #4]
 800790e:	6014      	str	r4, [r2, #0]
 8007910:	4628      	mov	r0, r5
 8007912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007916:	f000 ba2a 	b.w	8007d6e <__malloc_unlock>
 800791a:	42a3      	cmp	r3, r4
 800791c:	d90b      	bls.n	8007936 <_free_r+0x4a>
 800791e:	6821      	ldr	r1, [r4, #0]
 8007920:	1862      	adds	r2, r4, r1
 8007922:	4293      	cmp	r3, r2
 8007924:	bf01      	itttt	eq
 8007926:	681a      	ldreq	r2, [r3, #0]
 8007928:	685b      	ldreq	r3, [r3, #4]
 800792a:	1852      	addeq	r2, r2, r1
 800792c:	6022      	streq	r2, [r4, #0]
 800792e:	6063      	str	r3, [r4, #4]
 8007930:	6004      	str	r4, [r0, #0]
 8007932:	e7ed      	b.n	8007910 <_free_r+0x24>
 8007934:	4613      	mov	r3, r2
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	b10a      	cbz	r2, 800793e <_free_r+0x52>
 800793a:	42a2      	cmp	r2, r4
 800793c:	d9fa      	bls.n	8007934 <_free_r+0x48>
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	1858      	adds	r0, r3, r1
 8007942:	42a0      	cmp	r0, r4
 8007944:	d10b      	bne.n	800795e <_free_r+0x72>
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	4401      	add	r1, r0
 800794a:	1858      	adds	r0, r3, r1
 800794c:	4282      	cmp	r2, r0
 800794e:	6019      	str	r1, [r3, #0]
 8007950:	d1de      	bne.n	8007910 <_free_r+0x24>
 8007952:	6810      	ldr	r0, [r2, #0]
 8007954:	6852      	ldr	r2, [r2, #4]
 8007956:	4401      	add	r1, r0
 8007958:	6019      	str	r1, [r3, #0]
 800795a:	605a      	str	r2, [r3, #4]
 800795c:	e7d8      	b.n	8007910 <_free_r+0x24>
 800795e:	d902      	bls.n	8007966 <_free_r+0x7a>
 8007960:	230c      	movs	r3, #12
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	e7d4      	b.n	8007910 <_free_r+0x24>
 8007966:	6820      	ldr	r0, [r4, #0]
 8007968:	1821      	adds	r1, r4, r0
 800796a:	428a      	cmp	r2, r1
 800796c:	bf01      	itttt	eq
 800796e:	6811      	ldreq	r1, [r2, #0]
 8007970:	6852      	ldreq	r2, [r2, #4]
 8007972:	1809      	addeq	r1, r1, r0
 8007974:	6021      	streq	r1, [r4, #0]
 8007976:	6062      	str	r2, [r4, #4]
 8007978:	605c      	str	r4, [r3, #4]
 800797a:	e7c9      	b.n	8007910 <_free_r+0x24>
 800797c:	bd38      	pop	{r3, r4, r5, pc}
 800797e:	bf00      	nop
 8007980:	2000021c 	.word	0x2000021c

08007984 <_malloc_r>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	1ccd      	adds	r5, r1, #3
 8007988:	f025 0503 	bic.w	r5, r5, #3
 800798c:	3508      	adds	r5, #8
 800798e:	2d0c      	cmp	r5, #12
 8007990:	bf38      	it	cc
 8007992:	250c      	movcc	r5, #12
 8007994:	2d00      	cmp	r5, #0
 8007996:	4606      	mov	r6, r0
 8007998:	db01      	blt.n	800799e <_malloc_r+0x1a>
 800799a:	42a9      	cmp	r1, r5
 800799c:	d903      	bls.n	80079a6 <_malloc_r+0x22>
 800799e:	230c      	movs	r3, #12
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	2000      	movs	r0, #0
 80079a4:	bd70      	pop	{r4, r5, r6, pc}
 80079a6:	f000 f9e1 	bl	8007d6c <__malloc_lock>
 80079aa:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <_malloc_r+0xac>)
 80079ac:	6814      	ldr	r4, [r2, #0]
 80079ae:	4621      	mov	r1, r4
 80079b0:	b991      	cbnz	r1, 80079d8 <_malloc_r+0x54>
 80079b2:	4c20      	ldr	r4, [pc, #128]	; (8007a34 <_malloc_r+0xb0>)
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	b91b      	cbnz	r3, 80079c0 <_malloc_r+0x3c>
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 f98f 	bl	8007cdc <_sbrk_r>
 80079be:	6020      	str	r0, [r4, #0]
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 f98a 	bl	8007cdc <_sbrk_r>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d124      	bne.n	8007a16 <_malloc_r+0x92>
 80079cc:	230c      	movs	r3, #12
 80079ce:	4630      	mov	r0, r6
 80079d0:	6033      	str	r3, [r6, #0]
 80079d2:	f000 f9cc 	bl	8007d6e <__malloc_unlock>
 80079d6:	e7e4      	b.n	80079a2 <_malloc_r+0x1e>
 80079d8:	680b      	ldr	r3, [r1, #0]
 80079da:	1b5b      	subs	r3, r3, r5
 80079dc:	d418      	bmi.n	8007a10 <_malloc_r+0x8c>
 80079de:	2b0b      	cmp	r3, #11
 80079e0:	d90f      	bls.n	8007a02 <_malloc_r+0x7e>
 80079e2:	600b      	str	r3, [r1, #0]
 80079e4:	18cc      	adds	r4, r1, r3
 80079e6:	50cd      	str	r5, [r1, r3]
 80079e8:	4630      	mov	r0, r6
 80079ea:	f000 f9c0 	bl	8007d6e <__malloc_unlock>
 80079ee:	f104 000b 	add.w	r0, r4, #11
 80079f2:	1d23      	adds	r3, r4, #4
 80079f4:	f020 0007 	bic.w	r0, r0, #7
 80079f8:	1ac3      	subs	r3, r0, r3
 80079fa:	d0d3      	beq.n	80079a4 <_malloc_r+0x20>
 80079fc:	425a      	negs	r2, r3
 80079fe:	50e2      	str	r2, [r4, r3]
 8007a00:	e7d0      	b.n	80079a4 <_malloc_r+0x20>
 8007a02:	684b      	ldr	r3, [r1, #4]
 8007a04:	428c      	cmp	r4, r1
 8007a06:	bf16      	itet	ne
 8007a08:	6063      	strne	r3, [r4, #4]
 8007a0a:	6013      	streq	r3, [r2, #0]
 8007a0c:	460c      	movne	r4, r1
 8007a0e:	e7eb      	b.n	80079e8 <_malloc_r+0x64>
 8007a10:	460c      	mov	r4, r1
 8007a12:	6849      	ldr	r1, [r1, #4]
 8007a14:	e7cc      	b.n	80079b0 <_malloc_r+0x2c>
 8007a16:	1cc4      	adds	r4, r0, #3
 8007a18:	f024 0403 	bic.w	r4, r4, #3
 8007a1c:	42a0      	cmp	r0, r4
 8007a1e:	d005      	beq.n	8007a2c <_malloc_r+0xa8>
 8007a20:	1a21      	subs	r1, r4, r0
 8007a22:	4630      	mov	r0, r6
 8007a24:	f000 f95a 	bl	8007cdc <_sbrk_r>
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d0cf      	beq.n	80079cc <_malloc_r+0x48>
 8007a2c:	6025      	str	r5, [r4, #0]
 8007a2e:	e7db      	b.n	80079e8 <_malloc_r+0x64>
 8007a30:	2000021c 	.word	0x2000021c
 8007a34:	20000220 	.word	0x20000220

08007a38 <__ssputs_r>:
 8007a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a3c:	688e      	ldr	r6, [r1, #8]
 8007a3e:	4682      	mov	sl, r0
 8007a40:	429e      	cmp	r6, r3
 8007a42:	460c      	mov	r4, r1
 8007a44:	4690      	mov	r8, r2
 8007a46:	4699      	mov	r9, r3
 8007a48:	d837      	bhi.n	8007aba <__ssputs_r+0x82>
 8007a4a:	898a      	ldrh	r2, [r1, #12]
 8007a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a50:	d031      	beq.n	8007ab6 <__ssputs_r+0x7e>
 8007a52:	2302      	movs	r3, #2
 8007a54:	6825      	ldr	r5, [r4, #0]
 8007a56:	6909      	ldr	r1, [r1, #16]
 8007a58:	1a6f      	subs	r7, r5, r1
 8007a5a:	6965      	ldr	r5, [r4, #20]
 8007a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a60:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a64:	f109 0301 	add.w	r3, r9, #1
 8007a68:	443b      	add	r3, r7
 8007a6a:	429d      	cmp	r5, r3
 8007a6c:	bf38      	it	cc
 8007a6e:	461d      	movcc	r5, r3
 8007a70:	0553      	lsls	r3, r2, #21
 8007a72:	d530      	bpl.n	8007ad6 <__ssputs_r+0x9e>
 8007a74:	4629      	mov	r1, r5
 8007a76:	f7ff ff85 	bl	8007984 <_malloc_r>
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	b950      	cbnz	r0, 8007a94 <__ssputs_r+0x5c>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	f8ca 3000 	str.w	r3, [sl]
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a94:	463a      	mov	r2, r7
 8007a96:	6921      	ldr	r1, [r4, #16]
 8007a98:	f7ff fb16 	bl	80070c8 <memcpy>
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa6:	81a3      	strh	r3, [r4, #12]
 8007aa8:	6126      	str	r6, [r4, #16]
 8007aaa:	443e      	add	r6, r7
 8007aac:	6026      	str	r6, [r4, #0]
 8007aae:	464e      	mov	r6, r9
 8007ab0:	6165      	str	r5, [r4, #20]
 8007ab2:	1bed      	subs	r5, r5, r7
 8007ab4:	60a5      	str	r5, [r4, #8]
 8007ab6:	454e      	cmp	r6, r9
 8007ab8:	d900      	bls.n	8007abc <__ssputs_r+0x84>
 8007aba:	464e      	mov	r6, r9
 8007abc:	4632      	mov	r2, r6
 8007abe:	4641      	mov	r1, r8
 8007ac0:	6820      	ldr	r0, [r4, #0]
 8007ac2:	f000 f93a 	bl	8007d3a <memmove>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	2000      	movs	r0, #0
 8007aca:	1b9b      	subs	r3, r3, r6
 8007acc:	60a3      	str	r3, [r4, #8]
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	441e      	add	r6, r3
 8007ad2:	6026      	str	r6, [r4, #0]
 8007ad4:	e7dc      	b.n	8007a90 <__ssputs_r+0x58>
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	f000 f94a 	bl	8007d70 <_realloc_r>
 8007adc:	4606      	mov	r6, r0
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d1e2      	bne.n	8007aa8 <__ssputs_r+0x70>
 8007ae2:	6921      	ldr	r1, [r4, #16]
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	f7ff ff01 	bl	80078ec <_free_r>
 8007aea:	e7c8      	b.n	8007a7e <__ssputs_r+0x46>

08007aec <_svfiprintf_r>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	461d      	mov	r5, r3
 8007af2:	898b      	ldrh	r3, [r1, #12]
 8007af4:	b09d      	sub	sp, #116	; 0x74
 8007af6:	061f      	lsls	r7, r3, #24
 8007af8:	4680      	mov	r8, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	4616      	mov	r6, r2
 8007afe:	d50f      	bpl.n	8007b20 <_svfiprintf_r+0x34>
 8007b00:	690b      	ldr	r3, [r1, #16]
 8007b02:	b96b      	cbnz	r3, 8007b20 <_svfiprintf_r+0x34>
 8007b04:	2140      	movs	r1, #64	; 0x40
 8007b06:	f7ff ff3d 	bl	8007984 <_malloc_r>
 8007b0a:	6020      	str	r0, [r4, #0]
 8007b0c:	6120      	str	r0, [r4, #16]
 8007b0e:	b928      	cbnz	r0, 8007b1c <_svfiprintf_r+0x30>
 8007b10:	230c      	movs	r3, #12
 8007b12:	f8c8 3000 	str.w	r3, [r8]
 8007b16:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1a:	e0c8      	b.n	8007cae <_svfiprintf_r+0x1c2>
 8007b1c:	2340      	movs	r3, #64	; 0x40
 8007b1e:	6163      	str	r3, [r4, #20]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9309      	str	r3, [sp, #36]	; 0x24
 8007b24:	2320      	movs	r3, #32
 8007b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b2a:	2330      	movs	r3, #48	; 0x30
 8007b2c:	f04f 0b01 	mov.w	fp, #1
 8007b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b34:	9503      	str	r5, [sp, #12]
 8007b36:	4637      	mov	r7, r6
 8007b38:	463d      	mov	r5, r7
 8007b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007b3e:	b10b      	cbz	r3, 8007b44 <_svfiprintf_r+0x58>
 8007b40:	2b25      	cmp	r3, #37	; 0x25
 8007b42:	d13e      	bne.n	8007bc2 <_svfiprintf_r+0xd6>
 8007b44:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b48:	d00b      	beq.n	8007b62 <_svfiprintf_r+0x76>
 8007b4a:	4653      	mov	r3, sl
 8007b4c:	4632      	mov	r2, r6
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4640      	mov	r0, r8
 8007b52:	f7ff ff71 	bl	8007a38 <__ssputs_r>
 8007b56:	3001      	adds	r0, #1
 8007b58:	f000 80a4 	beq.w	8007ca4 <_svfiprintf_r+0x1b8>
 8007b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5e:	4453      	add	r3, sl
 8007b60:	9309      	str	r3, [sp, #36]	; 0x24
 8007b62:	783b      	ldrb	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 809d 	beq.w	8007ca4 <_svfiprintf_r+0x1b8>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	9307      	str	r3, [sp, #28]
 8007b78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b7e:	462f      	mov	r7, r5
 8007b80:	2205      	movs	r2, #5
 8007b82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b86:	4850      	ldr	r0, [pc, #320]	; (8007cc8 <_svfiprintf_r+0x1dc>)
 8007b88:	f7ff fa90 	bl	80070ac <memchr>
 8007b8c:	9b04      	ldr	r3, [sp, #16]
 8007b8e:	b9d0      	cbnz	r0, 8007bc6 <_svfiprintf_r+0xda>
 8007b90:	06d9      	lsls	r1, r3, #27
 8007b92:	bf44      	itt	mi
 8007b94:	2220      	movmi	r2, #32
 8007b96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b9a:	071a      	lsls	r2, r3, #28
 8007b9c:	bf44      	itt	mi
 8007b9e:	222b      	movmi	r2, #43	; 0x2b
 8007ba0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ba4:	782a      	ldrb	r2, [r5, #0]
 8007ba6:	2a2a      	cmp	r2, #42	; 0x2a
 8007ba8:	d015      	beq.n	8007bd6 <_svfiprintf_r+0xea>
 8007baa:	462f      	mov	r7, r5
 8007bac:	2000      	movs	r0, #0
 8007bae:	250a      	movs	r5, #10
 8007bb0:	9a07      	ldr	r2, [sp, #28]
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb8:	3b30      	subs	r3, #48	; 0x30
 8007bba:	2b09      	cmp	r3, #9
 8007bbc:	d94d      	bls.n	8007c5a <_svfiprintf_r+0x16e>
 8007bbe:	b1b8      	cbz	r0, 8007bf0 <_svfiprintf_r+0x104>
 8007bc0:	e00f      	b.n	8007be2 <_svfiprintf_r+0xf6>
 8007bc2:	462f      	mov	r7, r5
 8007bc4:	e7b8      	b.n	8007b38 <_svfiprintf_r+0x4c>
 8007bc6:	4a40      	ldr	r2, [pc, #256]	; (8007cc8 <_svfiprintf_r+0x1dc>)
 8007bc8:	463d      	mov	r5, r7
 8007bca:	1a80      	subs	r0, r0, r2
 8007bcc:	fa0b f000 	lsl.w	r0, fp, r0
 8007bd0:	4318      	orrs	r0, r3
 8007bd2:	9004      	str	r0, [sp, #16]
 8007bd4:	e7d3      	b.n	8007b7e <_svfiprintf_r+0x92>
 8007bd6:	9a03      	ldr	r2, [sp, #12]
 8007bd8:	1d11      	adds	r1, r2, #4
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	9103      	str	r1, [sp, #12]
 8007bde:	2a00      	cmp	r2, #0
 8007be0:	db01      	blt.n	8007be6 <_svfiprintf_r+0xfa>
 8007be2:	9207      	str	r2, [sp, #28]
 8007be4:	e004      	b.n	8007bf0 <_svfiprintf_r+0x104>
 8007be6:	4252      	negs	r2, r2
 8007be8:	f043 0302 	orr.w	r3, r3, #2
 8007bec:	9207      	str	r2, [sp, #28]
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	783b      	ldrb	r3, [r7, #0]
 8007bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf4:	d10c      	bne.n	8007c10 <_svfiprintf_r+0x124>
 8007bf6:	787b      	ldrb	r3, [r7, #1]
 8007bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfa:	d133      	bne.n	8007c64 <_svfiprintf_r+0x178>
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	3702      	adds	r7, #2
 8007c00:	1d1a      	adds	r2, r3, #4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	9203      	str	r2, [sp, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bfb8      	it	lt
 8007c0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	4d2e      	ldr	r5, [pc, #184]	; (8007ccc <_svfiprintf_r+0x1e0>)
 8007c12:	2203      	movs	r2, #3
 8007c14:	7839      	ldrb	r1, [r7, #0]
 8007c16:	4628      	mov	r0, r5
 8007c18:	f7ff fa48 	bl	80070ac <memchr>
 8007c1c:	b138      	cbz	r0, 8007c2e <_svfiprintf_r+0x142>
 8007c1e:	2340      	movs	r3, #64	; 0x40
 8007c20:	1b40      	subs	r0, r0, r5
 8007c22:	fa03 f000 	lsl.w	r0, r3, r0
 8007c26:	9b04      	ldr	r3, [sp, #16]
 8007c28:	3701      	adds	r7, #1
 8007c2a:	4303      	orrs	r3, r0
 8007c2c:	9304      	str	r3, [sp, #16]
 8007c2e:	7839      	ldrb	r1, [r7, #0]
 8007c30:	2206      	movs	r2, #6
 8007c32:	4827      	ldr	r0, [pc, #156]	; (8007cd0 <_svfiprintf_r+0x1e4>)
 8007c34:	1c7e      	adds	r6, r7, #1
 8007c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c3a:	f7ff fa37 	bl	80070ac <memchr>
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d038      	beq.n	8007cb4 <_svfiprintf_r+0x1c8>
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <_svfiprintf_r+0x1e8>)
 8007c44:	bb13      	cbnz	r3, 8007c8c <_svfiprintf_r+0x1a0>
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	3307      	adds	r3, #7
 8007c4a:	f023 0307 	bic.w	r3, r3, #7
 8007c4e:	3308      	adds	r3, #8
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	444b      	add	r3, r9
 8007c56:	9309      	str	r3, [sp, #36]	; 0x24
 8007c58:	e76d      	b.n	8007b36 <_svfiprintf_r+0x4a>
 8007c5a:	fb05 3202 	mla	r2, r5, r2, r3
 8007c5e:	2001      	movs	r0, #1
 8007c60:	460f      	mov	r7, r1
 8007c62:	e7a6      	b.n	8007bb2 <_svfiprintf_r+0xc6>
 8007c64:	2300      	movs	r3, #0
 8007c66:	250a      	movs	r5, #10
 8007c68:	4619      	mov	r1, r3
 8007c6a:	3701      	adds	r7, #1
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c74:	3a30      	subs	r2, #48	; 0x30
 8007c76:	2a09      	cmp	r2, #9
 8007c78:	d903      	bls.n	8007c82 <_svfiprintf_r+0x196>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0c8      	beq.n	8007c10 <_svfiprintf_r+0x124>
 8007c7e:	9105      	str	r1, [sp, #20]
 8007c80:	e7c6      	b.n	8007c10 <_svfiprintf_r+0x124>
 8007c82:	fb05 2101 	mla	r1, r5, r1, r2
 8007c86:	2301      	movs	r3, #1
 8007c88:	4607      	mov	r7, r0
 8007c8a:	e7f0      	b.n	8007c6e <_svfiprintf_r+0x182>
 8007c8c:	ab03      	add	r3, sp, #12
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	4622      	mov	r2, r4
 8007c92:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <_svfiprintf_r+0x1ec>)
 8007c94:	a904      	add	r1, sp, #16
 8007c96:	4640      	mov	r0, r8
 8007c98:	f7fc fd6c 	bl	8004774 <_printf_float>
 8007c9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ca0:	4681      	mov	r9, r0
 8007ca2:	d1d6      	bne.n	8007c52 <_svfiprintf_r+0x166>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	065b      	lsls	r3, r3, #25
 8007ca8:	f53f af35 	bmi.w	8007b16 <_svfiprintf_r+0x2a>
 8007cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cae:	b01d      	add	sp, #116	; 0x74
 8007cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	ab03      	add	r3, sp, #12
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	4622      	mov	r2, r4
 8007cba:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <_svfiprintf_r+0x1ec>)
 8007cbc:	a904      	add	r1, sp, #16
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f7fd f804 	bl	8004ccc <_printf_i>
 8007cc4:	e7ea      	b.n	8007c9c <_svfiprintf_r+0x1b0>
 8007cc6:	bf00      	nop
 8007cc8:	080080fc 	.word	0x080080fc
 8007ccc:	08008102 	.word	0x08008102
 8007cd0:	08008106 	.word	0x08008106
 8007cd4:	08004775 	.word	0x08004775
 8007cd8:	08007a39 	.word	0x08007a39

08007cdc <_sbrk_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4c05      	ldr	r4, [pc, #20]	; (8007cf8 <_sbrk_r+0x1c>)
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	6023      	str	r3, [r4, #0]
 8007ce8:	f7f9 fd16 	bl	8001718 <_sbrk>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_sbrk_r+0x1a>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_sbrk_r+0x1a>
 8007cf4:	602b      	str	r3, [r5, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	20000568 	.word	0x20000568

08007cfc <strncmp>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	b16a      	cbz	r2, 8007d1c <strncmp+0x20>
 8007d00:	3901      	subs	r1, #1
 8007d02:	1884      	adds	r4, r0, r2
 8007d04:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007d08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d103      	bne.n	8007d18 <strncmp+0x1c>
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d001      	beq.n	8007d18 <strncmp+0x1c>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1f5      	bne.n	8007d04 <strncmp+0x8>
 8007d18:	1a98      	subs	r0, r3, r2
 8007d1a:	bd10      	pop	{r4, pc}
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	e7fc      	b.n	8007d1a <strncmp+0x1e>

08007d20 <__ascii_wctomb>:
 8007d20:	b149      	cbz	r1, 8007d36 <__ascii_wctomb+0x16>
 8007d22:	2aff      	cmp	r2, #255	; 0xff
 8007d24:	bf8b      	itete	hi
 8007d26:	238a      	movhi	r3, #138	; 0x8a
 8007d28:	700a      	strbls	r2, [r1, #0]
 8007d2a:	6003      	strhi	r3, [r0, #0]
 8007d2c:	2001      	movls	r0, #1
 8007d2e:	bf88      	it	hi
 8007d30:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d34:	4770      	bx	lr
 8007d36:	4608      	mov	r0, r1
 8007d38:	4770      	bx	lr

08007d3a <memmove>:
 8007d3a:	4288      	cmp	r0, r1
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	eb01 0302 	add.w	r3, r1, r2
 8007d42:	d807      	bhi.n	8007d54 <memmove+0x1a>
 8007d44:	1e42      	subs	r2, r0, #1
 8007d46:	4299      	cmp	r1, r3
 8007d48:	d00a      	beq.n	8007d60 <memmove+0x26>
 8007d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d52:	e7f8      	b.n	8007d46 <memmove+0xc>
 8007d54:	4283      	cmp	r3, r0
 8007d56:	d9f5      	bls.n	8007d44 <memmove+0xa>
 8007d58:	1881      	adds	r1, r0, r2
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	42d3      	cmn	r3, r2
 8007d5e:	d100      	bne.n	8007d62 <memmove+0x28>
 8007d60:	bd10      	pop	{r4, pc}
 8007d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d6a:	e7f7      	b.n	8007d5c <memmove+0x22>

08007d6c <__malloc_lock>:
 8007d6c:	4770      	bx	lr

08007d6e <__malloc_unlock>:
 8007d6e:	4770      	bx	lr

08007d70 <_realloc_r>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	4607      	mov	r7, r0
 8007d74:	4614      	mov	r4, r2
 8007d76:	460e      	mov	r6, r1
 8007d78:	b921      	cbnz	r1, 8007d84 <_realloc_r+0x14>
 8007d7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d7e:	4611      	mov	r1, r2
 8007d80:	f7ff be00 	b.w	8007984 <_malloc_r>
 8007d84:	b922      	cbnz	r2, 8007d90 <_realloc_r+0x20>
 8007d86:	f7ff fdb1 	bl	80078ec <_free_r>
 8007d8a:	4625      	mov	r5, r4
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d90:	f000 f814 	bl	8007dbc <_malloc_usable_size_r>
 8007d94:	42a0      	cmp	r0, r4
 8007d96:	d20f      	bcs.n	8007db8 <_realloc_r+0x48>
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	f7ff fdf2 	bl	8007984 <_malloc_r>
 8007da0:	4605      	mov	r5, r0
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0f2      	beq.n	8007d8c <_realloc_r+0x1c>
 8007da6:	4631      	mov	r1, r6
 8007da8:	4622      	mov	r2, r4
 8007daa:	f7ff f98d 	bl	80070c8 <memcpy>
 8007dae:	4631      	mov	r1, r6
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff fd9b 	bl	80078ec <_free_r>
 8007db6:	e7e9      	b.n	8007d8c <_realloc_r+0x1c>
 8007db8:	4635      	mov	r5, r6
 8007dba:	e7e7      	b.n	8007d8c <_realloc_r+0x1c>

08007dbc <_malloc_usable_size_r>:
 8007dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc0:	1f18      	subs	r0, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bfbc      	itt	lt
 8007dc6:	580b      	ldrlt	r3, [r1, r0]
 8007dc8:	18c0      	addlt	r0, r0, r3
 8007dca:	4770      	bx	lr

08007dcc <_init>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr

08007dd8 <_fini>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr
